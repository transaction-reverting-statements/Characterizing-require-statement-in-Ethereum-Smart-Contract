{{
  "language": "Solidity",
  "sources": {
    "contracts/localcoinswap/LocalCoinSwapV2.sol": {
      "content": "pragma solidity ^0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ncontract Token is IERC20 {\n    function transferWithAuthorization(\n        address from,\n        address to,\n        uint256 value,\n        uint256 validAfter,\n        uint256 validBefore,\n        bytes32 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\n\ncontract LocalCoinSwapV2Escrow {\n\n    using SafeERC20 for Token;\n\n    /***********************\n    +       Globals        +\n    ***********************/\n\n    address public arbitrator;\n    address public owner;\n    address public relayer;\n\n    uint16 public minimumTradeValue = 1; // Token\n\n    struct Escrow {\n      bool exists;\n      uint128 totalGasFeesSpentByRelayer;\n      address tokenContract;\n    }\n\n    mapping (bytes32 => Escrow) public escrows;\n    mapping (address => uint256) public feesAvailableForWithdraw;\n\n    uint256 MAX_INT = 2**256 - 1;\n\n    /***********************\n    +     Instructions     +\n    ***********************/\n\n    uint8 constant RELEASE_ESCROW = 0x01;\n    uint8 constant BUYER_CANCELS = 0x02;\n    uint8 constant RESOLVE_DISPUTE = 0x03;\n\n    /***********************\n    +       Events        +\n    ***********************/\n\n    event Created(bytes32 _tradeHash);\n    event CancelledByBuyer(bytes32 _tradeHash, uint128 totalGasFeesSpentByRelayer);\n    event Released(bytes32 _tradeHash, uint128 totalGasFeesSpentByRelayer);\n    event DisputeResolved(bytes32 _tradeHash, uint128 totalGasFeesSpentByRelayer);\n\n    /***********************\n    +     Constructor      +\n    ***********************/\n\n    constructor(address initialAddress) public {\n        owner = initialAddress;\n        arbitrator = initialAddress;\n        relayer = initialAddress;\n    }\n\n    /***********************\n    +     Open Escrow     +\n    ***********************/\n\n    function createEscrow(\n      bytes16 _tradeID,\n      address _currency,\n      address _seller,\n      address _buyer,\n      uint256 _value,\n      uint16 _fee, // Our fee in 1/10000ths of a token\n      uint8 _v, // Signature value\n      bytes32 _r, // Signature value\n      bytes32 _s // Signature value\n    ) external payable {\n        bytes32 _tradeHash = keccak256(abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee));\n        require(!escrows[_tradeHash].exists, \"Trade already exists\");\n        bytes32 _invitationHash = keccak256(abi.encodePacked(_tradeHash));\n        require(_value > minimumTradeValue, \"Escrow value must be greater than minimum value\"); // Check escrow value is greater than minimum value\n        require(recoverAddress(_invitationHash, _v, _r, _s) == relayer, \"Transaction signature did not come from relayer\");\n\n        Token(_currency).safeTransferFrom(msg.sender, address(this), _value);\n\n        escrows[_tradeHash] = Escrow(true, 0, _currency);\n        emit Created(_tradeHash);\n    }\n\n    function relayEscrow(\n      bytes16 _tradeID,\n      address _currency,\n      address _seller,\n      address _buyer,\n      uint256 _value,\n      uint16 _fee, // Our fee in 1/10000ths of a token\n      uint8 _v, // Signature value for trade invitation by LocalCoinSwap\n      bytes32 _r, // Signature value for trade invitation by LocalCoinSwap\n      bytes32 _s, // Signature value for trade invitation by LocalCoinSwp\n      bytes32 _nonce, // Random nonce used for gasless send\n      uint8 _v_gasless, // Signature value for GasLess send\n      bytes32 _r_gasless, // Signature value for GasLess send\n      bytes32 _s_gasless // Signature value for GasLess send\n    ) external payable {\n        bytes32 _tradeHash = keccak256(abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee));\n        require(!escrows[_tradeHash].exists, \"Trade already exists in escrow mapping\");\n        bytes32 _invitationHash = keccak256(abi.encodePacked(_tradeHash));\n        require(_value > minimumTradeValue, \"Escrow value must be greater than minimum value\"); // Check escrow value is greater than minimum value\n        require(recoverAddress(_invitationHash, _v, _r, _s) == relayer, \"Transaction signature did not come from relayer\");\n\n        // Perform gasless send from seller to contract\n        Token(_currency).transferWithAuthorization(\n            msg.sender,\n            address(this),\n            _value,\n            0,\n            MAX_INT,\n            _nonce,\n            _v_gasless,\n            _r_gasless,\n            _s_gasless\n        );\n\n        escrows[_tradeHash] = Escrow(true, 0, _currency);\n        emit Created(_tradeHash);\n    }\n\n    /***********************\n    +   Complete Escrow    +\n    ***********************/\n\n    function release(\n        bytes16 _tradeID,\n        address payable _seller,\n        address payable _buyer,\n        uint256 _value,\n        uint16 _fee\n    ) external returns (bool){\n        require(msg.sender == _seller, \"Must be seller\");\n        return doRelease(_tradeID, _seller, _buyer, _value, _fee, 0);\n    }\n\n    uint16 constant GAS_doRelease = 3658;\n    function doRelease(\n        bytes16 _tradeID,\n        address payable _seller,\n        address payable _buyer,\n        uint256 _value,\n        uint16 _fee,\n        uint128 _additionalGas\n    ) private returns (bool) {\n        Escrow memory _escrow;\n        bytes32 _tradeHash;\n        (_escrow, _tradeHash) = getEscrowAndHash(_tradeID, _seller, _buyer, _value, _fee);\n        if (!_escrow.exists) return false;\n        uint128 _gasFees = _escrow.totalGasFeesSpentByRelayer + (msg.sender == relayer\n                ? (GAS_doRelease + _additionalGas ) * uint128(tx.gasprice)\n                : 0\n            );\n        delete escrows[_tradeHash];\n        emit Released(_tradeHash, _gasFees);\n        transferMinusFees(_escrow.tokenContract, _buyer, _value, _fee);\n        return true;\n    }\n\n    uint16 constant GAS_doResolveDispute = 14060;\n    function resolveDispute(\n        bytes16 _tradeID,\n        address payable _seller,\n        address payable _buyer,\n        uint256 _value,\n        uint16 _fee,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        uint8 _buyerPercent\n    ) external onlyArbitrator {\n        address _signature = recoverAddress(keccak256(abi.encodePacked(\n            _tradeID,\n            RESOLVE_DISPUTE\n        )), _v, _r, _s);\n        require(_signature == _buyer || _signature == _seller, \"Must be buyer or seller\");\n\n        Escrow memory _escrow;\n        bytes32 _tradeHash;\n        (_escrow, _tradeHash) = getEscrowAndHash(_tradeID, _seller, _buyer, _value, _fee);\n        require(_escrow.exists, \"Escrow does not exist\");\n        require(_buyerPercent <= 100, \"_buyerPercent must be 100 or lower\");\n\n        _escrow.totalGasFeesSpentByRelayer += (GAS_doResolveDispute * uint128(tx.gasprice));\n\n        delete escrows[_tradeHash];\n        emit DisputeResolved(_tradeHash, _escrow.totalGasFeesSpentByRelayer);\n        if (_buyerPercent > 0) {\n          // If dispute goes to buyer take the fee\n          uint256 _totalFees = (_value * _fee / 10000);\n          // Prevent underflow\n          require(_value * _buyerPercent / 100 - _totalFees <= _value, \"Overflow error\");\n          feesAvailableForWithdraw[_escrow.tokenContract] += _totalFees;\n          Token(_escrow.tokenContract).safeTransfer(_buyer, _value * _buyerPercent / 100 - _totalFees);\n        }\n        if (_buyerPercent < 100) {\n          Token(_escrow.tokenContract).safeTransfer(_seller, _value * (100 - _buyerPercent) / 100);\n        }\n    }\n\n    function buyerCancel(\n      bytes16 _tradeID,\n      address payable _seller,\n      address payable _buyer,\n      uint256 _value,\n      uint16 _fee\n    ) external returns (bool) {\n        require(msg.sender == _buyer, \"Must be buyer\");\n        return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee, 0);\n    }\n\n    function increaseGasSpent(bytes32 _tradeHash, uint128 _gas) private {\n        escrows[_tradeHash].totalGasFeesSpentByRelayer += _gas * uint128(tx.gasprice);\n    }\n\n    uint16 constant GAS_doBuyerCancel = 2367;\n    function doBuyerCancel(\n        bytes16 _tradeID,\n        address payable _seller,\n        address payable _buyer,\n        uint256 _value,\n        uint16 _fee,\n        uint128 _additionalGas\n    ) private returns (bool) {\n        Escrow memory _escrow;\n        bytes32 _tradeHash;\n        (_escrow, _tradeHash) = getEscrowAndHash(_tradeID, _seller, _buyer, _value, _fee);\n        require(_escrow.exists, \"Escrow does not exist\");\n        if (!_escrow.exists) {\n            return false;\n        }\n        uint128 _gasFees = _escrow.totalGasFeesSpentByRelayer + (msg.sender == relayer\n                ? (GAS_doBuyerCancel + _additionalGas ) * uint128(tx.gasprice)\n                : 0\n            );\n        delete escrows[_tradeHash];\n        emit CancelledByBuyer(_tradeHash, _gasFees);\n        transferMinusFees(_escrow.tokenContract, _seller, _value, 0);\n        return true;\n    }\n\n    /***********************\n    +        Relays        +\n    ***********************/\n\n    uint16 constant GAS_batchRelayBaseCost = 30000;\n    function batchRelay(\n        bytes16[] memory _tradeID,\n        address payable[] memory _seller,\n        address payable[] memory _buyer,\n        uint256[] memory _value,\n        uint16[] memory _fee,\n        uint128[] memory _maximumGasPrice,\n        uint8[] memory _v,\n        bytes32[] memory _r,\n        bytes32[] memory _s,\n        uint8[] memory _instructionByte\n    ) public returns (bool[] memory) {\n        bool[] memory _results = new bool[](_tradeID.length);\n        uint128 _additionalGas = uint128(msg.sender == relayer ? GAS_batchRelayBaseCost / _tradeID.length : 0);\n        for (uint8 i = 0; i < _tradeID.length; i++) {\n            _results[i] = relay(\n                _tradeID[i],\n                _seller[i],\n                _buyer[i],\n                _value[i],\n                _fee[i],\n                _maximumGasPrice[i],\n                _v[i],\n                _r[i],\n                _s[i],\n                _instructionByte[i],\n                _additionalGas\n            );\n        }\n        return _results;\n    }\n\n    function relay(\n        bytes16 _tradeID,\n        address payable _seller,\n        address payable _buyer,\n        uint256 _value,\n        uint16 _fee,\n        uint128 _maximumGasPrice,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s,\n        uint8 _instructionByte,\n        uint128 _additionalGas\n    ) public returns (bool) {\n        address _relayedSender = getRelayedSender(\n            _tradeID,\n            _instructionByte,\n            _maximumGasPrice,\n            _v,\n            _r,\n            _s\n        );\n        if (_relayedSender == _buyer) {\n            if (_instructionByte == BUYER_CANCELS) {\n                return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee, _additionalGas);\n            }\n        } else if (_relayedSender == _seller) {\n            if (_instructionByte == RELEASE_ESCROW) {\n                return doRelease(_tradeID, _seller, _buyer, _value, _fee, _additionalGas);\n            }\n        } else {\n            require(msg.sender == _seller, \"Unrecognised party\");\n            return false;\n        }\n    }\n\n    /***********************\n    +      Management      +\n    ***********************/\n\n    function setArbitrator(address _newArbitrator) external onlyOwner {\n        arbitrator = _newArbitrator;\n    }\n\n    function setOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n    }\n\n    function setRelayer(address _newRelayer) external onlyOwner {\n        relayer = _newRelayer;\n    }\n\n    function setMinimumValue(uint16 _newMinimumValue) external onlyOwner {\n        minimumTradeValue = _newMinimumValue;\n    }\n\n    /***********************\n    +   Helper Functions   +\n    ***********************/\n\n    function transferMinusFees(\n        address _currency,\n        address payable _to,\n        uint256 _value,\n        uint16 _fee\n    ) private {\n        uint256 _totalFees = (_value * _fee / 10000);\n        // Prevent underflow\n        if(_value - _totalFees > _value) {\n            return;\n        }\n        // Add fees to the pot for localcoinswap to withdraw\n        feesAvailableForWithdraw[_currency] += _totalFees;\n        Token(_currency).safeTransfer(_to, _value - _totalFees);\n    }\n\n    function withdrawFees(address payable _to, address _currency, uint256 _amount) external onlyOwner {\n        // This check also prevents underflow\n        require(_amount <= feesAvailableForWithdraw[_currency], \"Amount is higher than amount available\");\n        feesAvailableForWithdraw[_currency] -= _amount;\n        Token(_currency).safeTransfer(_to, _amount);\n    }\n\n    function getEscrowAndHash(\n      bytes16 _tradeID,\n      address _seller,\n      address _buyer,\n      uint256 _value,\n      uint16 _fee\n    ) private view returns (Escrow storage, bytes32) {\n        bytes32 _tradeHash = keccak256(abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee));\n        return (escrows[_tradeHash], _tradeHash);\n    }\n\n    function recoverAddress(\n        bytes32 _h,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) private pure returns (address) {\n        bytes memory _prefix = \"\\x19Ethereum Signed Message:\\n32\";\n        bytes32 _prefixedHash = keccak256(abi.encodePacked(_prefix, _h));\n        return ecrecover(_prefixedHash, _v, _r, _s);\n    }\n\n    function getRelayedSender(\n      bytes16 _tradeID,\n      uint8 _instructionByte,\n      uint128 _maximumGasPrice,\n      uint8 _v,\n      bytes32 _r,\n      bytes32 _s\n    ) private view returns (address) {\n        bytes32 _hash = keccak256(abi.encodePacked(_tradeID, _instructionByte, _maximumGasPrice));\n        require(tx.gasprice < _maximumGasPrice, \"Gas price is higher than maximum gas price\");\n        return recoverAddress(_hash, _v, _r, _s);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the current owner can change the owner\");\n        _;\n    }\n\n    modifier onlyArbitrator() {\n        require(msg.sender == arbitrator, \"Only the current owner can change the arbitrator\");\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}
