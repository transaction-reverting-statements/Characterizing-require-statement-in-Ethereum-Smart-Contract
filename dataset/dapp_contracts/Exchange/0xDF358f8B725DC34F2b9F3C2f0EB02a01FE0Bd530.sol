{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/ArchbishopV2.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./libraries/SafeMath96.sol\";\nimport \"./libraries/SafeMath32.sol\";\n\n// Archbishop will crown the King and he is a fair guy...\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once $KING is sufficiently\n// distributed and the community can show to govern itself.\ncontract ArchbishopV2 is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeMath96 for uint96;\n    using SafeMath32 for uint32;\n\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 wAmount; // Weighted amount = lptAmount + (stAmount * pool.sTokenWeight)\n        uint256 stAmount; // How many S tokens the user has provided\n        uint256 lptAmount; // How many LP tokens the user has provided\n        uint96 pendingKing; // $KING tokens pending to be given to user\n        uint96 rewardDebt; // Reward debt (see explanation below)\n        uint32 lastWithdrawBlock; // User last withdraw time\n\n        // We do some fancy math here. Basically, any point in time, the amount of $KINGs\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.wAmount * pool.accKingPerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accKingPerShare` (and `lastRewardBlock`) gets updated\n        //   2. User receives the pending reward sent to his/her address\n        //   3. User's `wAmount` gets updated\n        //   4. User's `rewardDebt` gets updated\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract\n        uint32 allocPoint; // Allocation points assigned to this pool (for $KINGs distribution)\n        uint32 lastRewardBlock; // Last block number that $KINGs distribution occurs\n        uint32 sTokenWeight; // \"Weight\" of LP token in SToken, times 1e8\n        IERC20 sToken; // Address of S token contract\n        bool kingLock; // if true, withdraw interval, or withdraw fees otherwise, applied on $KING withdrawals\n        uint256 accKingPerShare; // Accumulated $KINGs per share, times 1e12 (see above)\n    }\n\n    // The $KING token contract\n    address public king;\n\n    // The kingServant contract (that receives LP token fees)\n    address public kingServant;\n    // fees on LP token withdrawals, in percents\n    uint8 public lpFeePct = 0;\n\n    // The courtJester address (that receives $KING fees)\n    address public courtJester;\n    // fees on $KING withdrawals, in percents (charged if `pool.kingLock` is `false`)\n    uint8 public kingFeePct = 0;\n    // Withdraw interval, in blocks, takes effect if pool.kingLock is `true`\n    uint32 public withdrawInterval;\n\n    // $KING token amount distributed every block of LP token farming\n    uint96 public kingPerLptFarmingBlock;\n    // $KING token amount distributed every block of S token farming\n    uint96 public kingPerStFarmingBlock;\n    // The sum of allocation points in all pools\n    uint32 public totalAllocPoint;\n\n    // The block when yield and trade farming starts\n    uint32 public startBlock;\n    // Block when LP token farming ends\n    uint32 public lptFarmingEndBlock;\n    // Block when S token farming ends\n    uint32 public stFarmingEndBlock;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes tokens\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    event Deposit(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 lptAmount,\n        uint256 stAmount\n    );\n    event Withdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 lptAmount\n    );\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 lptAmount\n    );\n\n    constructor(\n        address _king,\n        address _kingServant,\n        address _courtJester,\n        uint256 _startBlock,\n        uint256 _withdrawInterval\n    ) public {\n        king = _nonZeroAddr(_king);\n        kingServant = _nonZeroAddr(_kingServant);\n        courtJester = _nonZeroAddr(_courtJester);\n        startBlock = SafeMath32.fromUint(_startBlock);\n        withdrawInterval = SafeMath32.fromUint(_withdrawInterval);\n    }\n\n    function setFarmingParams(\n        uint256 _kingPerLptFarmingBlock,\n        uint256 _kingPerStFarmingBlock,\n        uint256 _lptFarmingEndBlock,\n        uint256 _stFarmingEndBlock\n    ) external onlyOwner {\n        _setFarmingParams(\n            SafeMath96.fromUint(_kingPerLptFarmingBlock),\n            SafeMath96.fromUint(_kingPerStFarmingBlock),\n            SafeMath32.fromUint(_lptFarmingEndBlock),\n            SafeMath32.fromUint(_stFarmingEndBlock)\n        );\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new LP pool. Owner only may call.\n    function add(\n        uint256 allocPoint,\n        uint256 sTokenWeight,\n        IERC20 lpToken,\n        IERC20 sToken,\n        bool withUpdate\n    ) public onlyOwner {\n        require(_isMissingPool(lpToken, sToken), \"ArchV2::add:POOL_EXISTS\");\n        uint32 _allocPoint = SafeMath32.fromUint(allocPoint);\n\n        if (withUpdate) massUpdatePools();\n\n        uint32 curBlock = curBlock();\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: lpToken,\n                sToken: sToken,\n                allocPoint: SafeMath32.fromUint(_allocPoint),\n                sTokenWeight: SafeMath32.fromUint(sTokenWeight),\n                lastRewardBlock: curBlock > startBlock ? curBlock : startBlock,\n                accKingPerShare: 0,\n                kingLock: true\n            })\n        );\n    }\n\n    // Update the given pool's $KING allocation point. Owner only may call.\n    function setAllocation(\n        uint256 pid,\n        uint256 allocPoint,\n        bool withUpdate\n    ) public onlyOwner {\n        _validatePid(pid);\n        if (withUpdate) massUpdatePools();\n\n        uint32 _allocPoint = SafeMath32.fromUint(allocPoint);\n\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[pid].allocPoint).add(\n            _allocPoint\n        );\n        poolInfo[pid].allocPoint = _allocPoint;\n    }\n\n    function setSTokenWeight(\n        uint256 pid,\n        uint256 sTokenWeight,\n        bool withUpdate\n    ) public onlyOwner {\n        _validatePid(pid);\n        if (withUpdate) massUpdatePools();\n\n        poolInfo[pid].sTokenWeight = SafeMath32.fromUint(sTokenWeight);\n    }\n\n    function setKingLock(\n        uint256 pid,\n        bool _kingLock,\n        bool withUpdate\n    ) public onlyOwner {\n        _validatePid(pid);\n        if (withUpdate) massUpdatePools();\n\n        poolInfo[pid].kingLock = _kingLock;\n    }\n\n    // Return reward multipliers for LP and S tokens over the given _from to _to block.\n    function getMultiplier(uint256 from, uint256 to)\n        public\n        view\n        returns (uint256 lpt, uint256 st)\n    {\n        (uint32 _lpt, uint32 _st) = _getMultiplier(\n            SafeMath32.fromUint(from),\n            SafeMath32.fromUint(to)\n        );\n        lpt = uint256(_lpt);\n        st = uint256(_st);\n    }\n\n    function getKingPerBlock(uint256 blockNum) public view returns (uint256) {\n        return\n            (blockNum > stFarmingEndBlock ? 0 : kingPerStFarmingBlock).add(\n                blockNum > lptFarmingEndBlock ? 0 : kingPerLptFarmingBlock\n            );\n    }\n\n    // View function to see pending $KINGs on frontend.\n    function pendingKing(uint256 pid, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        _validatePid(pid);\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][_user];\n\n        uint256 kingPerShare = pool.accKingPerShare;\n\n        uint32 curBlock = curBlock();\n        uint256 lptSupply = pool.lpToken.balanceOf(address(this));\n\n        if (curBlock > pool.lastRewardBlock && lptSupply != 0) {\n            (uint32 lptFactor, uint32 stFactor) = _getMultiplier(\n                pool.lastRewardBlock,\n                curBlock\n            );\n            uint96 kingReward = _kingReward(\n                lptFactor,\n                stFactor,\n                pool.allocPoint\n            );\n            if (kingReward != 0) {\n                uint256 stSupply = pool.sToken.balanceOf(address(this));\n                uint256 wSupply = _weighted(\n                    lptSupply,\n                    stSupply,\n                    pool.sTokenWeight\n                );\n                kingPerShare = _accShare(kingPerShare, kingReward, wSupply);\n            }\n        }\n\n        return\n            _accPending(\n                user.pendingKing,\n                user.wAmount,\n                user.rewardDebt,\n                kingPerShare\n            );\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            _updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool\n    function updatePool(uint256 pid) public {\n        _validatePid(pid);\n        _updatePool(pid);\n    }\n\n    // Deposit lptAmount of LP token and stAmount of S token to mine $KING,\n    // (it sends to msg.sender $KINGs pending by then)\n    function deposit(\n        uint256 pid,\n        uint256 lptAmount,\n        uint256 stAmount\n    ) public nonReentrant {\n        require(lptAmount != 0, \"deposit: zero LP token amount\");\n        _validatePid(pid);\n\n        _updatePool(pid);\n\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        uint256 oldStAmount = user.stAmount;\n        uint96 pendingKingAmount = _accPending(\n            user.pendingKing,\n            user.wAmount,\n            user.rewardDebt,\n            pool.accKingPerShare\n        );\n        user.lptAmount = user.lptAmount.add(lptAmount);\n        user.stAmount = user.stAmount.add(stAmount);\n        user.wAmount = _accWeighted(\n            user.wAmount,\n            lptAmount,\n            stAmount,\n            pool.sTokenWeight\n        );\n\n        uint32 curBlock = curBlock();\n        if (\n            _sendKingToken(\n                msg.sender,\n                pendingKingAmount,\n                pool.kingLock,\n                curBlock.sub(user.lastWithdrawBlock)\n            )\n        ) {\n            user.lastWithdrawBlock = curBlock;\n            user.pendingKing = 0;\n            pool.sToken.safeTransfer(address(1), oldStAmount);\n        } else {\n            user.pendingKing = pendingKingAmount;\n        }\n        user.rewardDebt = _pending(user.wAmount, 0, pool.accKingPerShare);\n\n        pool.lpToken.safeTransferFrom(msg.sender, address(this), lptAmount);\n        if (stAmount != 0)\n            pool.sToken.safeTransferFrom(msg.sender, address(this), stAmount);\n\n        emit Deposit(msg.sender, pid, lptAmount, stAmount);\n    }\n\n    // Withdraw lptAmount of LP token and all pending $KING tokens\n    // (it burns all S tokens)\n    function withdraw(uint256 pid, uint256 lptAmount) public nonReentrant {\n        _validatePid(pid);\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        uint256 preLptAmount = user.wAmount;\n        require(preLptAmount >= lptAmount, \"withdraw: LP amount not enough\");\n\n        user.lptAmount = preLptAmount.sub(lptAmount);\n        uint256 stAmount = user.stAmount;\n\n        _updatePool(pid);\n        uint96 pendingKingAmount = _accPending(\n            user.pendingKing,\n            user.wAmount,\n            user.rewardDebt,\n            pool.accKingPerShare\n        );\n        user.wAmount = user.lptAmount;\n        user.rewardDebt = _pending(user.wAmount, 0, pool.accKingPerShare);\n        user.stAmount = 0;\n        uint32 curBlock = curBlock();\n\n        if (\n            _sendKingToken(\n                msg.sender,\n                pendingKingAmount,\n                pool.kingLock,\n                curBlock.sub(user.lastWithdrawBlock)\n            )\n        ) {\n            user.lastWithdrawBlock = curBlock;\n            user.pendingKing = 0;\n        } else {\n            user.pendingKing = pendingKingAmount;\n        }\n\n        uint256 sentLptAmount = lptAmount == 0\n            ? 0\n            : _sendLptAndBurnSt(msg.sender, pool, lptAmount, stAmount);\n        emit Withdraw(msg.sender, pid, sentLptAmount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    // (it clears all pending $KINGs and burns all S tokens)\n    function emergencyWithdraw(uint256 pid) public {\n        _validatePid(pid);\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        uint256 lptAmount = user.lptAmount;\n        user.lptAmount = 0; // serves as \"non-reentrant\"\n        require(lptAmount > 0, \"withdraw: zero LP token amount\");\n\n        uint32 curBlock = curBlock();\n        uint256 stAmount = user.stAmount;\n        user.wAmount = 0;\n        user.stAmount = 0;\n        user.rewardDebt = 0;\n        user.pendingKing = 0;\n        user.lastWithdrawBlock = curBlock;\n\n        uint256 sentLptAmount = _sendLptAndBurnSt(\n            msg.sender,\n            pool,\n            lptAmount,\n            stAmount\n        );\n        emit EmergencyWithdraw(msg.sender, pid, sentLptAmount);\n    }\n\n    function setKingServant(address _kingServant) public onlyOwner {\n        kingServant = _nonZeroAddr(_kingServant);\n    }\n\n    function setCourtJester(address _courtJester) public onlyOwner {\n        courtJester = _nonZeroAddr(_courtJester);\n    }\n\n    function setKingFeePct(uint256 newPercent) public onlyOwner {\n        kingFeePct = _validPercent(newPercent);\n    }\n\n    function setLpFeePct(uint256 newPercent) public onlyOwner {\n        lpFeePct = _validPercent(newPercent);\n    }\n\n    function setWithdrawInterval(uint256 _blockNum) public onlyOwner {\n        withdrawInterval = SafeMath32.fromUint(_blockNum);\n    }\n\n    function _updatePool(uint256 pid) internal {\n        PoolInfo storage pool = poolInfo[pid];\n        uint32 lastUpdateBlock = pool.lastRewardBlock;\n\n        uint32 curBlock = curBlock();\n        if (curBlock <= lastUpdateBlock) return;\n        pool.lastRewardBlock = curBlock;\n\n        (uint32 lptFactor, uint32 stFactor) = _getMultiplier(\n            lastUpdateBlock,\n            curBlock\n        );\n        if (lptFactor == 0 && stFactor == 0) return;\n\n        uint256 lptSupply = pool.lpToken.balanceOf(address(this));\n        if (lptSupply == 0) return;\n\n        uint256 stSupply = pool.sToken.balanceOf(address(this));\n        uint256 wSupply = _weighted(lptSupply, stSupply, pool.sTokenWeight);\n\n        uint96 kingReward = _kingReward(lptFactor, stFactor, pool.allocPoint);\n        pool.accKingPerShare = _accShare(\n            pool.accKingPerShare,\n            kingReward,\n            wSupply\n        );\n    }\n\n    function _sendKingToken(\n        address user,\n        uint96 amount,\n        bool kingLock,\n        uint32 blocksSinceLastWithdraw\n    ) internal returns (bool isSent) {\n        isSent = true;\n        if (amount == 0) return isSent;\n\n        uint256 feeAmount = 0;\n        uint256 userAmount = 0;\n\n        if (!kingLock) {\n            userAmount = amount;\n            if (kingFeePct != 0) {\n                feeAmount = uint256(amount).mul(kingFeePct).div(100);\n                userAmount = userAmount.sub(feeAmount);\n\n                IERC20(king).safeTransfer(courtJester, feeAmount);\n            }\n        } else if (blocksSinceLastWithdraw > withdrawInterval) {\n            userAmount = amount;\n        } else {\n            return isSent = false;\n        }\n\n        uint256 balance = IERC20(king).balanceOf(address(this));\n        IERC20(king).safeTransfer(\n            user,\n            // if balance lacks some tiny $KING amount due to imprecise rounding\n            userAmount > balance ? balance : userAmount\n        );\n    }\n\n    function _sendLptAndBurnSt(\n        address user,\n        PoolInfo storage pool,\n        uint256 lptAmount,\n        uint256 stAmount\n    ) internal returns (uint256) {\n        uint256 userLptAmount = lptAmount;\n\n        if (curBlock() < stFarmingEndBlock && lpFeePct != 0) {\n            uint256 lptFee = lptAmount.mul(lpFeePct).div(100);\n            userLptAmount = userLptAmount.sub(lptFee);\n\n            pool.lpToken.safeTransfer(kingServant, lptFee);\n        }\n\n        if (userLptAmount != 0) pool.lpToken.safeTransfer(user, userLptAmount);\n        if (stAmount != 0) pool.sToken.safeTransfer(address(1), stAmount);\n\n        return userLptAmount;\n    }\n\n    function _safeKingTransfer(address _to, uint256 _amount) internal {\n        uint256 kingBal = IERC20(king).balanceOf(address(this));\n        // if pool lacks some tiny $KING amount due to imprecise rounding\n        IERC20(king).safeTransfer(_to, _amount > kingBal ? kingBal : _amount);\n    }\n\n    function _setFarmingParams(\n        uint96 _kingPerLptFarmingBlock,\n        uint96 _kingPerStFarmingBlock,\n        uint32 _lptFarmingEndBlock,\n        uint32 _stFarmingEndBlock\n    ) internal {\n        require(\n            _lptFarmingEndBlock >= lptFarmingEndBlock,\n            \"ArchV2::lptFarmingEndBlock\"\n        );\n        require(\n            _stFarmingEndBlock >= stFarmingEndBlock,\n            \"ArchV2::stFarmingEndBlock\"\n        );\n\n        if (lptFarmingEndBlock != _lptFarmingEndBlock)\n            lptFarmingEndBlock = _lptFarmingEndBlock;\n        if (stFarmingEndBlock != _stFarmingEndBlock)\n            stFarmingEndBlock = _stFarmingEndBlock;\n\n        (uint32 lptFactor, uint32 stFactor) = _getMultiplier(\n            curBlock(),\n            2**32 - 1\n        );\n        uint256 minBalance = (\n            uint256(_kingPerLptFarmingBlock).mul(uint256(stFactor))\n        )\n            .add(uint256(_kingPerStFarmingBlock).mul(uint256(lptFactor)));\n        require(\n            IERC20(king).balanceOf(address(this)) >= minBalance,\n            \"ArchV2::LOW_$KING_BALANCE\"\n        );\n\n        kingPerLptFarmingBlock = _kingPerLptFarmingBlock;\n        kingPerStFarmingBlock = _kingPerStFarmingBlock;\n    }\n\n    // Revert if the LP token has been already added.\n    function _isMissingPool(IERC20 lpToken, IERC20 sToken)\n        internal\n        view\n        returns (bool)\n    {\n        _revertZeroAddress(address(lpToken));\n        _revertZeroAddress(address(lpToken));\n        for (uint256 i = 0; i < poolInfo.length; i++) {\n            if (\n                poolInfo[i].lpToken == lpToken || poolInfo[i].sToken == sToken\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function _getMultiplier(uint32 _from, uint32 _to)\n        internal\n        view\n        returns (uint32 lpt, uint32 st)\n    {\n        uint32 start = _from > startBlock ? _from : startBlock;\n\n        // LP token farming multiplier\n        uint32 end = _to > lptFarmingEndBlock ? lptFarmingEndBlock : _to;\n        lpt = _from < lptFarmingEndBlock ? end.sub(start) : 0;\n\n        // S token farming multiplier\n        end = _to > stFarmingEndBlock ? stFarmingEndBlock : _to;\n        st = _from < stFarmingEndBlock ? end.sub(start) : 0;\n    }\n\n    function _accPending(\n        uint96 prevPending,\n        uint256 amount,\n        uint96 rewardDebt,\n        uint256 accPerShare\n    ) internal pure returns (uint96) {\n        return\n            amount == 0\n                ? prevPending\n                : prevPending.add(_pending(amount, rewardDebt, accPerShare));\n    }\n\n    function _pending(\n        uint256 amount,\n        uint96 rewardDebt,\n        uint256 accPerShare\n    ) internal pure returns (uint96) {\n        return\n            amount == 0\n                ? 0\n                : SafeMath96.fromUint(\n                    amount.mul(accPerShare).div(1e12).sub(uint256(rewardDebt)),\n                    \"ArchV2::pending:overflow\"\n                );\n    }\n\n    function _kingReward(\n        uint32 lptFactor,\n        uint32 stFactor,\n        uint32 allocPoint\n    ) internal view returns (uint96) {\n        uint32 _totalAllocPoint = totalAllocPoint;\n        uint96 lptReward = _reward(\n            lptFactor,\n            kingPerLptFarmingBlock,\n            allocPoint,\n            _totalAllocPoint\n        );\n        if (stFactor == 0) return lptReward;\n\n        uint96 stReward = _reward(\n            stFactor,\n            kingPerStFarmingBlock,\n            allocPoint,\n            _totalAllocPoint\n        );\n        return lptReward.add(stReward);\n    }\n\n    function _reward(\n        uint32 factor,\n        uint96 rewardPerBlock,\n        uint32 allocPoint,\n        uint32 _totalAllocPoint\n    ) internal pure returns (uint96) {\n        return\n            SafeMath96.fromUint(\n                uint256(factor)\n                    .mul(uint256(rewardPerBlock))\n                    .mul(uint256(allocPoint))\n                    .div(uint256(_totalAllocPoint))\n            );\n    }\n\n    function _accShare(\n        uint256 prevShare,\n        uint96 reward,\n        uint256 supply\n    ) internal pure returns (uint256) {\n        return prevShare.add(uint256(reward).mul(1e12).div(supply));\n    }\n\n    function _accWeighted(\n        uint256 prevAmount,\n        uint256 lptAmount,\n        uint256 stAmount,\n        uint32 sTokenWeight\n    ) internal pure returns (uint256) {\n        return prevAmount.add(_weighted(lptAmount, stAmount, sTokenWeight));\n    }\n\n    function _weighted(\n        uint256 lptAmount,\n        uint256 stAmount,\n        uint32 sTokenWeight\n    ) internal pure returns (uint256) {\n        if (stAmount == 0 || sTokenWeight == 0) {\n            return lptAmount;\n        }\n        return lptAmount.add(stAmount.mul(sTokenWeight).div(1e8));\n    }\n\n    function _nonZeroAddr(address _address) private pure returns (address) {\n        _revertZeroAddress(_address);\n        return _address;\n    }\n\n    function curBlock() private view returns (uint32) {\n        return SafeMath32.fromUint(block.number);\n    }\n\n    function _validPercent(uint256 percent) private pure returns (uint8) {\n        require(percent <= 100, \"ArchV2::INVALID_PERCENT\");\n        return uint8(percent);\n    }\n\n    function _revertZeroAddress(address _address) internal pure {\n        require(_address != address(0), \"ArchV2::ZERO_ADDRESS\");\n    }\n\n    function _validatePid(uint256 pid) private view returns (uint256) {\n        require(pid < poolInfo.length, \"ArchV2::INVALID_POOL_ID\");\n        return pid;\n    }\n}\n"
    },
    "contracts/libraries/SafeMath32.sol": {
      "content": "pragma solidity 0.6.12;\n\nlibrary SafeMath32 {\n\n    function add(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\n        uint32 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function add(uint32 a, uint32 b) internal pure returns (uint32) {\n        return add(a, b, \"SafeMath32: addition overflow\");\n    }\n\n    function sub(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function sub(uint32 a, uint32 b) internal pure returns (uint32) {\n        return sub(a, b, \"SafeMath32: subtraction overflow\");\n    }\n\n    function fromUint(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function fromUint(uint n) internal pure returns (uint32) {\n        return fromUint(n, \"SafeMath32: exceeds 32 bits\");\n    }\n}\n"
    },
    "contracts/libraries/SafeMath96.sol": {
      "content": "pragma solidity 0.6.12;\n\nlibrary SafeMath96 {\n\n    function add(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function add(uint96 a, uint96 b) internal pure returns (uint96) {\n        return add(a, b, \"SafeMath96: addition overflow\");\n    }\n\n    function sub(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function sub(uint96 a, uint96 b) internal pure returns (uint96) {\n        return sub(a, b, \"SafeMath96: subtraction overflow\");\n    }\n\n    function fromUint(uint n, string memory errorMessage) internal pure returns (uint96) {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function fromUint(uint n) internal pure returns (uint96) {\n        return fromUint(n, \"SafeMath96: exceeds 96 bits\");\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {
      "": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}
