{{
  "language": "Solidity",
  "sources": {
    "/Users/kroll/Dev/LinkDeployment3/contracts/LinkswapRouter.sol": {
      "content": "pragma solidity 0.6.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/ILinkswapFactory.sol\";\nimport \"./interfaces/ILinkswapPair.sol\";\nimport \"./interfaces/ILinkswapRouter.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/LinkswapLibrary.sol\";\nimport \"./libraries/SafeMathLinkswap.sol\";\nimport \"./libraries/TransferHelper.sol\";\n\ncontract LinkswapRouter is ILinkswapRouter {\n    using SafeMathLinkswap for uint256;\n\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"LinkswapRouter: EXPIRED\");\n        _;\n    }\n\n    constructor(address _factory, address _WETH) public {\n        factory = _factory;\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    // **** CREATE PAIR ****\n    // ETH amount must cover listing fee (if listingFeeToken==ETH) and lockupTokenAmount (if lockupToken==ETH)\n    // approvals (for WETH, newToken, lockupToken) must be done beforehand\n    function createPairUsingETH(\n        address newToken,\n        uint256 newTokenAmount,\n        address lockupToken,\n        uint256 lockupTokenAmount,\n        uint256 lockupPeriod,\n        address listingFeeToken\n    ) external payable virtual override returns (address pair) {\n        IWETH(WETH).deposit{value: msg.value}();\n        IERC20(WETH).approve(factory, msg.value);\n\n        pair = ILinkswapFactory(factory).createPair(\n            newToken,\n            newTokenAmount,\n            lockupToken,\n            lockupTokenAmount,\n            lockupPeriod,\n            listingFeeToken\n        );\n\n        // refund dust eth, if any\n        TransferHelper.safeTransfer(WETH, msg.sender, IERC20(WETH).balanceOf(address(this)));\n    }\n\n    // **** ADD LIQUIDITY ****\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin\n    ) internal view virtual returns (uint256 amountA, uint256 amountB) {\n        require(ILinkswapFactory(factory).getPair(tokenA, tokenB) != address(0), \"LinkswapRouter: PAIR_NOT_CREATED\");\n        (uint256 reserveA, uint256 reserveB) = LinkswapLibrary.getReserves(factory, tokenA, tokenB);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint256 amountBOptimal = LinkswapLibrary.quote(amountADesired, reserveA, reserveB);\n            if (amountBOptimal <= amountBDesired) {\n                require(amountBOptimal >= amountBMin, \"LinkswapRouter: INSUFFICIENT_B_AMOUNT\");\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint256 amountAOptimal = LinkswapLibrary.quote(amountBDesired, reserveB, reserveA);\n                assert(amountAOptimal <= amountADesired);\n                require(amountAOptimal >= amountAMin, \"LinkswapRouter: INSUFFICIENT_A_AMOUNT\");\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        virtual\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\n        address pair = LinkswapLibrary.pairFor(factory, tokenA, tokenB);\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = ILinkswapPair(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        virtual\n        override\n        ensure(deadline)\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        )\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            WETH,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = LinkswapLibrary.pairFor(factory, token, WETH);\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n        liquidity = ILinkswapPair(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountA, uint256 amountB) {\n        address pair = LinkswapLibrary.pairFor(factory, tokenA, tokenB);\n        IERC20(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\n        (uint256 amount0, uint256 amount1) = ILinkswapPair(pair).burn(to);\n        (address token0, ) = LinkswapLibrary.sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\n        require(amountA >= amountAMin, \"LinkswapRouter: INSUFFICIENT_A_AMOUNT\");\n        require(amountB >= amountBMin, \"LinkswapRouter: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountToken, uint256 amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            WETH,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        TransferHelper.safeTransfer(token, to, amountToken);\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountA, uint256 amountB) {\n        address pair = LinkswapLibrary.pairFor(factory, tokenA, tokenB);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        ILinkswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountToken, uint256 amountETH) {\n        address pair = LinkswapLibrary.pairFor(factory, token, WETH);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        ILinkswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\n    }\n\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) public virtual override ensure(deadline) returns (uint256 amountETH) {\n        (, amountETH) = removeLiquidity(token, WETH, liquidity, amountTokenMin, amountETHMin, address(this), deadline);\n        TransferHelper.safeTransfer(token, to, IERC20(token).balanceOf(address(this)));\n        IWETH(WETH).withdraw(amountETH);\n        TransferHelper.safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (uint256 amountETH) {\n        address pair = LinkswapLibrary.pairFor(factory, token, WETH);\n        uint256 value = approveMax ? uint256(-1) : liquidity;\n        ILinkswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\n            token,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory path,\n        address _to\n    ) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = LinkswapLibrary.sortTokens(input, output);\n            uint256 amountOut = amounts[i + 1];\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOut)\n                : (amountOut, uint256(0));\n            address to = i < path.length - 2 ? LinkswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            ILinkswapPair(LinkswapLibrary.pairFor(factory, input, output)).swap(\n                amount0Out,\n                amount1Out,\n                to,\n                new bytes(0)\n            );\n        }\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = LinkswapLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        amounts = LinkswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"LinkswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        amounts = LinkswapLibrary.getAmountsOut(factory, msg.value, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(LinkswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n    }\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        amounts = LinkswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= amountInMax, \"LinkswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[path.length - 1] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        amounts = LinkswapLibrary.getAmountsOut(factory, amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amounts[0]\n        );\n        _swap(amounts, path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) returns (uint256[] memory amounts) {\n        require(path[0] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        amounts = LinkswapLibrary.getAmountsIn(factory, amountOut, path);\n        require(amounts[0] <= msg.value, \"LinkswapRouter: EXCESSIVE_INPUT_AMOUNT\");\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(LinkswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n        _swap(amounts, path, to);\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // **** SWAP (supporting fee-on-transfer tokens) ****\n    // requires the initial amount to have already been sent to the first pair\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\n        for (uint256 i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0, ) = LinkswapLibrary.sortTokens(input, output);\n            ILinkswapPair pair = ILinkswapPair(LinkswapLibrary.pairFor(factory, input, output));\n            uint256 amountInput;\n            uint256 amountOutput;\n            {\n                // scope to avoid stack too deep errors\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\n                    ? (reserve0, reserve1)\n                    : (reserve1, reserve0);\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\n                amountOutput = LinkswapLibrary.getAmountOut(\n                    amountInput,\n                    reserveInput,\n                    reserveOutput,\n                    pair.tradingFeePercent()\n                );\n            }\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\n                ? (uint256(0), amountOutput)\n                : (amountOutput, uint256(0));\n            address to = i < path.length - 2 ? LinkswapLibrary.pairFor(factory, output, path[i + 2]) : _to;\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) {\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amountIn\n        );\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable virtual override ensure(deadline) {\n        require(path[0] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        uint256 amountIn = msg.value;\n        IWETH(WETH).deposit{value: amountIn}();\n        assert(IWETH(WETH).transfer(LinkswapLibrary.pairFor(factory, path[0], path[1]), amountIn));\n        uint256 balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\n        _swapSupportingFeeOnTransferTokens(path, to);\n        require(\n            IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\n            \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n    }\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external virtual override ensure(deadline) {\n        require(path[path.length - 1] == WETH, \"LinkswapRouter: INVALID_PATH\");\n        TransferHelper.safeTransferFrom(\n            path[0],\n            msg.sender,\n            LinkswapLibrary.pairFor(factory, path[0], path[1]),\n            amountIn\n        );\n        _swapSupportingFeeOnTransferTokens(path, address(this));\n        uint256 amountOut = IERC20(WETH).balanceOf(address(this));\n        require(amountOut >= amountOutMin, \"LinkswapRouter: INSUFFICIENT_OUTPUT_AMOUNT\");\n        IWETH(WETH).withdraw(amountOut);\n        TransferHelper.safeTransferETH(to, amountOut);\n    }\n\n    // **** LIBRARY FUNCTIONS ****\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) public pure virtual override returns (uint256 amountB) {\n        return LinkswapLibrary.quote(amountA, reserveA, reserveB);\n    }\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) public pure virtual override returns (uint256 amountOut) {\n        return LinkswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut, tradingFeePercent);\n    }\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) public pure virtual override returns (uint256 amountIn) {\n        return LinkswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut, tradingFeePercent);\n    }\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return LinkswapLibrary.getAmountsOut(factory, amountIn, path);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory amounts)\n    {\n        return LinkswapLibrary.getAmountsIn(factory, amountOut, path);\n    }\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/interfaces/ILinkswapERC20.sol": {
      "content": "pragma solidity 0.6.6;\n\ninterface ILinkswapERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/interfaces/ILinkswapFactory.sol": {
      "content": "pragma solidity 0.6.6;\n\ninterface ILinkswapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 pairNum);\n\n    function LINK() external view returns (address);\n\n    function WETH() external view returns (address);\n\n    function YFL() external view returns (address);\n\n    function governance() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function priceOracle() external view returns (address);\n\n    // USD amounts should be 8 dp precision\n    // frontend should approve transfer of higher amount (e.g. 1.1x) due to price fluctuations\n    function linkListingFeeInUsd() external view returns (uint256);\n\n    function wethListingFeeInUsd() external view returns (uint256);\n\n    function yflListingFeeInUsd() external view returns (uint256);\n\n    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n    // the rest goes to governance\n    function treasuryListingFeeShare() external view returns (uint256);\n\n    function minListingLockupAmountInUsd() external view returns (uint256);\n\n    // if lockup amount is set to this or more, the lockup amount proportion of listing fee discount is fully unlocked\n    // if less than this amount, then lockup amount proportion of listing fee discount is linearly interpolated from the distance between min and target lockup amounts e.g. 60% towards target from min means 60% of lockup amount discount\n    function targetListingLockupAmountInUsd() external view returns (uint256);\n\n    // in seconds since unix epoch\n    // min lockup period for the listing lockup amount\n    function minListingLockupPeriod() external view returns (uint256);\n\n    // in seconds since unix epoch\n    // if lockup period is set to this or longer, the lockup time proportion of listing fee discount is fully unlocked\n    // if less than this period, then lockup time proportion of listing fee discount is linearly interpolated from the distance between min and target lockup times e.g. 60% towards target from min means 60% of lockup time discount\n    function targetListingLockupPeriod() external view returns (uint256);\n\n    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n    // rest of listing fee discount is determined by lockup period\n    function lockupAmountListingFeeDiscountShare() external view returns (uint256);\n\n    // need to divide fee percents by 1,000,000 e.g. 3000 is 0.3000%\n    function defaultLinkTradingFeePercent() external view returns (uint256);\n\n    function defaultNonLinkTradingFeePercent() external view returns (uint256);\n\n    // need to divide share by 1,000,000 e.g. 100,000 is 10%\n    // the rest goes to governance\n    function treasuryProtocolFeeShare() external view returns (uint256);\n\n    // inverse of protocol fee fraction, then multiplied by 1000.\n    // e.g. if protocol fee is 3/7th of trading fee, then value = 7/3 * 1000 = 2333\n    // set to 0 to disable protocol fee\n    function protocolFeeFractionInverse() external view returns (uint256);\n\n    // need to divide by 100 e.g. 50 is 50%\n    function maxSlippagePercent() external view returns (uint256);\n\n    // max slippage resets after this many blocks\n    function maxSlippageBlocks() external view returns (uint256);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function approvedPair(address tokenA, address tokenB) external view returns (bool approved);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function approvePairViaGovernance(address tokenA, address tokenB) external;\n\n    function createPair(\n        address newToken,\n        uint256 newTokenAmount,\n        address lockupToken, // LINK or WETH\n        uint256 lockupTokenAmount,\n        uint256 lockupPeriod,\n        address listingFeeToken\n    ) external returns (address pair);\n\n    function setPriceOracle(address) external;\n\n    function setTreasury(address) external;\n\n    function setGovernance(address) external;\n\n    function setTreasuryProtocolFeeShare(uint256) external;\n\n    function setProtocolFeeFractionInverse(uint256) external;\n\n    function setLinkListingFeeInUsd(uint256) external;\n\n    function setWethListingFeeInUsd(uint256) external;\n\n    function setYflListingFeeInUsd(uint256) external;\n\n    function setTreasuryListingFeeShare(uint256) external;\n\n    function setMinListingLockupAmountInUsd(uint256) external;\n\n    function setTargetListingLockupAmountInUsd(uint256) external;\n\n    function setMinListingLockupPeriod(uint256) external;\n\n    function setTargetListingLockupPeriod(uint256) external;\n\n    function setLockupAmountListingFeeDiscountShare(uint256) external;\n\n    function setDefaultLinkTradingFeePercent(uint256) external;\n\n    function setDefaultNonLinkTradingFeePercent(uint256) external;\n\n    function setMaxSlippagePercent(uint256) external;\n\n    function setMaxSlippageBlocks(uint256) external;\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/interfaces/ILinkswapPair.sol": {
      "content": "pragma solidity 0.6.6;\n\nimport \"./ILinkswapERC20.sol\";\n\ninterface ILinkswapPair is ILinkswapERC20 {\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Lock(address indexed sender, uint256 lockupPeriod, uint256 liquidityLockupAmount);\n    event Unlock(address indexed sender, uint256 liquidityUnlocked);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function addressToLockupExpiry(address) external view returns (uint256);\n\n    function addressToLockupAmount(address) external view returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function tradingFeePercent() external view returns (uint256);\n\n    function lastSlippageBlocks() external view returns (uint256);\n\n    function priceAtLastSlippageBlocks() external view returns (uint256);\n\n    function lastSwapPrice() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function lock(uint256 lockupPeriod, uint256 liquidityLockupAmount) external;\n\n    function unlock() external;\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function setTradingFeePercent(uint256 _tradingFeePercent) external;\n\n    // functions only callable by LinkswapFactory\n    function initialize(\n        address _token0,\n        address _token1,\n        uint256 _tradingFeePercent\n    ) external;\n\n    function listingLock(\n        address lister,\n        uint256 lockupPeriod,\n        uint256 liquidityLockupAmount\n    ) external;\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/interfaces/ILinkswapRouter.sol": {
      "content": "pragma solidity 0.6.6;\n\ninterface ILinkswapRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function createPairUsingETH(\n        address newToken,\n        uint256 newTokenAmount,\n        address lockupToken,\n        uint256 lockupTokenAmount,\n        uint256 lockupPeriod,\n        address listingFeeToken\n    ) external payable returns (address pair);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity 0.6.6;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/libraries/LinkswapLibrary.sol": {
      "content": "pragma solidity 0.6.6;\n\nimport \"../interfaces/ILinkswapFactory.sol\";\nimport \"../interfaces/ILinkswapPair.sol\";\nimport \"./SafeMathLinkswap.sol\";\n\nlibrary LinkswapLibrary {\n    using SafeMathLinkswap for uint256;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"LinkswapLibrary: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"LinkswapLibrary: ZERO_ADDRESS\");\n    }\n\n    function pairFor(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (address pair) {\n        pair = ILinkswapFactory(factory).getPair(tokenA, tokenB);\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address factory,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) = ILinkswapPair(ILinkswapFactory(factory).getPair(tokenA, tokenB))\n            .getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"LinkswapLibrary: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"LinkswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"LinkswapLibrary: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"LinkswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn.mul(uint256(1e6).sub(tradingFeePercent));\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(1e6).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut,\n        uint256 tradingFeePercent\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"LinkswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"LinkswapLibrary: INSUFFICIENT_LIQUIDITY\");\n        uint256 numerator = reserveIn.mul(amountOut).mul(1e6);\n        uint256 denominator = (reserveOut.sub(amountOut)).mul(uint256(1e6).sub(tradingFeePercent));\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        address factory,\n        uint256 amountIn,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"LinkswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i; i < path.length - 1; i++) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(\n                amounts[i],\n                reserveIn,\n                reserveOut,\n                ILinkswapPair(ILinkswapFactory(factory).getPair(path[i], path[i + 1])).tradingFeePercent()\n            );\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        address factory,\n        uint256 amountOut,\n        address[] memory path\n    ) internal view returns (uint256[] memory amounts) {\n        require(path.length >= 2, \"LinkswapLibrary: INVALID_PATH\");\n        amounts = new uint256[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; i--) {\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(\n                amounts[i],\n                reserveIn,\n                reserveOut,\n                ILinkswapPair(ILinkswapFactory(factory).getPair(path[i - 1], path[i])).tradingFeePercent()\n            );\n        }\n    }\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/libraries/SafeMathLinkswap.sol": {
      "content": "pragma solidity 0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathLinkswap {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n"
    },
    "/Users/kroll/Dev/LinkDeployment3/contracts/libraries/TransferHelper.sol": {
      "content": "pragma solidity 0.6.6;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {
      "": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}
