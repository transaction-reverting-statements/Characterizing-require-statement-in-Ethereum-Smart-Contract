{{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IKingSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0;\n\ninterface IKingSwapFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/interfaces/IKingSwapPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0;\n\ninterface IKingSwapPair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function stoken() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n    function dealSlippageWithIn(address[] calldata path, uint amountIn, address to, bool ifmint) external returns (uint amountOut);\n    function dealSlippageWithOut(address[] calldata path, uint amountOut, address to, bool ifmint) external returns (uint extra);\n    function getAmountOutMarket(address token, uint amountIn) external view returns (uint _out, uint t0Price);\n    function getAmountInMarket(address token, uint amountOut) external view returns (uint _in, uint t0Price);\n    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount);\n    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount);\n    function getTokenMarketPrice(address token) external view returns (uint price);\n}\n"
    },
    "contracts/kingswap/KingSwapERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport \"./libraries/SafeMath.sol\";\n\ncontract KingSwapERC20 {\n    using SafeMath for uint;\n\n    string public constant name = \"KingSwap LP Token\";\n    string public constant symbol = \"KLP\";\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    bytes32 public DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    constructor() public {\n        uint chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n        require(deadline >= block.timestamp, \"KingSwap: EXPIRED\");\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"KingSwap: INVALID_SIGNATURE\");\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/kingswap/KingSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\n\nimport \"./KingSwapPair.sol\";\n\ncontract KingSwapFactory {\n    address public feeTo;\n    address public feeToSetter;\n    address public migrator;\n\n    mapping(address => mapping(address => address)) public getPair;\n    address[] public allPairs;\n\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    constructor(address _feeToSetter) public {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external view returns (uint256) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\n        require(tokenA != tokenB, \"KingSwap: IDENTICAL_ADDRESSES\");\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), \"KingSwap: ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"KingSwap: PAIR_EXISTS\"); // single check is sufficient\n        bytes memory bytecode = type(KingSwapPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IKingSwapPair(pair).initialize(token0, token1);\n\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external {\n        require(msg.sender == feeToSetter, \"KingSwap: FORBIDDEN\");\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external {\n        require(msg.sender == feeToSetter, \"KingSwap: FORBIDDEN\");\n        feeToSetter = _feeToSetter;\n    }\n\n    function setMigrator(address _migrator) external {\n        require(msg.sender == feeToSetter, \"KingSwap: FORBIDDEN\");\n        migrator = _migrator;\n    }\n\n    function lockInPair(address tokenA, address tokenB, bool lockedInA, bool lockedInB) external {\n        require(msg.sender == feeToSetter, \"KingSwap: FORBIDDEN\");\n\n        (address token0, address token1, bool lock0, bool lock1) = tokenA < tokenB\n            ? (tokenA, tokenB, lockedInA, lockedInB)\n            : (tokenB, tokenA, lockedInB, lockedInA);\n        KingSwapPair(getPair[token0][token1]).lockIn(lock0, lock1);\n    }\n}\n"
    },
    "contracts/kingswap/KingSwapPair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport \"./KingSwapERC20.sol\";\nimport \"./libraries/Math.sol\";\nimport \"./libraries/UQ112x112.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"../interfaces/IKingSwapFactory.sol\";\nimport \"./interfaces/IKingSwapCallee.sol\";\nimport \"../interfaces/IKingSwapPair.sol\";\nimport \"./KingSwapSlippageToken.sol\";\n\ninterface IMigrator {\n    // Return the desired amount of liquidity token that the migrator wants.\n    function desiredLiquidity() external view returns (uint256);\n}\n\ncontract KingSwapPair is KingSwapERC20 {\n    using SafeMath for uint256;\n    using UQ112x112 for uint224;\n\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    uint256 public constant DECAY_PERIOD = 5 minutes;\n    uint256 public constant UQ112 = 2**112;\n\n    address public factory;\n\n    address public token0; // shares single storage slot with lockedIn0\n    bool public lockedIn0; // if set, token0 gets locked in the contract\n\n    address public token1;\n    bool public lockedIn1;\n\n    KingSwapSlippageToken public stoken;\n\n    uint224 private virtualPrice; // token0 virtual price, uses single storage slot\n    uint32 private lastPriceTime; // the latest exchange time\n\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint256 public price0CumulativeLast;\n    uint256 public price1CumulativeLast;\n    uint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint256 private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, \"KingSwap: LOCKED\");\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function getVirtualPrice() public view returns (uint224 _virtualPrice, uint32 _lastPriceTime) {\n        _virtualPrice = virtualPrice;\n        _lastPriceTime = lastPriceTime;\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"KingSwap: TRANSFER_FAILED\");\n    }\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n    event Lock(bool lockedIn0, bool lockedIn1);\n\n    constructor() public {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, \"KingSwap: FORBIDDEN\"); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n        stoken = new KingSwapSlippageToken(0);\n    }\n\n    function lockIn(bool _lockedIn0, bool _lockedIn1) external {\n        require(msg.sender == factory, \"KingSwap: FORBIDDEN\");\n        lockedIn0 = _lockedIn0;\n        lockedIn1 = _lockedIn1;\n        emit Lock(lockedIn0, lockedIn1);\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint256 balance0, uint256 balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), \"KingSwap: OVERFLOW\");\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/5th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IKingSwapFactory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint256 _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint256 rootK = Math.sqrt(uint256(_reserve0).mul(_reserve1));\n                uint256 rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint256 denominator = rootK.mul(4).add(rootKLast);\n                    uint256 liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external lock returns (uint256 liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            address migrator = IKingSwapFactory(factory).migrator();\n            if (msg.sender == migrator) {\n                liquidity = IMigrator(migrator).desiredLiquidity();\n                require(liquidity > 0 && liquidity != uint256(-1), \"KingSwap: Bad desired liquidity\");\n            } else {\n                require(migrator == address(0), \"KingSwap: Must not have migrator\");\n                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n            }\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, \"KingSwap: INSUFFICIENT_LIQUIDITY_MINTED\");\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external lock returns (uint256 amount0, uint256 amount1) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        {\n            uint256 liquidity = balanceOf[address(this)];\n            uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n            amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n            amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n            require(amount0 > 0 && amount1 > 0, \"KingSwap: INSUFFICIENT_LIQUIDITY_BURNED\");\n            _burn(address(this), liquidity);\n        }\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    function _updateVirtualPrice(uint112 _reserve0, uint112 _reserve1) internal {\n        (uint256 _virtualPrice, uint32 _lastPriceTime) = getVirtualPrice();\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        if (_lastPriceTime < blockTimestamp) {\n            uint256 currentPrice = uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0));\n            uint256 timePassed = Math.min(DECAY_PERIOD, block.timestamp.sub(_lastPriceTime));\n            uint256 timeRemain = DECAY_PERIOD.sub(timePassed);\n            uint256 price = _virtualPrice.mul(timeRemain).add(currentPrice.mul(timePassed)) / (DECAY_PERIOD);\n            virtualPrice = uint224(price);\n            lastPriceTime = blockTimestamp;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external lock {\n        require(amount0Out > 0 || amount1Out > 0, \"KingSwap: INSUFFICIENT_OUTPUT_AMOUNT\");\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \"KingSwap: INSUFFICIENT_LIQUIDITY\");\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1} and _lockedIn{0,1}, avoids stack too deep errors\n            (address _token0, bool _lockedIn0) = _getTokenAndLocks0();  // gas savings\n            (address _token1, bool _lockedIn1) = _getTokenAndLocks1();\n            require(to != _token0 && to != _token1, \"KingSwap: INVALID_TO\");\n\n            // revert if a token is locked in the contract\n            require(\n                (!_lockedIn0 || amount0Out == 0) && (!_lockedIn1 || amount1Out == 0),\n                \"KingSwap: TOKEN_LOCKED_IN\"\n            );\n\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0) IKingSwapCallee(to).KingSwapCall(msg.sender, amount0Out, amount1Out, data);\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, \"KingSwap: INSUFFICIENT_INPUT_AMOUNT\");\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            uint256 balance0Adjusted = balance0.mul(1000);\n            if (amount0In != 0) balance0Adjusted = balance0Adjusted.sub(amount0In.mul(25)/10);\n            uint256 balance1Adjusted = balance1.mul(1000);\n            if (amount1In != 0) balance1Adjusted = balance1Adjusted.sub(amount1In.mul(25)/10);\n            require(\n                balance0Adjusted.mul(balance1Adjusted) >= uint256(_reserve0).mul(_reserve1).mul(1000**2),\n                \"KingSwap: K\"\n            );\n        }\n\n        _updateVirtualPrice(_reserve0, _reserve1);\n        _update(balance0, balance1, _reserve0, _reserve1);\n\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    function _getTokenAndLocks0() private view returns (address, bool) {\n        return (token0, lockedIn0);\n    }\n\n    function _getTokenAndLocks1() private view returns (address, bool) {\n        return (token1, lockedIn1);\n    }\n\n    function _getToken0MarketPrice() internal view returns (uint256 price) {\n        (uint256 _virtualPrice, uint32 _lastPriceTime) = getVirtualPrice();\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        uint256 currentPrice = uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0));\n        uint256 timePassed = Math.min(DECAY_PERIOD, block.timestamp.sub(_lastPriceTime));\n        uint256 timeRemain = DECAY_PERIOD.sub(timePassed);\n        price = _virtualPrice.mul(timeRemain).add(currentPrice.mul(timePassed)) / (DECAY_PERIOD);\n    }\n\n    function getTokenMarketPrice(address token) external view returns (uint256 price) {\n        uint256 t0Price = _getToken0MarketPrice();\n        token == token0 ? price = t0Price : price = UQ112.mul(UQ112) / t0Price;\n    }\n\n    function _getAmountOut(address token, uint256 amountIn, uint256 t0Price) internal view returns (uint256 _out) {\n        uint256 amountInWithFee = amountIn.mul(9975);\n        if (token == token0) {\n            uint256 numerator = amountInWithFee.mul(t0Price);\n            uint256 denominator = UQ112.mul(10000);\n            _out = numerator / denominator;\n        } else {\n            uint256 numerator = amountInWithFee.mul(UQ112);\n            uint256 denominator = t0Price.mul(10000);\n            _out = numerator / denominator;\n        }\n    }\n\n    function _getAmountIn(address token, uint256 amountOut, uint256 t0Price) internal view returns (uint256 _in) {\n        if (token == token0) {\n            uint256 numerator = amountOut.mul(10000).mul(t0Price);\n            uint256 denominator = UQ112.mul(9975);\n            _in = numerator / denominator;\n        } else {\n            uint256 numerator = amountOut.mul(10000).mul(UQ112);\n            uint256 denominator = t0Price.mul(9975);\n            _in = numerator / denominator;\n        }\n    }\n\n    function getAmountOutMarket(address token, uint256 amountIn) public view returns (uint256 _out, uint256 t0Price) {\n        t0Price = _getToken0MarketPrice();\n        _out = _getAmountOut(token, amountIn, t0Price);\n    }\n\n    function getAmountInMarket(address token, uint256 amountOut) public view returns (uint256 _in, uint256 t0Price) {\n        t0Price = _getToken0MarketPrice();\n        _in = _getAmountIn(token, amountOut, t0Price);\n    }\n\n    function getAmountOutPool(address token, uint256 amountIn) public view returns (uint256 _out, uint256 t0Price) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        t0Price = uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0));\n        _out = _getAmountOut(token, amountIn, t0Price);\n    }\n\n    function getAmountInPool(address token, uint256 amountOut) public view returns (uint256 _in, uint256 t0Price) {\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\n        t0Price = uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0));\n        _in = _getAmountIn(token, amountOut, t0Price);\n    }\n\n    function getAmountOutReal(uint256 amountIn, uint256 _reserveIn, uint256 _reserveOut) internal pure returns (uint256 _out) {\n        uint256 amountInWithFee = amountIn.mul(9975);\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\n        uint256 denominator = _reserveIn.mul(10000).add(amountInWithFee);\n        _out = numerator / denominator;\n    }\n\n    function getAmountInReal(uint256 amountOut, uint256 _reserveIn, uint256 _reserveOut) internal pure returns (uint256 _in) {\n        uint256 numerator = _reserveIn.mul(amountOut).mul(10000);\n        uint256 denominator = _reserveOut.sub(amountOut).mul(9975);\n        _in = (numerator / denominator).add(1);\n    }\n\n    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount) {\n        address _token0 = token0;\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        (uint256 _reserveIn, uint256 _reserveOut) = token == _token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\n\n        uint256 amountOutReal = getAmountOutReal(amountIn, _reserveIn, _reserveOut);\n        (uint256 amountOutMarket, ) = getAmountOutMarket(token, amountIn);\n        amountOut = amountOutReal;\n\n        // arbitrager\n        if (amountOutReal > amountOutMarket) {\n            uint256 slippage = amountOutReal.sub(amountOutMarket);\n            uint256 halfSlippage = slippage / 2;\n            amountOut = amountOutReal.sub(halfSlippage);\n        }\n\n        (uint256 amountOutPool, uint256 t0Price) = getAmountOutPool(token, amountIn);\n        uint256 slippage = amountOutPool.sub(amountOutReal);\n        stokenAmount = token == _token0 ? slippage : slippage.mul(t0Price) / UQ112;\n    }\n\n    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount) {\n        address _token0 = token0;\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n        (uint256 _reserveIn, uint256 _reserveOut) = token == _token0 ? (_reserve1, _reserve0) : (_reserve0, _reserve1);\n\n        uint256 amountInReal = getAmountInReal(amountOut, _reserveIn, _reserveOut);\n        (uint256 amountInMarket, ) = getAmountInMarket(token, amountOut);\n        amountIn = amountInReal;\n\n        // arbitrager\n        if (amountInReal < amountInMarket) {\n            uint256 slippage = amountInMarket.sub(amountInReal);\n            uint256 extra = slippage / 2;\n            amountIn = amountInReal.add(extra);\n        }\n\n        (uint256 amountInPool, uint256 t0Price) = getAmountInPool(token, amountOut);\n        uint256 slippage = amountInReal.sub(amountInPool);\n        stokenAmount = token == _token0 ? slippage : slippage.mul(t0Price) / UQ112;\n    }\n\n    function dealSlippageWithIn(address[] calldata path, uint256 amountIn, address to, bool ifmint) external lock returns (uint256 amountOut) {\n        require(path.length == 2, \"KingSwap: INVALID_PATH\");\n        address _token0 = token0;\n        uint256 amountOutReal;\n        uint256 amountOutMarket;\n\n        // avoids stack too deep errors\n        {\n            (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n            (uint256 _reserveIn, uint256 _reserveOut) = path[0] == _token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            amountOutReal = getAmountOutReal(amountIn, _reserveIn, _reserveOut);\n            amountOut = amountOutReal;\n            (amountOutMarket, ) = getAmountOutMarket(path[0], amountIn);\n            uint256 balance = IERC20(path[0]).balanceOf(address(this));\n            uint256 amount = balance.sub(_reserveIn);\n            require(amount >= amountIn, \"KingSwap: Invalid Amount\");\n        }\n\n        // arbitrager\n        if (amountOutReal > amountOutMarket) {\n            uint256 slippageExtra = amountOutReal.sub(amountOutMarket);\n            uint256 halfSlippage = slippageExtra / 2;\n            amountOut = amountOutReal.sub(halfSlippage);\n        }\n\n        if (ifmint == true) {\n            (uint256 amountOutPool, uint256 t0Price) = getAmountOutPool(path[0], amountIn);\n            uint256 slippage = amountOutPool.sub(amountOutReal);\n            uint256 mintAmount = path[1] == _token0 ? slippage.mul(t0Price) / UQ112 : slippage;\n            stoken.mint(to, mintAmount);\n        }\n    }\n\n    function dealSlippageWithOut(address[] calldata path, uint256 amountOut, address to, bool ifmint) external lock returns (uint256 extra) {\n        require(path.length == 2, \"KingSwap: INVALID_PATH\");\n        address _token0 = token0;\n        uint256 amountInReal;\n        uint256 amountInMarket;\n\n        // avoids stack too deep errors\n        {\n            (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n            (uint256 _reserveIn, uint256 _reserveOut) = path[0] == _token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            amountInReal = getAmountInReal(amountOut, _reserveIn, _reserveOut);\n            (amountInMarket, ) = getAmountInMarket(path[1], amountOut);\n        }\n\n        // arbitrager\n        if (amountInReal < amountInMarket) {\n            uint256 slippageExtra = amountInMarket.sub(amountInReal);\n            extra = slippageExtra / 2;\n        }\n\n        if (ifmint == true) {\n            (uint256 amountInPool, uint256 t0Price) = getAmountInPool(path[1], amountOut);\n            uint256 slippage = amountInReal.sub(amountInPool);\n            uint256 mintAmount = path[0] == _token0 ? slippage.mul(t0Price) / UQ112 : slippage;\n            stoken.mint(to, mintAmount);\n        }\n    }\n\n    // force balances to match reserves\n    function skim(address to) external lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}\n"
    },
    "contracts/kingswap/KingSwapSlippageToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\nimport \"./libraries/SafeMath.sol\";\n\ncontract KingSwapSlippageToken {\n    using SafeMath for uint;\n\n    string public constant name = \"KingSwap Slippage Token\";\n    string public constant symbol = \"KST\";\n    uint8 public constant decimals = 18;\n    uint  public totalSupply;\n    address private _owner;\n    mapping(address => uint) public balanceOf;\n    mapping(address => mapping(address => uint)) public allowance;\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"SlippageToken: Not Owner\");\n        _;\n    }\n\n    constructor(uint initialSupply) public {\n        _owner = msg.sender;\n        _mint(msg.sender, initialSupply);\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function mint(address to, uint value) external onlyOwner returns (bool) {\n        _mint(to, value);\n        return true;\n    }\n\n    function burn(address from, uint value) external onlyOwner returns (bool) {\n        _burn(from, value);\n        return true;\n    }\n}\n"
    },
    "contracts/kingswap/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n    function mint(address to, uint value) external returns (bool);\n    function burn(address from, uint value) external returns (bool);\n}\n"
    },
    "contracts/kingswap/interfaces/IKingSwapCallee.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.6.0;\n\ninterface IKingSwapCallee {\n    function KingSwapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "contracts/kingswap/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/kingswap/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/kingswap/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.6.12;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "libraries": {
      "": {}
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}
