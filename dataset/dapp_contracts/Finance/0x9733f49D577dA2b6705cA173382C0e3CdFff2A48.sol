{{
  "language": "Solidity",
  "sources": {
    "contracts/derivatives/CompoundOrder.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"../interfaces/Comptroller.sol\";\nimport \"../interfaces/PriceOracle.sol\";\nimport \"../interfaces/CERC20.sol\";\nimport \"../interfaces/CEther.sol\";\nimport \"../Utils.sol\";\n\ncontract CompoundOrder is Utils(address(0), address(0), address(0)), Ownable {\n  // Constants\n  uint256 internal constant NEGLIGIBLE_DEBT = 100; // we don't care about debts below 10^-4 USDC (0.1 cent)\n  uint256 internal constant MAX_REPAY_STEPS = 3; // Max number of times we attempt to repay remaining debt\n  uint256 internal constant DEFAULT_LIQUIDITY_SLIPPAGE = 10 ** 12; // 1e-6 slippage for redeeming liquidity when selling order\n  uint256 internal constant FALLBACK_LIQUIDITY_SLIPPAGE = 10 ** 15; // 0.1% slippage for redeeming liquidity when selling order\n  uint256 internal constant MAX_LIQUIDITY_SLIPPAGE = 10 ** 17; // 10% max slippage for redeeming liquidity when selling order\n\n  // Contract instances\n  Comptroller public COMPTROLLER; // The Compound comptroller\n  PriceOracle public ORACLE; // The Compound price oracle\n  CERC20 public CUSDC; // The Compound USDC market token\n  address public CETH_ADDR;\n\n  // Instance variables\n  uint256 public stake;\n  uint256 public collateralAmountInUSDC;\n  uint256 public loanAmountInUSDC;\n  uint256 public cycleNumber;\n  uint256 public buyTime; // Timestamp for order execution\n  uint256 public outputAmount; // Records the total output USDC after order is sold\n  address public compoundTokenAddr;\n  bool public isSold;\n  bool public orderType; // True for shorting, false for longing\n  bool internal initialized;\n\n\n  constructor() public {}\n\n  function init(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInUSDC,\n    uint256 _loanAmountInUSDC,\n    bool _orderType,\n    address _usdcAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cUSDCAddr,\n    address _cETHAddr\n  ) public {\n    require(!initialized);\n    initialized = true;\n\n    // Initialize details of order\n    require(_compoundTokenAddr != _cUSDCAddr);\n    require(_stake > 0 && _collateralAmountInUSDC > 0 && _loanAmountInUSDC > 0); // Validate inputs\n    stake = _stake;\n    collateralAmountInUSDC = _collateralAmountInUSDC;\n    loanAmountInUSDC = _loanAmountInUSDC;\n    cycleNumber = _cycleNumber;\n    compoundTokenAddr = _compoundTokenAddr;\n    orderType = _orderType;\n\n    COMPTROLLER = Comptroller(_comptrollerAddr);\n    ORACLE = PriceOracle(_priceOracleAddr);\n    CUSDC = CERC20(_cUSDCAddr);\n    CETH_ADDR = _cETHAddr;\n    USDC_ADDR = _usdcAddr;\n    KYBER_ADDR = _kyberAddr;\n    usdc = ERC20Detailed(_usdcAddr);\n    kyber = KyberNetwork(_kyberAddr);\n\n    // transfer ownership to msg.sender\n    _transferOwnership(msg.sender);\n  }\n\n  /**\n   * @notice Executes the Compound order\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice) public;\n\n  /**\n   * @notice Sells the Compound order and returns assets to PeakDeFiFund\n   * @param _minPrice the minimum token price\n   * @param _maxPrice the maximum token price\n   */\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice) public returns (uint256 _inputAmount, uint256 _outputAmount);\n\n  /**\n   * @notice Repays the loans taken out to prevent the collateral ratio from dropping below threshold\n   * @param _repayAmountInUSDC the amount to repay, in USDC\n   */\n  function repayLoan(uint256 _repayAmountInUSDC) public;\n\n  /**\n   * @notice Emergency method, which allow to transfer selected tokens to the fund address\n   * @param _tokenAddr address of withdrawn token\n   * @param _receiver address who should receive tokens\n   */\n  function emergencyExitTokens(address _tokenAddr, address _receiver) public onlyOwner {\n    ERC20Detailed token = ERC20Detailed(_tokenAddr);\n    token.safeTransfer(_receiver, token.balanceOf(address(this)));\n  }\n\n  function getMarketCollateralFactor() public view returns (uint256);\n\n  function getCurrentCollateralInUSDC() public returns (uint256 _amount);\n\n  function getCurrentBorrowInUSDC() public returns (uint256 _amount);\n\n  function getCurrentCashInUSDC() public view returns (uint256 _amount);\n\n  /**\n   * @notice Calculates the current profit in USDC\n   * @return the profit amount\n   */\n  function getCurrentProfitInUSDC() public returns (bool _isNegative, uint256 _amount) {\n    uint256 l;\n    uint256 r;\n    if (isSold) {\n      l = outputAmount;\n      r = collateralAmountInUSDC;\n    } else {\n      uint256 cash = getCurrentCashInUSDC();\n      uint256 supply = getCurrentCollateralInUSDC();\n      uint256 borrow = getCurrentBorrowInUSDC();\n      if (cash >= borrow) {\n        l = supply.add(cash);\n        r = borrow.add(collateralAmountInUSDC);\n      } else {\n        l = supply;\n        r = borrow.sub(cash).mul(PRECISION).div(getMarketCollateralFactor()).add(collateralAmountInUSDC);\n      }\n    }\n\n    if (l >= r) {\n      return (false, l.sub(r));\n    } else {\n      return (true, r.sub(l));\n    }\n  }\n\n  /**\n   * @notice Calculates the current collateral ratio on Compound, using 18 decimals\n   * @return the collateral ratio\n   */\n  function getCurrentCollateralRatioInUSDC() public returns (uint256 _amount) {\n    uint256 supply = getCurrentCollateralInUSDC();\n    uint256 borrow = getCurrentBorrowInUSDC();\n    if (borrow == 0) {\n      return uint256(-1);\n    }\n    return supply.mul(PRECISION).div(borrow);\n  }\n\n  /**\n   * @notice Calculates the current liquidity (supply - collateral) on the Compound platform\n   * @return the liquidity\n   */\n  function getCurrentLiquidityInUSDC() public returns (bool _isNegative, uint256 _amount) {\n    uint256 supply = getCurrentCollateralInUSDC();\n    uint256 borrow = getCurrentBorrowInUSDC().mul(PRECISION).div(getMarketCollateralFactor());\n    if (supply >= borrow) {\n      return (false, supply.sub(borrow));\n    } else {\n      return (true, borrow.sub(supply));\n    }\n  }\n\n  function __sellUSDCForToken(uint256 _usdcAmount) internal returns (uint256 _actualUSDCAmount, uint256 _actualTokenAmount) {\n    ERC20Detailed t = __underlyingToken(compoundTokenAddr);\n    (,, _actualTokenAmount, _actualUSDCAmount) = __kyberTrade(usdc, _usdcAmount, t); // Sell USDC for tokens on Kyber\n    require(_actualUSDCAmount > 0 && _actualTokenAmount > 0); // Validate return values\n  }\n\n  function __sellTokenForUSDC(uint256 _tokenAmount) internal returns (uint256 _actualUSDCAmount, uint256 _actualTokenAmount) {\n    ERC20Detailed t = __underlyingToken(compoundTokenAddr);\n    (,, _actualUSDCAmount, _actualTokenAmount) = __kyberTrade(t, _tokenAmount, usdc); // Sell tokens for USDC on Kyber\n    require(_actualUSDCAmount > 0 && _actualTokenAmount > 0); // Validate return values\n  }\n\n  // Convert a USDC amount to the amount of a given token that's of equal value\n  function __usdcToToken(address _cToken, uint256 _usdcAmount) internal view returns (uint256) {\n    ERC20Detailed t = __underlyingToken(_cToken);\n    return _usdcAmount.mul(PRECISION).div(10 ** getDecimals(usdc)).mul(10 ** getDecimals(t)).div(ORACLE.getUnderlyingPrice(_cToken).mul(10 ** getDecimals(t)).div(PRECISION));\n  }\n\n  // Convert a compound token amount to the amount of USDC that's of equal value\n  function __tokenToUSDC(address _cToken, uint256 _tokenAmount) internal view returns (uint256) {\n    return _tokenAmount.mul(ORACLE.getUnderlyingPrice(_cToken)).div(PRECISION).mul(10 ** getDecimals(usdc)).div(PRECISION);\n  }\n\n  function __underlyingToken(address _cToken) internal view returns (ERC20Detailed) {\n    if (_cToken == CETH_ADDR) {\n      // ETH\n      return ETH_TOKEN_ADDRESS;\n    }\n    CERC20 ct = CERC20(_cToken);\n    address underlyingToken = ct.underlying();\n    ERC20Detailed t = ERC20Detailed(underlyingToken);\n    return t;\n  }\n\n  function() external payable {}\n}"
    },
    "@openzeppelin/contracts/ownership/Ownable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/Comptroller.sol": {
      "content": "pragma solidity 0.5.17;\n\n// Compound finance comptroller\ninterface Comptroller {\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function markets(address cToken) external view returns (bool isListed, uint256 collateralFactorMantissa);\n}"
    },
    "contracts/interfaces/PriceOracle.sol": {
      "content": "pragma solidity 0.5.17;\n\n// Compound finance's price oracle\ninterface PriceOracle {\n  // returns the price of the underlying token in USD, scaled by 10**(36 - underlyingPrecision)\n  function getUnderlyingPrice(address cToken) external view returns (uint);\n}"
    },
    "contracts/interfaces/CERC20.sol": {
      "content": "pragma solidity 0.5.17;\n\n// Compound finance ERC20 market interface\ninterface CERC20 {\n  function mint(uint mintAmount) external returns (uint);\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n  function borrow(uint borrowAmount) external returns (uint);\n  function repayBorrow(uint repayAmount) external returns (uint);\n  function borrowBalanceCurrent(address account) external returns (uint);\n  function exchangeRateCurrent() external returns (uint);\n\n  function balanceOf(address account) external view returns (uint);\n  function decimals() external view returns (uint);\n  function underlying() external view returns (address);\n}"
    },
    "contracts/interfaces/CEther.sol": {
      "content": "pragma solidity 0.5.17;\n\n// Compound finance Ether market interface\ninterface CEther {\n  function mint() external payable;\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\n  function borrow(uint borrowAmount) external returns (uint);\n  function repayBorrow() external payable;\n  function borrowBalanceCurrent(address account) external returns (uint);\n  function exchangeRateCurrent() external returns (uint);\n\n  function balanceOf(address account) external view returns (uint);\n  function decimals() external view returns (uint);\n}"
    },
    "contracts/Utils.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/KyberNetwork.sol\";\nimport \"./interfaces/OneInchExchange.sol\";\n\n/**\n * @title The smart contract for useful utility functions and constants.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract Utils {\n  using SafeMath for uint256;\n  using SafeERC20 for ERC20Detailed;\n\n  /**\n   * @notice Checks if `_token` is a valid token.\n   * @param _token the token's address\n   */\n  modifier isValidToken(address _token) {\n    require(_token != address(0));\n    if (_token != address(ETH_TOKEN_ADDRESS)) {\n      require(isContract(_token));\n    }\n    _;\n  }\n\n  address public USDC_ADDR;\n  address payable public KYBER_ADDR;\n  address payable public ONEINCH_ADDR;\n\n  bytes public constant PERM_HINT = \"PERM\";\n\n  // The address Kyber Network uses to represent Ether\n  ERC20Detailed internal constant ETH_TOKEN_ADDRESS = ERC20Detailed(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n  ERC20Detailed internal usdc;\n  KyberNetwork internal kyber;\n\n  uint256 constant internal PRECISION = (10**18);\n  uint256 constant internal MAX_QTY   = (10**28); // 10B tokens\n  uint256 constant internal ETH_DECIMALS = 18;\n  uint256 constant internal MAX_DECIMALS = 18;\n\n  constructor(\n    address _usdcAddr,\n    address payable _kyberAddr,\n    address payable _oneInchAddr\n  ) public {\n    USDC_ADDR = _usdcAddr;\n    KYBER_ADDR = _kyberAddr;\n    ONEINCH_ADDR = _oneInchAddr;\n\n    usdc = ERC20Detailed(_usdcAddr);\n    kyber = KyberNetwork(_kyberAddr);\n  }\n\n  /**\n   * @notice Get the number of decimals of a token\n   * @param _token the token to be queried\n   * @return number of decimals\n   */\n  function getDecimals(ERC20Detailed _token) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(ETH_DECIMALS);\n    }\n    return uint256(_token.decimals());\n  }\n\n  /**\n   * @notice Get the token balance of an account\n   * @param _token the token to be queried\n   * @param _addr the account whose balance will be returned\n   * @return token balance of the account\n   */\n  function getBalance(ERC20Detailed _token, address _addr) internal view returns(uint256) {\n    if (address(_token) == address(ETH_TOKEN_ADDRESS)) {\n      return uint256(_addr.balance);\n    }\n    return uint256(_token.balanceOf(_addr));\n  }\n\n  /**\n   * @notice Calculates the rate of a trade. The rate is the price of the source token in the dest token, in 18 decimals.\n   *         Note: the rate is on the token level, not the wei level, so for example if 1 Atoken = 10 Btoken, then the rate\n   *         from A to B is 10 * 10**18, regardless of how many decimals each token uses.\n   * @param srcAmount amount of source token\n   * @param destAmount amount of dest token\n   * @param srcDecimals decimals used by source token\n   * @param dstDecimals decimals used by dest token\n   */\n  function calcRateFromQty(uint256 srcAmount, uint256 destAmount, uint256 srcDecimals, uint256 dstDecimals)\n        internal pure returns(uint)\n  {\n    require(srcAmount <= MAX_QTY);\n    require(destAmount <= MAX_QTY);\n\n    if (dstDecimals >= srcDecimals) {\n      require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n    } else {\n      require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n      return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n    }\n  }\n\n  /**\n   * @notice Wrapper function for doing token conversion on Kyber Network\n   * @param _srcToken the token to convert from\n   * @param _srcAmount the amount of tokens to be converted\n   * @param _destToken the destination token\n   * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n   *         _srcPriceInDest the price of the source token, in terms of dest tokens\n   *         _actualDestAmount actual amount of dest token traded\n   *         _actualSrcAmount actual amount of src token traded\n   */\n  function __kyberTrade(ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken)\n    internal\n    returns(\n      uint256 _destPriceInSrc,\n      uint256 _srcPriceInDest,\n      uint256 _actualDestAmount,\n      uint256 _actualSrcAmount\n    )\n  {\n    require(_srcToken != _destToken);\n\n    uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n    uint256 msgValue;\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      msgValue = 0;\n      _srcToken.safeApprove(KYBER_ADDR, 0);\n      _srcToken.safeApprove(KYBER_ADDR, _srcAmount);\n    } else {\n      msgValue = _srcAmount;\n    }\n    _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\n      _srcToken,\n      _srcAmount,\n      _destToken,\n      toPayableAddr(address(this)),\n      MAX_QTY,\n      1,\n      address(0),\n      PERM_HINT\n    );\n    _actualSrcAmount = beforeSrcBalance.sub(getBalance(_srcToken, address(this)));\n    require(_actualDestAmount > 0 && _actualSrcAmount > 0);\n    _destPriceInSrc = calcRateFromQty(_actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken));\n    _srcPriceInDest = calcRateFromQty(_actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken));\n  }\n\n  /**\n   * @notice Wrapper function for doing token conversion on 1inch\n   * @param _srcToken the token to convert from\n   * @param _srcAmount the amount of tokens to be converted\n   * @param _destToken the destination token\n   * @return _destPriceInSrc the price of the dest token, in terms of source tokens\n   *         _srcPriceInDest the price of the source token, in terms of dest tokens\n   *         _actualDestAmount actual amount of dest token traded\n   *         _actualSrcAmount actual amount of src token traded\n   */\n  function __oneInchTrade(ERC20Detailed _srcToken, uint256 _srcAmount, ERC20Detailed _destToken, bytes memory _calldata)\n    internal\n    returns(\n      uint256 _destPriceInSrc,\n      uint256 _srcPriceInDest,\n      uint256 _actualDestAmount,\n      uint256 _actualSrcAmount\n    )\n  {\n    require(_srcToken != _destToken);\n\n    uint256 beforeSrcBalance = getBalance(_srcToken, address(this));\n    uint256 beforeDestBalance = getBalance(_destToken, address(this));\n    // Note: _actualSrcAmount is being used as msgValue here, because otherwise we'd run into the stack too deep error\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\n      _actualSrcAmount = 0;\n      OneInchExchange dex = OneInchExchange(ONEINCH_ADDR);\n      address approvalHandler = dex.spender();\n      _srcToken.safeApprove(approvalHandler, 0);\n      _srcToken.safeApprove(approvalHandler, _srcAmount);\n    } else {\n      _actualSrcAmount = _srcAmount;\n    }\n\n    // trade through 1inch proxy\n    (bool success,) = ONEINCH_ADDR.call.value(_actualSrcAmount)(_calldata);\n    require(success);\n\n    // calculate trade amounts and price\n    _actualDestAmount = getBalance(_destToken, address(this)).sub(beforeDestBalance);\n    _actualSrcAmount = beforeSrcBalance.sub(getBalance(_srcToken, address(this)));\n    require(_actualDestAmount > 0 && _actualSrcAmount > 0);\n    _destPriceInSrc = calcRateFromQty(_actualDestAmount, _actualSrcAmount, getDecimals(_destToken), getDecimals(_srcToken));\n    _srcPriceInDest = calcRateFromQty(_actualSrcAmount, _actualDestAmount, getDecimals(_srcToken), getDecimals(_destToken));\n  }\n\n  /**\n   * @notice Checks if an Ethereum account is a smart contract\n   * @param _addr the account to be checked\n   * @return True if the account is a smart contract, false otherwise\n   */\n  function isContract(address _addr) internal view returns(bool) {\n    uint256 size;\n    if (_addr == address(0)) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  function toPayableAddr(address _addr) internal pure returns (address payable) {\n    return address(uint160(_addr));\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "contracts/interfaces/KyberNetwork.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\n\n/**\n * @title The interface for the Kyber Network smart contract\n * @author Zefram Lou (Zebang Liu)\n */\ninterface KyberNetwork {\n  function getExpectedRate(ERC20Detailed src, ERC20Detailed dest, uint srcQty) external view\n      returns (uint expectedRate, uint slippageRate);\n\n  function tradeWithHint(\n    ERC20Detailed src, uint srcAmount, ERC20Detailed dest, address payable destAddress, uint maxDestAmount,\n    uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\n}\n"
    },
    "contracts/interfaces/OneInchExchange.sol": {
      "content": "pragma solidity 0.5.17;\n\ninterface OneInchExchange {\n    function spender() external view returns (address);\n}"
    },
    "contracts/derivatives/CompoundOrderFactory.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./LongCERC20Order.sol\";\nimport \"./LongCEtherOrder.sol\";\nimport \"./ShortCERC20Order.sol\";\nimport \"./ShortCEtherOrder.sol\";\nimport \"../lib/CloneFactory.sol\";\n\ncontract CompoundOrderFactory is CloneFactory {\n  address public SHORT_CERC20_LOGIC_CONTRACT;\n  address public SHORT_CEther_LOGIC_CONTRACT;\n  address public LONG_CERC20_LOGIC_CONTRACT;\n  address public LONG_CEther_LOGIC_CONTRACT;\n\n  address public USDC_ADDR;\n  address payable public KYBER_ADDR;\n  address public COMPTROLLER_ADDR;\n  address public ORACLE_ADDR;\n  address public CUSDC_ADDR;\n  address public CETH_ADDR;\n\n  constructor(\n    address _shortCERC20LogicContract,\n    address _shortCEtherLogicContract,\n    address _longCERC20LogicContract,\n    address _longCEtherLogicContract,\n    address _usdcAddr,\n    address payable _kyberAddr,\n    address _comptrollerAddr,\n    address _priceOracleAddr,\n    address _cUSDCAddr,\n    address _cETHAddr\n  ) public {\n    SHORT_CERC20_LOGIC_CONTRACT = _shortCERC20LogicContract;\n    SHORT_CEther_LOGIC_CONTRACT = _shortCEtherLogicContract;\n    LONG_CERC20_LOGIC_CONTRACT = _longCERC20LogicContract;\n    LONG_CEther_LOGIC_CONTRACT = _longCEtherLogicContract;\n\n    USDC_ADDR = _usdcAddr;\n    KYBER_ADDR = _kyberAddr;\n    COMPTROLLER_ADDR = _comptrollerAddr;\n    ORACLE_ADDR = _priceOracleAddr;\n    CUSDC_ADDR = _cUSDCAddr;\n    CETH_ADDR = _cETHAddr;\n  }\n\n  function createOrder(\n    address _compoundTokenAddr,\n    uint256 _cycleNumber,\n    uint256 _stake,\n    uint256 _collateralAmountInUSDC,\n    uint256 _loanAmountInUSDC,\n    bool _orderType\n  ) external returns (CompoundOrder) {\n    require(_compoundTokenAddr != address(0));\n\n    CompoundOrder order;\n\n    address payable clone;\n    if (_compoundTokenAddr != CETH_ADDR) {\n      if (_orderType) {\n        // Short CERC20 Order\n        clone = toPayableAddr(createClone(SHORT_CERC20_LOGIC_CONTRACT));\n      } else {\n        // Long CERC20 Order\n        clone = toPayableAddr(createClone(LONG_CERC20_LOGIC_CONTRACT));\n      }\n    } else {\n      if (_orderType) {\n        // Short CEther Order\n        clone = toPayableAddr(createClone(SHORT_CEther_LOGIC_CONTRACT));\n      } else {\n        // Long CEther Order\n        clone = toPayableAddr(createClone(LONG_CEther_LOGIC_CONTRACT));\n      }\n    }\n    order = CompoundOrder(clone);\n    order.init(_compoundTokenAddr, _cycleNumber, _stake, _collateralAmountInUSDC, _loanAmountInUSDC, _orderType,\n      USDC_ADDR, KYBER_ADDR, COMPTROLLER_ADDR, ORACLE_ADDR, CUSDC_ADDR, CETH_ADDR);\n    order.transferOwnership(msg.sender);\n    return order;\n  }\n\n  function getMarketCollateralFactor(address _compoundTokenAddr) external view returns (uint256) {\n    Comptroller troll = Comptroller(COMPTROLLER_ADDR);\n    (, uint256 factor) = troll.markets(_compoundTokenAddr);\n    return factor;\n  }\n\n  function tokenIsListed(address _compoundTokenAddr) external view returns (bool) {\n    Comptroller troll = Comptroller(COMPTROLLER_ADDR);\n    (bool isListed,) = troll.markets(_compoundTokenAddr);\n    return isListed;\n  }\n\n  function toPayableAddr(address _addr) internal pure returns (address payable) {\n    return address(uint160(_addr));\n  }\n}"
    },
    "contracts/derivatives/LongCERC20Order.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./CompoundOrder.sol\";\n\ncontract LongCERC20Order is CompoundOrder {\n  modifier isValidPrice(uint256 _minPrice, uint256 _maxPrice) {\n    // Ensure token's price is between _minPrice and _maxPrice\n    uint256 tokenPrice = ORACLE.getUnderlyingPrice(compoundTokenAddr); // Get the longing token's price in USD\n    require(tokenPrice > 0); // Ensure asset exists on Compound\n    require(tokenPrice >= _minPrice && tokenPrice <= _maxPrice); // Ensure price is within range\n    _;\n  }\n\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidToken(compoundTokenAddr)\n    isValidPrice(_minPrice, _maxPrice)\n  {\n    buyTime = now;\n\n    // Get funds in USDC from PeakDeFiFund\n    usdc.safeTransferFrom(owner(), address(this), collateralAmountInUSDC); // Transfer USDC from PeakDeFiFund\n\n    // Convert received USDC to longing token\n    (,uint256 actualTokenAmount) = __sellUSDCForToken(collateralAmountInUSDC);\n\n    // Enter Compound markets\n    CERC20 market = CERC20(compoundTokenAddr);\n    address[] memory markets = new address[](2);\n    markets[0] = compoundTokenAddr;\n    markets[1] = address(CUSDC);\n    uint[] memory errors = COMPTROLLER.enterMarkets(markets);\n    require(errors[0] == 0 && errors[1] == 0);\n\n    // Get loan from Compound in USDC\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    token.safeApprove(compoundTokenAddr, 0); // Clear token allowance of Compound\n    token.safeApprove(compoundTokenAddr, actualTokenAmount); // Approve token transfer to Compound\n    require(market.mint(actualTokenAmount) == 0); // Transfer tokens into Compound as supply\n    token.safeApprove(compoundTokenAddr, 0); // Clear token allowance of Compound\n    require(CUSDC.borrow(loanAmountInUSDC) == 0);// Take out loan in USDC\n    (bool negLiquidity, ) = getCurrentLiquidityInUSDC();\n    require(!negLiquidity); // Ensure account liquidity is positive\n\n    // Convert borrowed USDC to longing token\n    __sellUSDCForToken(loanAmountInUSDC);\n\n    // Repay leftover USDC to avoid complications\n    if (usdc.balanceOf(address(this)) > 0) {\n      uint256 repayAmount = usdc.balanceOf(address(this));\n      usdc.safeApprove(address(CUSDC), 0);\n      usdc.safeApprove(address(CUSDC), repayAmount);\n      require(CUSDC.repayBorrow(repayAmount) == 0);\n      usdc.safeApprove(address(CUSDC), 0);\n    }\n  }\n\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidPrice(_minPrice, _maxPrice)\n    returns (uint256 _inputAmount, uint256 _outputAmount)\n  {\n    require(buyTime > 0); // Ensure the order has been executed\n    require(isSold == false);\n    isSold = true;\n    \n    // Siphon remaining collateral by repaying x USDC and getting back 1.5x USDC collateral\n    // Repeat to ensure debt is exhausted\n    CERC20 market = CERC20(compoundTokenAddr);\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    for (uint256 i = 0; i < MAX_REPAY_STEPS; i++) {\n      uint256 currentDebt = getCurrentBorrowInUSDC();\n      if (currentDebt > NEGLIGIBLE_DEBT) {\n        // Determine amount to be repaid this step\n        uint256 currentBalance = getCurrentCashInUSDC();\n        uint256 repayAmount = 0; // amount to be repaid in USDC\n        if (currentDebt <= currentBalance) {\n          // Has enough money, repay all debt\n          repayAmount = currentDebt;\n        } else {\n          // Doesn't have enough money, repay whatever we can repay\n          repayAmount = currentBalance;\n        }\n\n        // Repay debt\n        repayLoan(repayAmount);\n      }\n\n      // Withdraw all available liquidity\n      (bool isNeg, uint256 liquidity) = getCurrentLiquidityInUSDC();\n      if (!isNeg) {\n        liquidity = __usdcToToken(compoundTokenAddr, liquidity);\n        uint256 errorCode = market.redeemUnderlying(liquidity.mul(PRECISION.sub(DEFAULT_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n        if (errorCode != 0) {\n          // error\n          // try again with fallback slippage\n          errorCode = market.redeemUnderlying(liquidity.mul(PRECISION.sub(FALLBACK_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          if (errorCode != 0) {\n            // error\n            // try again with max slippage\n            market.redeemUnderlying(liquidity.mul(PRECISION.sub(MAX_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          }\n        }\n      }\n\n      if (currentDebt <= NEGLIGIBLE_DEBT) {\n        break;\n      }\n    }\n\n    // Sell all longing token to USDC\n    __sellTokenForUSDC(token.balanceOf(address(this)));\n\n    // Send USDC back to PeakDeFiFund and return\n    _inputAmount = collateralAmountInUSDC;\n    _outputAmount = usdc.balanceOf(address(this));\n    outputAmount = _outputAmount;\n    usdc.safeTransfer(owner(), usdc.balanceOf(address(this)));\n    uint256 leftoverTokens = token.balanceOf(address(this));\n    if (leftoverTokens > 0) {\n      token.safeTransfer(owner(), leftoverTokens); // Send back potential leftover tokens\n    }\n  }\n\n  // Allows manager to repay loan to avoid liquidation\n  function repayLoan(uint256 _repayAmountInUSDC) public onlyOwner {\n    require(buyTime > 0); // Ensure the order has been executed\n\n    // Convert longing token to USDC\n    uint256 repayAmountInToken = __usdcToToken(compoundTokenAddr, _repayAmountInUSDC);\n    (uint256 actualUSDCAmount,) = __sellTokenForUSDC(repayAmountInToken);\n    \n    // Check if amount is greater than borrow balance\n    uint256 currentDebt = CUSDC.borrowBalanceCurrent(address(this));\n    if (actualUSDCAmount > currentDebt) {\n      actualUSDCAmount = currentDebt;\n    }\n    \n    // Repay loan to Compound\n    usdc.safeApprove(address(CUSDC), 0);\n    usdc.safeApprove(address(CUSDC), actualUSDCAmount);\n    require(CUSDC.repayBorrow(actualUSDCAmount) == 0);\n    usdc.safeApprove(address(CUSDC), 0);\n  }\n\n  function getMarketCollateralFactor() public view returns (uint256) {\n    (, uint256 ratio) = COMPTROLLER.markets(address(compoundTokenAddr));\n    return ratio;\n  }\n\n  function getCurrentCollateralInUSDC() public returns (uint256 _amount) {\n    CERC20 market = CERC20(compoundTokenAddr);\n    uint256 supply = __tokenToUSDC(compoundTokenAddr, market.balanceOf(address(this)).mul(market.exchangeRateCurrent()).div(PRECISION));\n    return supply;\n  }\n\n  function getCurrentBorrowInUSDC() public returns (uint256 _amount) {\n    uint256 borrow = CUSDC.borrowBalanceCurrent(address(this));\n    return borrow;\n  }\n\n  function getCurrentCashInUSDC() public view returns (uint256 _amount) {\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    uint256 cash = __tokenToUSDC(compoundTokenAddr, getBalance(token, address(this)));\n    return cash;\n  }\n}"
    },
    "contracts/derivatives/LongCEtherOrder.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./CompoundOrder.sol\";\n\ncontract LongCEtherOrder is CompoundOrder {\n  modifier isValidPrice(uint256 _minPrice, uint256 _maxPrice) {\n    // Ensure token's price is between _minPrice and _maxPrice\n    uint256 tokenPrice = ORACLE.getUnderlyingPrice(compoundTokenAddr); // Get the longing token's price in USD\n    require(tokenPrice > 0); // Ensure asset exists on Compound\n    require(tokenPrice >= _minPrice && tokenPrice <= _maxPrice); // Ensure price is within range\n    _;\n  }\n\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidToken(compoundTokenAddr)\n    isValidPrice(_minPrice, _maxPrice)\n  {\n    buyTime = now;\n    \n    // Get funds in USDC from PeakDeFiFund\n    usdc.safeTransferFrom(owner(), address(this), collateralAmountInUSDC); // Transfer USDC from PeakDeFiFund\n\n    // Convert received USDC to longing token\n    (,uint256 actualTokenAmount) = __sellUSDCForToken(collateralAmountInUSDC);\n\n    // Enter Compound markets\n    CEther market = CEther(compoundTokenAddr);\n    address[] memory markets = new address[](2);\n    markets[0] = compoundTokenAddr;\n    markets[1] = address(CUSDC);\n    uint[] memory errors = COMPTROLLER.enterMarkets(markets);\n    require(errors[0] == 0 && errors[1] == 0);\n    \n    // Get loan from Compound in USDC\n    market.mint.value(actualTokenAmount)(); // Transfer tokens into Compound as supply\n    require(CUSDC.borrow(loanAmountInUSDC) == 0);// Take out loan in USDC\n    (bool negLiquidity, ) = getCurrentLiquidityInUSDC();\n    require(!negLiquidity); // Ensure account liquidity is positive\n\n    // Convert borrowed USDC to longing token\n    __sellUSDCForToken(loanAmountInUSDC);\n\n    // Repay leftover USDC to avoid complications\n    if (usdc.balanceOf(address(this)) > 0) {\n      uint256 repayAmount = usdc.balanceOf(address(this));\n      usdc.safeApprove(address(CUSDC), 0);\n      usdc.safeApprove(address(CUSDC), repayAmount);\n      require(CUSDC.repayBorrow(repayAmount) == 0);\n      usdc.safeApprove(address(CUSDC), 0);\n    }\n  }\n\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidPrice(_minPrice, _maxPrice)\n    returns (uint256 _inputAmount, uint256 _outputAmount)\n  {\n    require(buyTime > 0); // Ensure the order has been executed\n    require(isSold == false);\n    isSold = true;\n\n    // Siphon remaining collateral by repaying x USDC and getting back 1.5x USDC collateral\n    // Repeat to ensure debt is exhausted\n    CEther market = CEther(compoundTokenAddr);\n    for (uint256 i = 0; i < MAX_REPAY_STEPS; i++) {\n      uint256 currentDebt = getCurrentBorrowInUSDC();\n      if (currentDebt > NEGLIGIBLE_DEBT) {\n        // Determine amount to be repaid this step\n        uint256 currentBalance = getCurrentCashInUSDC();\n        uint256 repayAmount = 0; // amount to be repaid in USDC\n        if (currentDebt <= currentBalance) {\n          // Has enough money, repay all debt\n          repayAmount = currentDebt;\n        } else {\n          // Doesn't have enough money, repay whatever we can repay\n          repayAmount = currentBalance;\n        }\n\n        // Repay debt\n        repayLoan(repayAmount);\n      }\n\n      // Withdraw all available liquidity\n      (bool isNeg, uint256 liquidity) = getCurrentLiquidityInUSDC();\n      if (!isNeg) {\n        liquidity = __usdcToToken(compoundTokenAddr, liquidity);\n        uint256 errorCode = market.redeemUnderlying(liquidity.mul(PRECISION.sub(DEFAULT_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n        if (errorCode != 0) {\n          // error\n          // try again with fallback slippage\n          errorCode = market.redeemUnderlying(liquidity.mul(PRECISION.sub(FALLBACK_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          if (errorCode != 0) {\n            // error\n            // try again with max slippage\n            market.redeemUnderlying(liquidity.mul(PRECISION.sub(MAX_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          }\n        }\n      }\n\n      if (currentDebt <= NEGLIGIBLE_DEBT) {\n        break;\n      }\n    }\n\n    // Sell all longing token to USDC\n    __sellTokenForUSDC(address(this).balance);\n\n    // Send USDC back to PeakDeFiFund and return\n    _inputAmount = collateralAmountInUSDC;\n    _outputAmount = usdc.balanceOf(address(this));\n    outputAmount = _outputAmount;\n    usdc.safeTransfer(owner(), usdc.balanceOf(address(this)));\n    toPayableAddr(owner()).transfer(address(this).balance); // Send back potential leftover tokens\n  }\n\n  // Allows manager to repay loan to avoid liquidation\n  function repayLoan(uint256 _repayAmountInUSDC) public onlyOwner {\n    require(buyTime > 0); // Ensure the order has been executed\n\n    // Convert longing token to USDC\n    uint256 repayAmountInToken = __usdcToToken(compoundTokenAddr, _repayAmountInUSDC);\n    (uint256 actualUSDCAmount,) = __sellTokenForUSDC(repayAmountInToken);\n    \n    // Check if amount is greater than borrow balance\n    uint256 currentDebt = CUSDC.borrowBalanceCurrent(address(this));\n    if (actualUSDCAmount > currentDebt) {\n      actualUSDCAmount = currentDebt;\n    }\n\n    // Repay loan to Compound\n    usdc.safeApprove(address(CUSDC), 0);\n    usdc.safeApprove(address(CUSDC), actualUSDCAmount);\n    require(CUSDC.repayBorrow(actualUSDCAmount) == 0);\n    usdc.safeApprove(address(CUSDC), 0);\n  }\n\n  function getMarketCollateralFactor() public view returns (uint256) {\n    (, uint256 ratio) = COMPTROLLER.markets(address(compoundTokenAddr));\n    return ratio;\n  }\n\n  function getCurrentCollateralInUSDC() public returns (uint256 _amount) {\n    CEther market = CEther(compoundTokenAddr);\n    uint256 supply = __tokenToUSDC(compoundTokenAddr, market.balanceOf(address(this)).mul(market.exchangeRateCurrent()).div(PRECISION));\n    return supply;\n  }\n\n  function getCurrentBorrowInUSDC() public returns (uint256 _amount) {\n    uint256 borrow = CUSDC.borrowBalanceCurrent(address(this));\n    return borrow;\n  }\n\n  function getCurrentCashInUSDC() public view returns (uint256 _amount) {\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    uint256 cash = __tokenToUSDC(compoundTokenAddr, getBalance(token, address(this)));\n    return cash;\n  }\n}"
    },
    "contracts/derivatives/ShortCERC20Order.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./CompoundOrder.sol\";\n\ncontract ShortCERC20Order is CompoundOrder {\n  modifier isValidPrice(uint256 _minPrice, uint256 _maxPrice) {\n    // Ensure token's price is between _minPrice and _maxPrice\n    uint256 tokenPrice = ORACLE.getUnderlyingPrice(compoundTokenAddr); // Get the shorting token's price in USD\n    require(tokenPrice > 0); // Ensure asset exists on Compound\n    require(tokenPrice >= _minPrice && tokenPrice <= _maxPrice); // Ensure price is within range\n    _;\n  }\n\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidToken(compoundTokenAddr)\n    isValidPrice(_minPrice, _maxPrice)\n  {\n    buyTime = now;\n\n    // Get funds in USDC from PeakDeFiFund\n    usdc.safeTransferFrom(owner(), address(this), collateralAmountInUSDC); // Transfer USDC from PeakDeFiFund\n\n    // Enter Compound markets\n    CERC20 market = CERC20(compoundTokenAddr);\n    address[] memory markets = new address[](2);\n    markets[0] = compoundTokenAddr;\n    markets[1] = address(CUSDC);\n    uint[] memory errors = COMPTROLLER.enterMarkets(markets);\n    require(errors[0] == 0 && errors[1] == 0);\n    \n    // Get loan from Compound in tokenAddr\n    uint256 loanAmountInToken = __usdcToToken(compoundTokenAddr, loanAmountInUSDC);\n    usdc.safeApprove(address(CUSDC), 0); // Clear USDC allowance of Compound USDC market\n    usdc.safeApprove(address(CUSDC), collateralAmountInUSDC); // Approve USDC transfer to Compound USDC market\n    require(CUSDC.mint(collateralAmountInUSDC) == 0); // Transfer USDC into Compound as supply\n    usdc.safeApprove(address(CUSDC), 0);\n    require(market.borrow(loanAmountInToken) == 0);// Take out loan\n    (bool negLiquidity, ) = getCurrentLiquidityInUSDC();\n    require(!negLiquidity); // Ensure account liquidity is positive\n\n    // Convert loaned tokens to USDC\n    (uint256 actualUSDCAmount,) = __sellTokenForUSDC(loanAmountInToken);\n    loanAmountInUSDC = actualUSDCAmount; // Change loan amount to actual USDC received\n\n    // Repay leftover tokens to avoid complications\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    if (token.balanceOf(address(this)) > 0) {\n      uint256 repayAmount = token.balanceOf(address(this));\n      token.safeApprove(compoundTokenAddr, 0);\n      token.safeApprove(compoundTokenAddr, repayAmount);\n      require(market.repayBorrow(repayAmount) == 0);\n      token.safeApprove(compoundTokenAddr, 0);\n    }\n  }\n\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidPrice(_minPrice, _maxPrice)\n    returns (uint256 _inputAmount, uint256 _outputAmount)\n  {\n    require(buyTime > 0); // Ensure the order has been executed\n    require(isSold == false);\n    isSold = true;\n\n    // Siphon remaining collateral by repaying x USDC and getting back 1.5x USDC collateral\n    // Repeat to ensure debt is exhausted\n    for (uint256 i = 0; i < MAX_REPAY_STEPS; i++) {\n      uint256 currentDebt = getCurrentBorrowInUSDC();\n      if (currentDebt > NEGLIGIBLE_DEBT) {\n        // Determine amount to be repaid this step\n        uint256 currentBalance = getCurrentCashInUSDC();\n        uint256 repayAmount = 0; // amount to be repaid in USDC\n        if (currentDebt <= currentBalance) {\n          // Has enough money, repay all debt\n          repayAmount = currentDebt;\n        } else {\n          // Doesn't have enough money, repay whatever we can repay\n          repayAmount = currentBalance;\n        }\n\n        // Repay debt\n        repayLoan(repayAmount);\n      }\n\n      // Withdraw all available liquidity\n      (bool isNeg, uint256 liquidity) = getCurrentLiquidityInUSDC();\n      if (!isNeg) {\n        uint256 errorCode = CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(DEFAULT_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n        if (errorCode != 0) {\n          // error\n          // try again with fallback slippage\n          errorCode = CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(FALLBACK_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          if (errorCode != 0) {\n            // error\n            // try again with max slippage\n            CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(MAX_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          }\n        }\n      }\n\n      if (currentDebt <= NEGLIGIBLE_DEBT) {\n        break;\n      }\n    }\n\n    // Send USDC back to PeakDeFiFund and return\n    _inputAmount = collateralAmountInUSDC;\n    _outputAmount = usdc.balanceOf(address(this));\n    outputAmount = _outputAmount;\n    usdc.safeTransfer(owner(), usdc.balanceOf(address(this)));\n  }\n\n  // Allows manager to repay loan to avoid liquidation\n  function repayLoan(uint256 _repayAmountInUSDC) public onlyOwner {\n    require(buyTime > 0); // Ensure the order has been executed\n\n    // Convert USDC to shorting token\n    (,uint256 actualTokenAmount) = __sellUSDCForToken(_repayAmountInUSDC);\n\n    // Check if amount is greater than borrow balance\n    CERC20 market = CERC20(compoundTokenAddr);\n    uint256 currentDebt = market.borrowBalanceCurrent(address(this));\n    if (actualTokenAmount > currentDebt) {\n      actualTokenAmount = currentDebt;\n    }\n\n    // Repay loan to Compound\n    ERC20Detailed token = __underlyingToken(compoundTokenAddr);\n    token.safeApprove(compoundTokenAddr, 0);\n    token.safeApprove(compoundTokenAddr, actualTokenAmount);\n    require(market.repayBorrow(actualTokenAmount) == 0);\n    token.safeApprove(compoundTokenAddr, 0);\n  }\n\n  function getMarketCollateralFactor() public view returns (uint256) {\n    (, uint256 ratio) = COMPTROLLER.markets(address(CUSDC));\n    return ratio;\n  }\n\n  function getCurrentCollateralInUSDC() public returns (uint256 _amount) {\n    uint256 supply = CUSDC.balanceOf(address(this)).mul(CUSDC.exchangeRateCurrent()).div(PRECISION);\n    return supply;\n  }\n\n  function getCurrentBorrowInUSDC() public returns (uint256 _amount) {\n    CERC20 market = CERC20(compoundTokenAddr);\n    uint256 borrow = __tokenToUSDC(compoundTokenAddr, market.borrowBalanceCurrent(address(this)));\n    return borrow;\n  }\n\n  function getCurrentCashInUSDC() public view returns (uint256 _amount) {\n    uint256 cash = getBalance(usdc, address(this));\n    return cash;\n  }\n}"
    },
    "contracts/derivatives/ShortCEtherOrder.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./CompoundOrder.sol\";\n\ncontract ShortCEtherOrder is CompoundOrder {\n  modifier isValidPrice(uint256 _minPrice, uint256 _maxPrice) {\n    // Ensure token's price is between _minPrice and _maxPrice\n    uint256 tokenPrice = ORACLE.getUnderlyingPrice(compoundTokenAddr); // Get the shorting token's price in USD\n    require(tokenPrice > 0); // Ensure asset exists on Compound\n    require(tokenPrice >= _minPrice && tokenPrice <= _maxPrice); // Ensure price is within range\n    _;\n  }\n\n  function executeOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidToken(compoundTokenAddr)\n    isValidPrice(_minPrice, _maxPrice)\n  {\n    buyTime = now;\n\n    // Get funds in USDC from PeakDeFiFund\n    usdc.safeTransferFrom(owner(), address(this), collateralAmountInUSDC); // Transfer USDC from PeakDeFiFund\n    \n    // Enter Compound markets\n    CEther market = CEther(compoundTokenAddr);\n    address[] memory markets = new address[](2);\n    markets[0] = compoundTokenAddr;\n    markets[1] = address(CUSDC);\n    uint[] memory errors = COMPTROLLER.enterMarkets(markets);\n    require(errors[0] == 0 && errors[1] == 0);\n\n    // Get loan from Compound in tokenAddr\n    uint256 loanAmountInToken = __usdcToToken(compoundTokenAddr, loanAmountInUSDC);\n    usdc.safeApprove(address(CUSDC), 0); // Clear USDC allowance of Compound USDC market\n    usdc.safeApprove(address(CUSDC), collateralAmountInUSDC); // Approve USDC transfer to Compound USDC market\n    require(CUSDC.mint(collateralAmountInUSDC) == 0); // Transfer USDC into Compound as supply\n    usdc.safeApprove(address(CUSDC), 0);\n    require(market.borrow(loanAmountInToken) == 0);// Take out loan\n    (bool negLiquidity, ) = getCurrentLiquidityInUSDC();\n    require(!negLiquidity); // Ensure account liquidity is positive\n\n    // Convert loaned tokens to USDC\n    (uint256 actualUSDCAmount,) = __sellTokenForUSDC(loanAmountInToken);\n    loanAmountInUSDC = actualUSDCAmount; // Change loan amount to actual USDC received\n\n    // Repay leftover tokens to avoid complications\n    if (address(this).balance > 0) {\n      uint256 repayAmount = address(this).balance;\n      market.repayBorrow.value(repayAmount)();\n    }\n  }\n\n  function sellOrder(uint256 _minPrice, uint256 _maxPrice)\n    public\n    onlyOwner\n    isValidPrice(_minPrice, _maxPrice)\n    returns (uint256 _inputAmount, uint256 _outputAmount)\n  {\n    require(buyTime > 0); // Ensure the order has been executed\n    require(isSold == false);\n    isSold = true;\n\n    // Siphon remaining collateral by repaying x USDC and getting back 1.5x USDC collateral\n    // Repeat to ensure debt is exhausted\n    for (uint256 i = 0; i < MAX_REPAY_STEPS; i = i++) {\n      uint256 currentDebt = getCurrentBorrowInUSDC();\n      if (currentDebt > NEGLIGIBLE_DEBT) {\n        // Determine amount to be repaid this step\n        uint256 currentBalance = getCurrentCashInUSDC();\n        uint256 repayAmount = 0; // amount to be repaid in USDC\n        if (currentDebt <= currentBalance) {\n          // Has enough money, repay all debt\n          repayAmount = currentDebt;\n        } else {\n          // Doesn't have enough money, repay whatever we can repay\n          repayAmount = currentBalance;\n        }\n\n        // Repay debt\n        repayLoan(repayAmount);\n      }\n\n      // Withdraw all available liquidity\n      (bool isNeg, uint256 liquidity) = getCurrentLiquidityInUSDC();\n      if (!isNeg) {\n        uint256 errorCode = CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(DEFAULT_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n        if (errorCode != 0) {\n          // error\n          // try again with fallback slippage\n          errorCode = CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(FALLBACK_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          if (errorCode != 0) {\n            // error\n            // try again with max slippage\n            CUSDC.redeemUnderlying(liquidity.mul(PRECISION.sub(MAX_LIQUIDITY_SLIPPAGE)).div(PRECISION));\n          }\n        }\n      }\n\n      if (currentDebt <= NEGLIGIBLE_DEBT) {\n        break;\n      }\n    }\n\n    // Send USDC back to PeakDeFiFund and return\n    _inputAmount = collateralAmountInUSDC;\n    _outputAmount = usdc.balanceOf(address(this));\n    outputAmount = _outputAmount;\n    usdc.safeTransfer(owner(), usdc.balanceOf(address(this)));\n  }\n\n  // Allows manager to repay loan to avoid liquidation\n  function repayLoan(uint256 _repayAmountInUSDC) public onlyOwner {\n    require(buyTime > 0); // Ensure the order has been executed\n\n    // Convert USDC to shorting token\n    (,uint256 actualTokenAmount) = __sellUSDCForToken(_repayAmountInUSDC);\n\n    // Check if amount is greater than borrow balance\n    CEther market = CEther(compoundTokenAddr);\n    uint256 currentDebt = market.borrowBalanceCurrent(address(this));\n    if (actualTokenAmount > currentDebt) {\n      actualTokenAmount = currentDebt;\n    }\n\n    // Repay loan to Compound\n    market.repayBorrow.value(actualTokenAmount)();\n  }\n\n  function getMarketCollateralFactor() public view returns (uint256) {\n    (, uint256 ratio) = COMPTROLLER.markets(address(CUSDC));\n    return ratio;\n  }\n\n  function getCurrentCollateralInUSDC() public returns (uint256 _amount) {\n    uint256 supply = CUSDC.balanceOf(address(this)).mul(CUSDC.exchangeRateCurrent()).div(PRECISION);\n    return supply;\n  }\n\n  function getCurrentBorrowInUSDC() public returns (uint256 _amount) {\n    CEther market = CEther(compoundTokenAddr);\n    uint256 borrow = __tokenToUSDC(compoundTokenAddr, market.borrowBalanceCurrent(address(this)));\n    return borrow;\n  }\n\n  function getCurrentCashInUSDC() public view returns (uint256 _amount) {\n    uint256 cash = getBalance(usdc, address(this));\n    return cash;\n  }\n}"
    },
    "contracts/lib/CloneFactory.sol": {
      "content": "pragma solidity 0.5.17;\n\n/*\nThe MIT License (MIT)\n\nCopyright (c) 2018 Murray Software, LLC.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n//solhint-disable max-line-length\n//solhint-disable no-inline-assembly\n\ncontract CloneFactory {\n\n  function createClone(address target) internal returns (address result) {\n    bytes20 targetBytes = bytes20(target);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n      mstore(add(clone, 0x14), targetBytes)\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n      result := create(0, clone, 0x37)\n    }\n  }\n\n  function isClone(address target, address query) internal view returns (bool result) {\n    bytes20 targetBytes = bytes20(target);\n    assembly {\n      let clone := mload(0x40)\n      mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n      mstore(add(clone, 0xa), targetBytes)\n      mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n      let other := add(clone, 0x40)\n      extcodecopy(query, other, 0, 0x2d)\n      result := and(\n        eq(mload(clone), mload(other)),\n        eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n      )\n    }\n  }\n}\n"
    },
    "contracts/interfaces/IMiniMeToken.sol": {
      "content": "pragma solidity 0.5.17;\n\ninterface IMiniMeToken {\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function totalSupply() external view returns(uint);\n    function generateTokens(address _owner, uint _amount) external returns (bool);\n    function destroyTokens(address _owner, uint _amount) external returns (bool);\n    function totalSupplyAt(uint _blockNumber) external view returns(uint);\n    function balanceOfAt(address _holder, uint _blockNumber) external view returns (uint);\n    function transferOwnership(address newOwner) external;\n}"
    },
    "contracts/lib/ReentrancyGuard.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n * metering changes introduced in the Istanbul hardfork.\n */\ncontract ReentrancyGuard {\n    bool private _notEntered;\n\n    function __initReentrancyGuard() internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n"
    },
    "contracts/Migrations.sol": {
      "content": "pragma solidity 0.5.17;\n\ncontract Migrations {\n  address public owner;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    if (msg.sender == owner) _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n\n  function upgrade(address new_address) public restricted {\n    Migrations upgraded = Migrations(new_address);\n    upgraded.setCompleted(last_completed_migration);\n  }\n}\n"
    },
    "contracts/peak/IUniswapOracle.sol": {
      "content": "pragma solidity 0.5.17;\n\n// interface for contract_v6/UniswapOracle.sol\ninterface IUniswapOracle {\n    function update() external returns (bool success);\n\n    function consult(address token, uint256 amountIn)\n        external\n        view\n        returns (uint256 amountOut);\n}\n"
    },
    "contracts/peak/PeakToken.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\n\ncontract PeakToken is ERC20, ERC20Detailed, ERC20Capped, ERC20Burnable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 cap\n    ) ERC20Detailed(name, symbol, decimals) ERC20Capped(cap) public {}\n}"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Capped.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./ERC20Mintable.sol\";\n\n/**\n * @dev Extension of {ERC20Mintable} that adds a cap to the supply of tokens.\n */\ncontract ERC20Capped is ERC20Mintable {\n    uint256 private _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor (uint256 cap) public {\n        require(cap > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20Mintable-mint}.\n     *\n     * Requirements:\n     *\n     * - `value` must not cause the total supply to go over the cap.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(totalSupply().add(value) <= _cap, \"ERC20Capped: cap exceeded\");\n        super._mint(account, value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\nimport \"../../access/roles/MinterRole.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n * which have permission to mint (create) new tokens as they see fit.\n *\n * At construction, the deployer of the contract is the only minter.\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n    /**\n     * @dev See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the {MinterRole}.\n     */\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n        _mint(account, amount);\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/roles/MinterRole.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"../Roles.sol\";\n\ncontract MinterRole is Context {\n    using Roles for Roles.Role;\n\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    Roles.Role private _minters;\n\n    constructor () internal {\n        _addMinter(_msgSender());\n    }\n\n    modifier onlyMinter() {\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\n        _;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return _minters.has(account);\n    }\n\n    function addMinter(address account) public onlyMinter {\n        _addMinter(account);\n    }\n\n    function renounceMinter() public {\n        _removeMinter(_msgSender());\n    }\n\n    function _addMinter(address account) internal {\n        _minters.add(account);\n        emit MinterAdded(account);\n    }\n\n    function _removeMinter(address account) internal {\n        _minters.remove(account);\n        emit MinterRemoved(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Roles.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n    struct Role {\n        mapping (address => bool) bearer;\n    }\n\n    /**\n     * @dev Give an account access to this role.\n     */\n    function add(Role storage role, address account) internal {\n        require(!has(role, account), \"Roles: account already has role\");\n        role.bearer[account] = true;\n    }\n\n    /**\n     * @dev Remove an account's access to this role.\n     */\n    function remove(Role storage role, address account) internal {\n        require(has(role, account), \"Roles: account does not have role\");\n        role.bearer[account] = false;\n    }\n\n    /**\n     * @dev Check if an account has this role.\n     * @return bool\n     */\n    function has(Role storage role, address account) internal view returns (bool) {\n        require(account != address(0), \"Roles: account is the zero address\");\n        return role.bearer[account];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\ncontract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev See {ERC20-_burnFrom}.\n     */\n    function burnFrom(address account, uint256 amount) public {\n        _burnFrom(account, amount);\n    }\n}\n"
    },
    "contracts/peak/reward/PeakReward.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/roles/SignerRole.sol\";\nimport \"../staking/PeakStaking.sol\";\nimport \"../PeakToken.sol\";\nimport \"../IUniswapOracle.sol\";\n\ncontract PeakReward is SignerRole {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    event Register(address user, address referrer);\n    event RankChange(address user, uint256 oldRank, uint256 newRank);\n    event PayCommission(\n        address referrer,\n        address recipient,\n        address token,\n        uint256 amount,\n        uint8 level\n    );\n    event ChangedCareerValue(address user, uint256 changeAmount, bool positive);\n    event ReceiveRankReward(address user, uint256 peakReward);\n\n    modifier regUser(address user) {\n        if (!isUser[user]) {\n            isUser[user] = true;\n            emit Register(user, address(0));\n        }\n        _;\n    }\n\n    uint256 public constant PEAK_MINT_CAP = 5 * 10**15; // 50 million PEAK\n\n    uint256 internal constant COMMISSION_RATE = 20 * (10**16); // 20%\n    uint256 internal constant PEAK_PRECISION = 10**8;\n    uint256 internal constant USDC_PRECISION = 10**6;\n    uint8 internal constant COMMISSION_LEVELS = 8;\n\n    mapping(address => address) public referrerOf;\n    mapping(address => bool) public isUser;\n    mapping(address => uint256) public careerValue; // AKA DSV\n    mapping(address => uint256) public rankOf;\n    mapping(uint256 => mapping(uint256 => uint256)) public rankReward; // (beforeRank, afterRank) => rewardInPeak\n    mapping(address => mapping(uint256 => uint256)) public downlineRanks; // (referrer, rank) => numReferredUsersWithRank\n\n    uint256[] public commissionPercentages;\n    uint256[] public commissionStakeRequirements;\n    uint256 public mintedPeakTokens;\n\n    address public marketPeakWallet;\n    PeakStaking public peakStaking;\n    PeakToken public peakToken;\n    address public stablecoin;\n    IUniswapOracle public oracle;\n\n    constructor(\n        address _marketPeakWallet,\n        address _peakStaking,\n        address _peakToken,\n        address _stablecoin,\n        address _oracle\n    ) public {\n        // initialize commission percentages for each level\n        commissionPercentages.push(10 * (10**16)); // 10%\n        commissionPercentages.push(4 * (10**16)); // 4%\n        commissionPercentages.push(2 * (10**16)); // 2%\n        commissionPercentages.push(1 * (10**16)); // 1%\n        commissionPercentages.push(1 * (10**16)); // 1%\n        commissionPercentages.push(1 * (10**16)); // 1%\n        commissionPercentages.push(5 * (10**15)); // 0.5%\n        commissionPercentages.push(5 * (10**15)); // 0.5%\n\n        // initialize commission stake requirements for each level\n        commissionStakeRequirements.push(0);\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(2000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(4000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(6000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(7000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(8000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(9000));\n        commissionStakeRequirements.push(PEAK_PRECISION.mul(10000));\n\n        // initialize rank rewards\n        for (uint256 i = 0; i < 8; i = i.add(1)) {\n            uint256 rewardInUSDC = 0;\n            for (uint256 j = i.add(1); j <= 8; j = j.add(1)) {\n                if (j == 1) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(100));\n                } else if (j == 2) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(300));\n                } else if (j == 3) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(600));\n                } else if (j == 4) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(1200));\n                } else if (j == 5) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(2400));\n                } else if (j == 6) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(7500));\n                } else if (j == 7) {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(15000));\n                } else {\n                    rewardInUSDC = rewardInUSDC.add(USDC_PRECISION.mul(50000));\n                }\n                rankReward[i][j] = rewardInUSDC;\n            }\n        }\n\n        marketPeakWallet = _marketPeakWallet;\n        peakStaking = PeakStaking(_peakStaking);\n        peakToken = PeakToken(_peakToken);\n        stablecoin = _stablecoin;\n        oracle = IUniswapOracle(_oracle);\n    }\n\n      /**\n        @notice Registers a group of referrals relationship.\n        @param users The array of users\n        @param referrers The group of referrers of `users`\n     */\n    function multiRefer(address[] calldata users, address[] calldata referrers) external onlySigner {\n      require(users.length == referrers.length, \"PeakReward: arrays length are not equal\");\n      for (uint256 i = 0; i < users.length; i++) {\n        refer(users[i], referrers[i]);\n      }\n    }\n\n    /**\n        @notice Registers a referral relationship\n        @param user The user who is being referred\n        @param referrer The referrer of `user`\n     */\n    function refer(address user, address referrer) public onlySigner {\n        require(!isUser[user], \"PeakReward: referred is already a user\");\n        require(user != referrer, \"PeakReward: can't refer self\");\n        require(\n            user != address(0) && referrer != address(0),\n            \"PeakReward: 0 address\"\n        );\n\n        isUser[user] = true;\n        isUser[referrer] = true;\n\n        referrerOf[user] = referrer;\n        downlineRanks[referrer][0] = downlineRanks[referrer][0].add(1);\n\n        emit Register(user, referrer);\n    }\n\n    function canRefer(address user, address referrer)\n        public\n        view\n        returns (bool)\n    {\n        return\n            !isUser[user] &&\n            user != referrer &&\n            user != address(0) &&\n            referrer != address(0);\n    }\n\n    /**\n        @notice Distributes commissions to a referrer and their referrers\n        @param referrer The referrer who will receive commission\n        @param commissionToken The ERC20 token that the commission is paid in\n        @param rawCommission The raw commission that will be distributed amongst referrers\n        @param returnLeftovers If true, leftover commission is returned to the sender. If false, leftovers will be paid to MarketPeak.\n     */\n    function payCommission(\n        address referrer,\n        address commissionToken,\n        uint256 rawCommission,\n        bool returnLeftovers\n    ) public regUser(referrer) onlySigner returns (uint256 leftoverAmount) {\n        // transfer the raw commission from `msg.sender`\n        IERC20 token = IERC20(commissionToken);\n        token.safeTransferFrom(msg.sender, address(this), rawCommission);\n\n        // payout commissions to referrers of different levels\n        address ptr = referrer;\n        uint256 commissionLeft = rawCommission;\n        uint8 i = 0;\n        while (ptr != address(0) && i < COMMISSION_LEVELS) {\n            if (_peakStakeOf(ptr) >= commissionStakeRequirements[i]) {\n                // referrer has enough stake, give commission\n                uint256 com = rawCommission.mul(commissionPercentages[i]).div(\n                    COMMISSION_RATE\n                );\n                if (com > commissionLeft) {\n                    com = commissionLeft;\n                }\n                token.safeTransfer(ptr, com);\n                commissionLeft = commissionLeft.sub(com);\n                if (commissionToken == address(peakToken)) {\n                    incrementCareerValueInPeak(ptr, com);\n                } else if (commissionToken == stablecoin) {\n                    incrementCareerValueInUsdc(ptr, com);\n                }\n                emit PayCommission(referrer, ptr, commissionToken, com, i);\n            }\n\n            ptr = referrerOf[ptr];\n            i += 1;\n        }\n\n        // handle leftovers\n        if (returnLeftovers) {\n            // return leftovers to `msg.sender`\n            token.safeTransfer(msg.sender, commissionLeft);\n            return commissionLeft;\n        } else {\n            // give leftovers to MarketPeak wallet\n            token.safeTransfer(marketPeakWallet, commissionLeft);\n            return 0;\n        }\n    }\n\n    /**\n        @notice Increments a user's career value\n        @param user The user\n        @param incCV The CV increase amount, in Usdc\n     */\n    function incrementCareerValueInUsdc(address user, uint256 incCV)\n        public\n        regUser(user)\n        onlySigner\n    {\n        careerValue[user] = careerValue[user].add(incCV);\n        emit ChangedCareerValue(user, incCV, true);\n    }\n\n    /**\n        @notice Increments a user's career value\n        @param user The user\n        @param incCVInPeak The CV increase amount, in PEAK tokens\n     */\n    function incrementCareerValueInPeak(address user, uint256 incCVInPeak)\n        public\n        regUser(user)\n        onlySigner\n    {\n        uint256 peakPriceInUsdc = _getPeakPriceInUsdc();\n        uint256 incCVInUsdc = incCVInPeak.mul(peakPriceInUsdc).div(\n            PEAK_PRECISION\n        );\n        careerValue[user] = careerValue[user].add(incCVInUsdc);\n        emit ChangedCareerValue(user, incCVInUsdc, true);\n    }\n\n    /**\n        @notice Returns a user's rank in the PeakDeFi system based only on career value\n        @param user The user whose rank will be queried\n     */\n    function cvRankOf(address user) public view returns (uint256) {\n        uint256 cv = careerValue[user];\n        if (cv < USDC_PRECISION.mul(100)) {\n            return 0;\n        } else if (cv < USDC_PRECISION.mul(250)) {\n            return 1;\n        } else if (cv < USDC_PRECISION.mul(750)) {\n            return 2;\n        } else if (cv < USDC_PRECISION.mul(1500)) {\n            return 3;\n        } else if (cv < USDC_PRECISION.mul(3000)) {\n            return 4;\n        } else if (cv < USDC_PRECISION.mul(10000)) {\n            return 5;\n        } else if (cv < USDC_PRECISION.mul(50000)) {\n            return 6;\n        } else if (cv < USDC_PRECISION.mul(150000)) {\n            return 7;\n        } else {\n            return 8;\n        }\n    }\n\n    function rankUp(address user) external {\n        // verify rank up conditions\n        uint256 currentRank = rankOf[user];\n        uint256 cvRank = cvRankOf(user);\n        require(cvRank > currentRank, \"PeakReward: career value is not enough!\");\n        require(downlineRanks[user][currentRank] >= 2 || currentRank == 0, \"PeakReward: downlines count and requirement not passed!\");\n\n        // Target rank always should be +1 rank from current rank\n        uint256 targetRank = currentRank + 1;\n\n        // increase user rank\n        rankOf[user] = targetRank;\n        emit RankChange(user, currentRank, targetRank);\n\n        address referrer = referrerOf[user];\n        if (referrer != address(0)) {\n            downlineRanks[referrer][targetRank] = downlineRanks[referrer][targetRank]\n                .add(1);\n            downlineRanks[referrer][currentRank] = downlineRanks[referrer][currentRank]\n                .sub(1);\n        }\n\n        // give user rank reward\n        uint256 rewardInPeak = rankReward[currentRank][targetRank]\n            .mul(PEAK_PRECISION)\n            .div(_getPeakPriceInUsdc());\n        if (mintedPeakTokens.add(rewardInPeak) <= PEAK_MINT_CAP) {\n            // mint if under cap, do nothing if over cap\n            mintedPeakTokens = mintedPeakTokens.add(rewardInPeak);\n            peakToken.mint(user, rewardInPeak);\n            emit ReceiveRankReward(user, rewardInPeak);\n        }\n    }\n\n    function canRankUp(address user) external view returns (bool) {\n        uint256 currentRank = rankOf[user];\n        uint256 cvRank = cvRankOf(user);\n        return\n            (cvRank > currentRank) &&\n            (downlineRanks[user][currentRank] >= 2 || currentRank == 0);\n    }\n\n    /**\n        @notice Returns a user's current staked PEAK amount, scaled by `PEAK_PRECISION`.\n        @param user The user whose stake will be queried\n     */\n    function _peakStakeOf(address user) internal view returns (uint256) {\n        return peakStaking.userStakeAmount(user);\n    }\n\n    /**\n        @notice Returns the price of PEAK token in Usdc, scaled by `USDC_PRECISION`.\n     */\n    function _getPeakPriceInUsdc() internal returns (uint256) {\n        oracle.update();\n        uint256 priceInUSDC = oracle.consult(address(peakToken), PEAK_PRECISION);\n        if (priceInUSDC == 0) {\n            return USDC_PRECISION.mul(3).div(10);\n        }\n        return priceInUSDC;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/roles/SignerRole.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"../Roles.sol\";\n\ncontract SignerRole is Context {\n    using Roles for Roles.Role;\n\n    event SignerAdded(address indexed account);\n    event SignerRemoved(address indexed account);\n\n    Roles.Role private _signers;\n\n    constructor () internal {\n        _addSigner(_msgSender());\n    }\n\n    modifier onlySigner() {\n        require(isSigner(_msgSender()), \"SignerRole: caller does not have the Signer role\");\n        _;\n    }\n\n    function isSigner(address account) public view returns (bool) {\n        return _signers.has(account);\n    }\n\n    function addSigner(address account) public onlySigner {\n        _addSigner(account);\n    }\n\n    function renounceSigner() public {\n        _removeSigner(_msgSender());\n    }\n\n    function _addSigner(address account) internal {\n        _signers.add(account);\n        emit SignerAdded(account);\n    }\n\n    function _removeSigner(address account) internal {\n        _signers.remove(account);\n        emit SignerRemoved(account);\n    }\n}\n"
    },
    "contracts/peak/staking/PeakStaking.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../reward/PeakReward.sol\";\nimport \"../PeakToken.sol\";\n\ncontract PeakStaking {\n    using SafeMath for uint256;\n    using SafeERC20 for PeakToken;\n\n    event CreateStake(\n        uint256 idx,\n        address user,\n        address referrer,\n        uint256 stakeAmount,\n        uint256 stakeTimeInDays,\n        uint256 interestAmount\n    );\n    event ReceiveStakeReward(uint256 idx, address user, uint256 rewardAmount);\n    event WithdrawReward(uint256 idx, address user, uint256 rewardAmount);\n    event WithdrawStake(uint256 idx, address user);\n\n    uint256 internal constant PRECISION = 10**18;\n    uint256 internal constant PEAK_PRECISION = 10**8;\n    uint256 internal constant INTEREST_SLOPE = 2 * (10**8); // Interest rate factor drops to 0 at 5B mintedPeakTokens\n    uint256 internal constant BIGGER_BONUS_DIVISOR = 10**15; // biggerBonus = stakeAmount / (10 million peak)\n    uint256 internal constant MAX_BIGGER_BONUS = 10**17; // biggerBonus <= 10%\n    uint256 internal constant DAILY_BASE_REWARD = 15 * (10**14); // dailyBaseReward = 0.0015\n    uint256 internal constant DAILY_GROWING_REWARD = 10**12; // dailyGrowingReward = 1e-6\n    uint256 internal constant MAX_STAKE_PERIOD = 1000; // Max staking time is 1000 days\n    uint256 internal constant MIN_STAKE_PERIOD = 10; // Min staking time is 10 days\n    uint256 internal constant DAY_IN_SECONDS = 86400;\n    uint256 internal constant COMMISSION_RATE = 20 * (10**16); // 20%\n    uint256 internal constant REFERRAL_STAKER_BONUS = 3 * (10**16); // 3%\n    uint256 internal constant YEAR_IN_DAYS = 365;\n    uint256 public constant PEAK_MINT_CAP = 7 * 10**16; // 700 million PEAK\n\n    struct Stake {\n        address staker;\n        uint256 stakeAmount;\n        uint256 interestAmount;\n        uint256 withdrawnInterestAmount;\n        uint256 stakeTimestamp;\n        uint256 stakeTimeInDays;\n        bool active;\n    }\n    Stake[] public stakeList;\n    mapping(address => uint256) public userStakeAmount;\n    uint256 public mintedPeakTokens;\n    bool public initialized;\n\n    PeakToken public peakToken;\n    PeakReward public peakReward;\n\n    constructor(address _peakToken) public {\n        peakToken = PeakToken(_peakToken);\n    }\n\n    function init(address _peakReward) public {\n        require(!initialized, \"PeakStaking: Already initialized\");\n        initialized = true;\n\n        peakReward = PeakReward(_peakReward);\n    }\n\n    function stake(\n        uint256 stakeAmount,\n        uint256 stakeTimeInDays,\n        address referrer\n    ) public returns (uint256 stakeIdx) {\n        require(\n            stakeTimeInDays >= MIN_STAKE_PERIOD,\n            \"PeakStaking: stakeTimeInDays < MIN_STAKE_PERIOD\"\n        );\n        require(\n            stakeTimeInDays <= MAX_STAKE_PERIOD,\n            \"PeakStaking: stakeTimeInDays > MAX_STAKE_PERIOD\"\n        );\n\n        // record stake\n        uint256 interestAmount = getInterestAmount(\n            stakeAmount,\n            stakeTimeInDays\n        );\n        stakeIdx = stakeList.length;\n        stakeList.push(\n            Stake({\n                staker: msg.sender,\n                stakeAmount: stakeAmount,\n                interestAmount: interestAmount,\n                withdrawnInterestAmount: 0,\n                stakeTimestamp: now,\n                stakeTimeInDays: stakeTimeInDays,\n                active: true\n            })\n        );\n        mintedPeakTokens = mintedPeakTokens.add(interestAmount);\n        userStakeAmount[msg.sender] = userStakeAmount[msg.sender].add(\n            stakeAmount\n        );\n\n        // transfer PEAK from msg.sender\n        peakToken.safeTransferFrom(msg.sender, address(this), stakeAmount);\n\n        // mint PEAK interest\n        peakToken.mint(address(this), interestAmount);\n\n        // handle referral\n        if (peakReward.canRefer(msg.sender, referrer)) {\n            peakReward.refer(msg.sender, referrer);\n        }\n        address actualReferrer = peakReward.referrerOf(msg.sender);\n        if (actualReferrer != address(0)) {\n            // pay referral bonus to referrer\n            uint256 rawCommission = interestAmount.mul(COMMISSION_RATE).div(\n                PRECISION\n            );\n            peakToken.mint(address(this), rawCommission);\n            peakToken.safeApprove(address(peakReward), rawCommission);\n            uint256 leftoverAmount = peakReward.payCommission(\n                actualReferrer,\n                address(peakToken),\n                rawCommission,\n                true\n            );\n            peakToken.burn(leftoverAmount);\n\n            // pay referral bonus to staker\n            uint256 referralStakerBonus = interestAmount\n                .mul(REFERRAL_STAKER_BONUS)\n                .div(PRECISION);\n            peakToken.mint(msg.sender, referralStakerBonus);\n\n            mintedPeakTokens = mintedPeakTokens.add(\n                rawCommission.sub(leftoverAmount).add(referralStakerBonus)\n            );\n\n            emit ReceiveStakeReward(stakeIdx, msg.sender, referralStakerBonus);\n        }\n\n        require(mintedPeakTokens <= PEAK_MINT_CAP, \"PeakStaking: reached cap\");\n\n        emit CreateStake(\n            stakeIdx,\n            msg.sender,\n            actualReferrer,\n            stakeAmount,\n            stakeTimeInDays,\n            interestAmount\n        );\n    }\n\n    function withdraw(uint256 stakeIdx) public {\n        Stake storage stakeObj = stakeList[stakeIdx];\n        require(\n            stakeObj.staker == msg.sender,\n            \"PeakStaking: Sender not staker\"\n        );\n        require(stakeObj.active, \"PeakStaking: Not active\");\n\n        // calculate amount that can be withdrawn\n        uint256 stakeTimeInSeconds = stakeObj.stakeTimeInDays.mul(\n            DAY_IN_SECONDS\n        );\n        uint256 withdrawAmount;\n        if (now >= stakeObj.stakeTimestamp.add(stakeTimeInSeconds)) {\n            // matured, withdraw all\n            withdrawAmount = stakeObj\n                .stakeAmount\n                .add(stakeObj.interestAmount)\n                .sub(stakeObj.withdrawnInterestAmount);\n            stakeObj.active = false;\n            stakeObj.withdrawnInterestAmount = stakeObj.interestAmount;\n            userStakeAmount[msg.sender] = userStakeAmount[msg.sender].sub(\n                stakeObj.stakeAmount\n            );\n\n            emit WithdrawReward(\n                stakeIdx,\n                msg.sender,\n                stakeObj.interestAmount.sub(stakeObj.withdrawnInterestAmount)\n            );\n            emit WithdrawStake(stakeIdx, msg.sender);\n        } else {\n            // not mature, partial withdraw\n            withdrawAmount = stakeObj\n                .interestAmount\n                .mul(uint256(now).sub(stakeObj.stakeTimestamp))\n                .div(stakeTimeInSeconds)\n                .sub(stakeObj.withdrawnInterestAmount);\n\n            // record withdrawal\n            stakeObj.withdrawnInterestAmount = stakeObj\n                .withdrawnInterestAmount\n                .add(withdrawAmount);\n\n            emit WithdrawReward(stakeIdx, msg.sender, withdrawAmount);\n        }\n\n        // withdraw interest to sender\n        peakToken.safeTransfer(msg.sender, withdrawAmount);\n    }\n\n    function getInterestAmount(uint256 stakeAmount, uint256 stakeTimeInDays)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 earlyFactor = _earlyFactor(mintedPeakTokens);\n        uint256 biggerBonus = stakeAmount.mul(PRECISION).div(\n            BIGGER_BONUS_DIVISOR\n        );\n        if (biggerBonus > MAX_BIGGER_BONUS) {\n            biggerBonus = MAX_BIGGER_BONUS;\n        }\n\n        // convert yearly bigger bonus to stake time\n        biggerBonus = biggerBonus.mul(stakeTimeInDays).div(YEAR_IN_DAYS);\n\n        uint256 longerBonus = _longerBonus(stakeTimeInDays);\n        uint256 interestRate = biggerBonus.add(longerBonus).mul(earlyFactor).div(\n            PRECISION\n        );\n        uint256 interestAmount = stakeAmount.mul(interestRate).div(PRECISION);\n        return interestAmount;\n    }\n\n    function _longerBonus(uint256 stakeTimeInDays)\n        internal\n        pure\n        returns (uint256)\n    {\n        return\n            DAILY_BASE_REWARD.mul(stakeTimeInDays).add(\n                DAILY_GROWING_REWARD\n                    .mul(stakeTimeInDays)\n                    .mul(stakeTimeInDays.add(1))\n                    .div(2)\n            );\n    }\n\n    function _earlyFactor(uint256 _mintedPeakTokens)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 tmp = INTEREST_SLOPE.mul(_mintedPeakTokens).div(PEAK_PRECISION);\n        if (tmp > PRECISION) {\n            return 0;\n        }\n        return PRECISION.sub(tmp);\n    }\n}\n"
    },
    "contracts/PeakDeFiFactory.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./lib/CloneFactory.sol\";\nimport \"./tokens/minime/MiniMeToken.sol\";\nimport \"./PeakDeFiFund.sol\";\nimport \"./PeakDeFiProxy.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract PeakDeFiFactory is CloneFactory {\n    using Address for address;\n\n    event CreateFund(address fund);\n    event InitFund(address fund, address proxy);\n\n    address public usdcAddr;\n    address payable public kyberAddr;\n    address payable public oneInchAddr;\n    address payable public peakdefiFund;\n    address public peakdefiLogic;\n    address public peakdefiLogic2;\n    address public peakdefiLogic3;\n    address public peakRewardAddr;\n    address public peakStakingAddr;\n    MiniMeTokenFactory public minimeFactory;\n    mapping(address => address) public fundCreator;\n\n    constructor(\n        address _usdcAddr,\n        address payable _kyberAddr,\n        address payable _oneInchAddr,\n        address payable _peakdefiFund,\n        address _peakdefiLogic,\n        address _peakdefiLogic2,\n        address _peakdefiLogic3,\n        address _peakRewardAddr,\n        address _peakStakingAddr,\n        address _minimeFactoryAddr\n    ) public {\n        usdcAddr = _usdcAddr;\n        kyberAddr = _kyberAddr;\n        oneInchAddr = _oneInchAddr;\n        peakdefiFund = _peakdefiFund;\n        peakdefiLogic = _peakdefiLogic;\n        peakdefiLogic2 = _peakdefiLogic2;\n        peakdefiLogic3 = _peakdefiLogic3;\n        peakRewardAddr = _peakRewardAddr;\n        peakStakingAddr = _peakStakingAddr;\n        minimeFactory = MiniMeTokenFactory(_minimeFactoryAddr);\n    }\n\n    function createFund() external returns (PeakDeFiFund) {\n        // create fund\n        PeakDeFiFund fund = PeakDeFiFund(createClone(peakdefiFund).toPayable());\n        fund.initOwner();\n\n        // give PeakReward signer rights to fund\n        PeakReward peakReward = PeakReward(peakRewardAddr);\n        peakReward.addSigner(address(fund));\n\n        fundCreator[address(fund)] = msg.sender;\n\n        emit CreateFund(address(fund));\n\n        return fund;\n    }\n\n    function initFund1(\n        PeakDeFiFund fund,\n        string calldata reptokenName,\n        string calldata reptokenSymbol,\n        string calldata sharesName,\n        string calldata sharesSymbol\n    ) external {\n        require(\n            fundCreator[address(fund)] == msg.sender,\n            \"PeakDeFiFactory: not creator\"\n        );\n\n        // create tokens\n        MiniMeToken reptoken = minimeFactory.createCloneToken(\n            address(0),\n            0,\n            reptokenName,\n            18,\n            reptokenSymbol,\n            false\n        );\n        MiniMeToken shares = minimeFactory.createCloneToken(\n            address(0),\n            0,\n            sharesName,\n            18,\n            sharesSymbol,\n            true\n        );\n        MiniMeToken peakReferralToken = minimeFactory.createCloneToken(\n            address(0),\n            0,\n            \"Peak Referral Token\",\n            18,\n            \"PRT\",\n            false\n        );\n\n        // transfer token ownerships to fund\n        reptoken.transferOwnership(address(fund));\n        shares.transferOwnership(address(fund));\n        peakReferralToken.transferOwnership(address(fund));\n\n        fund.initInternalTokens(\n            address(reptoken),\n            address(shares),\n            address(peakReferralToken)\n        );\n    }\n\n    function initFund2(\n        PeakDeFiFund fund,\n        address payable _devFundingAccount,\n        uint256 _devFundingRate,\n        uint256[2] calldata _phaseLengths,\n        address _compoundFactoryAddr\n    ) external {\n        require(\n            fundCreator[address(fund)] == msg.sender,\n            \"PeakDeFiFactory: not creator\"\n        );\n        fund.initParams(\n            _devFundingAccount,\n            _phaseLengths,\n            _devFundingRate,\n            address(0),\n            usdcAddr,\n            kyberAddr,\n            _compoundFactoryAddr,\n            peakdefiLogic,\n            peakdefiLogic2,\n            peakdefiLogic3,\n            1,\n            oneInchAddr,\n            peakRewardAddr,\n            peakStakingAddr\n        );\n    }\n\n    function initFund3(\n        PeakDeFiFund fund,\n        uint256 _newManagerRepToken,\n        uint256 _maxNewManagersPerCycle,\n        uint256 _reptokenPrice,\n        uint256 _peakManagerStakeRequired,\n        bool _isPermissioned\n    ) external {\n        require(\n            fundCreator[address(fund)] == msg.sender,\n            \"PeakDeFiFactory: not creator\"\n        );\n        fund.initRegistration(\n            _newManagerRepToken,\n            _maxNewManagersPerCycle,\n            _reptokenPrice,\n            _peakManagerStakeRequired,\n            _isPermissioned\n        );\n    }\n\n    function initFund4(\n        PeakDeFiFund fund,\n        address[] calldata _kyberTokens,\n        address[] calldata _compoundTokens\n    ) external {\n        require(\n            fundCreator[address(fund)] == msg.sender,\n            \"PeakDeFiFactory: not creator\"\n        );\n        fund.initTokenListings(_kyberTokens, _compoundTokens);\n\n        // deploy and set PeakDeFiProxy\n        PeakDeFiProxy proxy = new PeakDeFiProxy(address(fund));\n        fund.setProxy(address(proxy).toPayable());\n\n        // transfer fund ownership to msg.sender\n        fund.transferOwnership(msg.sender);\n\n        emit InitFund(address(fund), address(proxy));\n    }\n}\n"
    },
    "contracts/tokens/minime/MiniMeToken.sol": {
      "content": "pragma solidity 0.5.17;\n\n/*\n    Copyright 2016, Jordi Baylina\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see .\n */\n\n/// @title MiniMeToken Contract\n/// @author Jordi Baylina\n/// @dev This token contract's goal is to make it easy for anyone to clone this\n///  token using the token distribution at a given block, this will allow DAO's\n///  and DApps to upgrade their features in a decentralized manner without\n///  affecting the original token\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\n\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"./TokenController.sol\";\n\ncontract ApproveAndCallFallBack {\n  function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\n}\n\n/// @dev The actual token contract, the default owner is the msg.sender\n///  that deploys the contract, so usually this token will be deployed by a\n///  token owner contract, which Giveth will call a \"Campaign\"\ncontract MiniMeToken is Ownable {\n\n  string public name;                //The Token's name: e.g. DigixDAO Tokens\n  uint8 public decimals;             //Number of decimals of the smallest unit\n  string public symbol;              //An identifier: e.g. REP\n  string public version = \"MMT_0.2\"; //An arbitrary versioning scheme\n\n\n  /// @dev `Checkpoint` is the structure that attaches a block number to a\n  ///  given value, the block number attached is the one that last changed the\n  ///  value\n  struct  Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n    uint128 fromBlock;\n\n    // `value` is the amount of tokens at a specific block number\n    uint128 value;\n  }\n\n  // `parentToken` is the Token address that was cloned to produce this token;\n  //  it will be 0x0 for a token that was not cloned\n  MiniMeToken public parentToken;\n\n  // `parentSnapShotBlock` is the block number from the Parent Token that was\n  //  used to determine the initial distribution of the Clone Token\n  uint public parentSnapShotBlock;\n\n  // `creationBlock` is the block number that the Clone Token was created\n  uint public creationBlock;\n\n  // `balances` is the map that tracks the balance of each address, in this\n  //  contract when the balance changes the block number that the change\n  //  occurred is also included in the map\n  mapping (address => Checkpoint[]) balances;\n\n  // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n  mapping (address => mapping (address => uint256)) allowed;\n\n  // Tracks the history of the `totalSupply` of the token\n  Checkpoint[] totalSupplyHistory;\n\n  // Flag that determines if the token is transferable or not.\n  bool public transfersEnabled;\n\n  // The factory used to create new clone tokens\n  MiniMeTokenFactory public tokenFactory;\n\n////////////////\n// Constructor\n////////////////\n\n  /// @notice Constructor to create a MiniMeToken\n  /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n  ///  will create the Clone token contracts, the token factory needs to be\n  ///  deployed first\n  /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n  ///  new token\n  /// @param _parentSnapShotBlock Block of the parent token that will\n  ///  determine the initial distribution of the clone token, set to 0 if it\n  ///  is a new token\n  /// @param _tokenName Name of the new token\n  /// @param _decimalUnits Number of decimals of the new token\n  /// @param _tokenSymbol Token Symbol for the new token\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\n  constructor(\n      address _tokenFactory,\n      address payable _parentToken,\n      uint _parentSnapShotBlock,\n      string memory _tokenName,\n      uint8 _decimalUnits,\n      string memory _tokenSymbol,\n      bool _transfersEnabled\n  ) public {\n    tokenFactory = MiniMeTokenFactory(_tokenFactory);\n    name = _tokenName;                                 // Set the name\n    decimals = _decimalUnits;                          // Set the decimals\n    symbol = _tokenSymbol;                             // Set the symbol\n    parentToken = MiniMeToken(_parentToken);\n    parentSnapShotBlock = _parentSnapShotBlock;\n    transfersEnabled = _transfersEnabled;\n    creationBlock = block.number;\n  }\n\n\n///////////////////\n// ERC20 Methods\n///////////////////\n\n  /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return Whether the transfer was successful or not\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(transfersEnabled);\n    doTransfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n  ///  is approved by `_from`\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function transferFrom(address _from, address _to, uint256 _amount\n  ) public returns (bool success) {\n\n    // The owner of this contract can move tokens around at will,\n    //  this is important to recognize! Confirm that you trust the\n    //  owner of this contract, which in most situations should be\n    //  another open source smart contract or 0x0\n    if (msg.sender != owner()) {\n      require(transfersEnabled);\n\n      // The standard ERC 20 transferFrom functionality\n      require(allowed[_from][msg.sender] >= _amount);\n      allowed[_from][msg.sender] -= _amount;\n    }\n    doTransfer(_from, _to, _amount);\n    return true;\n  }\n\n  /// @dev This is the actual transfer function in the token contract, it can\n  ///  only be called by other functions in this contract.\n  /// @param _from The address holding the tokens being transferred\n  /// @param _to The address of the recipient\n  /// @param _amount The amount of tokens to be transferred\n  /// @return True if the transfer was successful\n  function doTransfer(address _from, address _to, uint _amount\n  ) internal {\n    if (_amount == 0) {\n      emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n      return;\n    }\n\n    require(parentSnapShotBlock < block.number);\n\n    // Do not allow transfer to 0x0 or the token contract itself\n    require((_to != address(0)) && (_to != address(this)));\n\n    // If the amount being transfered is more than the balance of the\n    //  account the transfer throws\n    uint previousBalanceFrom = balanceOfAt(_from, block.number);\n\n    require(previousBalanceFrom >= _amount);\n\n    // Alerts the token owner of the transfer\n    if (isContract(owner())) {\n      require(TokenController(owner()).onTransfer(_from, _to, _amount));\n    }\n\n    // First update the balance array with the new value for the address\n    //  sending the tokens\n    updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n\n    // Then update the balance array with the new value for the address\n    //  receiving the tokens\n    uint previousBalanceTo = balanceOfAt(_to, block.number);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n\n    // An event to make the transfer easy to find on the blockchain\n    emit Transfer(_from, _to, _amount);\n  }\n\n  /// @param _owner The address that's balance is being requested\n  /// @return The balance of `_owner` at the current block\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balanceOfAt(_owner, block.number);\n  }\n\n  /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n  ///  its behalf. This is a modified version of the ERC20 approve function\n  ///  to be a little bit safer\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the approval was successful\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    require(transfersEnabled);\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender,0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n    // Alerts the token owner of the approve function call\n    if (isContract(owner())) {\n      require(TokenController(owner()).onApprove(msg.sender, _spender, _amount));\n    }\n\n    allowed[msg.sender][_spender] = _amount;\n    emit Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /// @dev This function makes it easy to read the `allowed[]` map\n  /// @param _owner The address of the account that owns the token\n  /// @param _spender The address of the account able to transfer the tokens\n  /// @return Amount of remaining tokens of _owner that _spender is allowed\n  ///  to spend\n  function allowance(address _owner, address _spender\n  ) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n  ///  its behalf, and then a function is triggered in the contract that is\n  ///  being approved, `_spender`. This allows users to use their tokens to\n  ///  interact with contracts in one function call instead of two\n  /// @param _spender The address of the contract able to transfer the tokens\n  /// @param _amount The amount of tokens to be approved for transfer\n  /// @return True if the function call was successful\n  function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData\n  ) public returns (bool success) {\n    require(approve(_spender, _amount));\n\n    ApproveAndCallFallBack(_spender).receiveApproval(\n      msg.sender,\n      _amount,\n      address(this),\n      _extraData\n    );\n\n    return true;\n  }\n\n  /// @dev This function makes it easy to get the total number of tokens\n  /// @return The total number of tokens\n  function totalSupply() public view returns (uint) {\n    return totalSupplyAt(block.number);\n  }\n\n\n////////////////\n// Query balance and totalSupply in History\n////////////////\n\n  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n  /// @param _owner The address from which the balance will be retrieved\n  /// @param _blockNumber The block number when the balance is queried\n  /// @return The balance at `_blockNumber`\n  function balanceOfAt(address _owner, uint _blockNumber) public view\n    returns (uint) {\n\n    // These next few lines are used when the balance of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.balanceOfAt` be queried at the\n    //  genesis block for that token as this contains initial balance of\n    //  this token\n    if ((balances[_owner].length == 0)\n        || (balances[_owner][0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != address(0)) {\n        return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n      } else {\n          // Has no parent\n        return 0;\n      }\n\n    // This will return the expected balance during normal situations\n    } else {\n      return getValueAt(balances[_owner], _blockNumber);\n    }\n  }\n\n  /// @notice Total amount of tokens at a specific `_blockNumber`.\n  /// @param _blockNumber The block number when the totalSupply is queried\n  /// @return The total amount of tokens at `_blockNumber`\n  function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n\n    // These next few lines are used when the totalSupply of the token is\n    //  requested before a check point was ever created for this token, it\n    //  requires that the `parentToken.totalSupplyAt` be queried at the\n    //  genesis block for this token as that contains totalSupply of this\n    //  token at this block number.\n    if ((totalSupplyHistory.length == 0)\n      || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n      if (address(parentToken) != address(0)) {\n        return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n      } else {\n        return 0;\n      }\n\n    // This will return the expected totalSupply during normal situations\n    } else {\n      return getValueAt(totalSupplyHistory, _blockNumber);\n    }\n  }\n\n////////////////\n// Clone Token Method\n////////////////\n\n  /// @notice Creates a new clone token with the initial distribution being\n  ///  this token at `_snapshotBlock`\n  /// @param _cloneTokenName Name of the clone token\n  /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n  /// @param _cloneTokenSymbol Symbol of the clone token\n  /// @param _snapshotBlock Block when the distribution of the parent token is\n  ///  copied to set the initial distribution of the new clone token;\n  ///  if the block is zero than the actual block, the current block is used\n  /// @param _transfersEnabled True if transfers are allowed in the clone\n  /// @return The address of the new MiniMeToken Contract\n  function createCloneToken(\n    string memory _cloneTokenName,\n    uint8 _cloneDecimalUnits,\n    string memory _cloneTokenSymbol,\n    uint _snapshotBlock,\n    bool _transfersEnabled\n  ) public returns(address) {\n    uint snapshotBlock = _snapshotBlock;\n    if (snapshotBlock == 0) snapshotBlock = block.number;\n    MiniMeToken cloneToken = tokenFactory.createCloneToken(\n      address(this),\n      snapshotBlock,\n      _cloneTokenName,\n      _cloneDecimalUnits,\n      _cloneTokenSymbol,\n      _transfersEnabled\n    );\n\n    cloneToken.transferOwnership(msg.sender);\n\n    // An event to make the token easy to find on the blockchain\n    emit NewCloneToken(address(cloneToken), snapshotBlock);\n    return address(cloneToken);\n  }\n\n////////////////\n// Generate and destroy tokens\n////////////////\n\n  /// @notice Generates `_amount` tokens that are assigned to `_owner`\n  /// @param _owner The address that will be assigned the new tokens\n  /// @param _amount The quantity of tokens generated\n  /// @return True if the tokens are generated correctly\n  function generateTokens(address _owner, uint _amount\n  ) public onlyOwner returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n    uint previousBalanceTo = balanceOf(_owner);\n    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n    updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n    emit Transfer(address(0), _owner, _amount);\n    return true;\n  }\n\n\n  /// @notice Burns `_amount` tokens from `_owner`\n  /// @param _owner The address that will lose the tokens\n  /// @param _amount The quantity of tokens to burn\n  /// @return True if the tokens are burned correctly\n  function destroyTokens(address _owner, uint _amount\n  ) onlyOwner public returns (bool) {\n    uint curTotalSupply = totalSupply();\n    require(curTotalSupply >= _amount);\n    uint previousBalanceFrom = balanceOf(_owner);\n    require(previousBalanceFrom >= _amount);\n    updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n    updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n    emit Transfer(_owner, address(0), _amount);\n    return true;\n  }\n\n////////////////\n// Enable tokens transfers\n////////////////\n\n\n  /// @notice Enables token holders to transfer their tokens freely if true\n  /// @param _transfersEnabled True if transfers are allowed in the clone\n  function enableTransfers(bool _transfersEnabled) public onlyOwner {\n    transfersEnabled = _transfersEnabled;\n  }\n\n////////////////\n// Internal helper functions to query and set a value in a snapshot array\n////////////////\n\n  /// @dev `getValueAt` retrieves the number of tokens at a given block number\n  /// @param checkpoints The history of values being queried\n  /// @param _block The block number to retrieve the value at\n  /// @return The number of tokens being queried\n  function getValueAt(Checkpoint[] storage checkpoints, uint _block\n  ) view internal returns (uint) {\n    if (checkpoints.length == 0) return 0;\n\n    // Shortcut for the actual value\n    if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n        return checkpoints[checkpoints.length-1].value;\n    if (_block < checkpoints[0].fromBlock) return 0;\n\n    // Binary search of the value in the array\n    uint min = 0;\n    uint max = checkpoints.length-1;\n    while (max > min) {\n      uint mid = (max + min + 1)/ 2;\n      if (checkpoints[mid].fromBlock<=_block) {\n        min = mid;\n      } else {\n        max = mid-1;\n      }\n    }\n    return checkpoints[min].value;\n  }\n\n  /// @dev `updateValueAtNow` used to update the `balances` map and the\n  ///  `totalSupplyHistory`\n  /// @param checkpoints The history of data being updated\n  /// @param _value The new number of tokens\n  function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n  ) internal  {\n    if ((checkpoints.length == 0)\n    || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n      Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n      newCheckPoint.fromBlock =  uint128(block.number);\n      newCheckPoint.value = uint128(_value);\n    } else {\n      Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n      oldCheckPoint.value = uint128(_value);\n    }\n  }\n\n  /// @dev Internal function to determine if an address is a contract\n  /// @param _addr The address being queried\n  /// @return True if `_addr` is a contract\n  function isContract(address _addr) view internal returns(bool) {\n    uint size;\n    if (_addr == address(0)) return false;\n    assembly {\n        size := extcodesize(_addr)\n    }\n    return size>0;\n  }\n\n  /// @dev Helper function to return a min betwen the two uints\n  function min(uint a, uint b) pure internal returns (uint) {\n    return a < b ? a : b;\n  }\n\n  /// @notice The fallback function: If the contract's owner has not been\n  ///  set to 0, then the `proxyPayment` method is called which relays the\n  ///  ether and creates tokens as described in the token owner contract\n  function () external payable {\n    require(isContract(owner()));\n    require(TokenController(owner()).proxyPayment.value(msg.value)(msg.sender));\n  }\n\n//////////\n// Safety Methods\n//////////\n\n  /// @notice This method can be used by the owner to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that you want to recover\n  ///  set to 0 in case you want to extract ether.\n  function claimTokens(address payable _token) public onlyOwner {\n    if (_token == address(0)) {\n      address(uint160(owner())).transfer(address(this).balance);\n      return;\n    }\n\n    MiniMeToken token = MiniMeToken(_token);\n    uint balance = token.balanceOf(address(this));\n    require(token.transfer(owner(), balance));\n    emit ClaimedTokens(_token, owner(), balance);\n  }\n\n////////////////\n// Events\n////////////////\n  event ClaimedTokens(address indexed _token, address indexed _owner, uint _amount);\n  event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n  event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n  event Approval(\n      address indexed _owner,\n      address indexed _spender,\n      uint256 _amount\n  );\n\n}\n\n\n////////////////\n// MiniMeTokenFactory\n////////////////\n\n/// @dev This contract is used to generate clone contracts from a contract.\n///  In solidity this is the way to create a contract from a contract of the\n///  same class\ncontract MiniMeTokenFactory {\n  event CreatedToken(string symbol, address addr);\n\n  /// @notice Update the DApp by creating a new token with new functionalities\n  ///  the msg.sender becomes the owner of this clone token\n  /// @param _parentToken Address of the token being cloned\n  /// @param _snapshotBlock Block of the parent token that will\n  ///  determine the initial distribution of the clone token\n  /// @param _tokenName Name of the new token\n  /// @param _decimalUnits Number of decimals of the new token\n  /// @param _tokenSymbol Token Symbol for the new token\n  /// @param _transfersEnabled If true, tokens will be able to be transferred\n  /// @return The address of the new token contract\n  function createCloneToken(\n    address payable _parentToken,\n    uint _snapshotBlock,\n    string memory _tokenName,\n    uint8 _decimalUnits,\n    string memory _tokenSymbol,\n    bool _transfersEnabled\n  ) public returns (MiniMeToken) {\n    MiniMeToken newToken = new MiniMeToken(\n      address(this),\n      _parentToken,\n      _snapshotBlock,\n      _tokenName,\n      _decimalUnits,\n      _tokenSymbol,\n      _transfersEnabled\n    );\n\n    newToken.transferOwnership(msg.sender);\n    emit CreatedToken(_tokenSymbol, address(newToken));\n    return newToken;\n  }\n}\n"
    },
    "contracts/tokens/minime/TokenController.sol": {
      "content": "pragma solidity 0.5.17;\n\n/// @dev The token controller contract must implement these functions\ncontract TokenController {\n  /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n  /// @param _owner The address that sent the ether to create tokens\n  /// @return True if the ether is accepted, false if it throws\n  function proxyPayment(address _owner) public payable returns(bool);\n\n  /// @notice Notifies the controller about a token transfer allowing the\n  ///  controller to react if desired\n  /// @param _from The origin of the transfer\n  /// @param _to The destination of the transfer\n  /// @param _amount The amount of the transfer\n  /// @return False if the controller does not authorize the transfer\n  function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n\n  /// @notice Notifies the controller about an approval allowing the\n  ///  controller to react if desired\n  /// @param _owner The address that calls `approve()`\n  /// @param _spender The spender in the `approve()` call\n  /// @param _amount The amount in the `approve()` call\n  /// @return False if the controller does not authorize the approval\n  function onApprove(address _owner, address _spender, uint _amount) public\n    returns(bool);\n}\n"
    },
    "contracts/PeakDeFiFund.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./PeakDeFiStorage.sol\";\nimport \"./derivatives/CompoundOrderFactory.sol\";\n\n/**\n * @title The main smart contract of the PeakDeFi hedge fund.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract PeakDeFiFund is\n    PeakDeFiStorage,\n    Utils(address(0), address(0), address(0)),\n    TokenController\n{\n    /**\n     * @notice Passes if the fund is ready for migrating to the next version\n     */\n    modifier readyForUpgradeMigration {\n        require(hasFinalizedNextVersion == true);\n        require(\n            now >\n                startTimeOfCyclePhase.add(\n                    phaseLengths[uint256(CyclePhase.Intermission)]\n                )\n        );\n        _;\n    }\n\n    /**\n     * Meta functions\n     */\n\n    function initParams(\n        address payable _devFundingAccount,\n        uint256[2] calldata _phaseLengths,\n        uint256 _devFundingRate,\n        address payable _previousVersion,\n        address _usdcAddr,\n        address payable _kyberAddr,\n        address _compoundFactoryAddr,\n        address _peakdefiLogic,\n        address _peakdefiLogic2,\n        address _peakdefiLogic3,\n        uint256 _startCycleNumber,\n        address payable _oneInchAddr,\n        address _peakRewardAddr,\n        address _peakStakingAddr\n    ) external {\n        require(proxyAddr == address(0));\n        devFundingAccount = _devFundingAccount;\n        phaseLengths = _phaseLengths;\n        devFundingRate = _devFundingRate;\n        cyclePhase = CyclePhase.Intermission;\n        compoundFactoryAddr = _compoundFactoryAddr;\n        peakdefiLogic = _peakdefiLogic;\n        peakdefiLogic2 = _peakdefiLogic2;\n        peakdefiLogic3 = _peakdefiLogic3;\n        previousVersion = _previousVersion;\n        cycleNumber = _startCycleNumber;\n\n        peakReward = PeakReward(_peakRewardAddr);\n        peakStaking = PeakStaking(_peakStakingAddr);\n\n        USDC_ADDR = _usdcAddr;\n        KYBER_ADDR = _kyberAddr;\n        ONEINCH_ADDR = _oneInchAddr;\n\n        usdc = ERC20Detailed(_usdcAddr);\n        kyber = KyberNetwork(_kyberAddr);\n\n        __initReentrancyGuard();\n    }\n\n    function initOwner() external {\n        require(proxyAddr == address(0));\n        _transferOwnership(msg.sender);\n    }\n\n    function initInternalTokens(\n        address payable _repAddr,\n        address payable _sTokenAddr,\n        address payable _peakReferralTokenAddr\n    ) external onlyOwner {\n        require(controlTokenAddr == address(0));\n        require(_repAddr != address(0));\n        controlTokenAddr = _repAddr;\n        shareTokenAddr = _sTokenAddr;\n        cToken = IMiniMeToken(_repAddr);\n        sToken = IMiniMeToken(_sTokenAddr);\n        peakReferralToken = IMiniMeToken(_peakReferralTokenAddr);\n    }\n\n    function initRegistration(\n        uint256 _newManagerRepToken,\n        uint256 _maxNewManagersPerCycle,\n        uint256 _reptokenPrice,\n        uint256 _peakManagerStakeRequired,\n        bool _isPermissioned\n    ) external onlyOwner {\n        require(_newManagerRepToken > 0 && newManagerRepToken == 0);\n        newManagerRepToken = _newManagerRepToken;\n        maxNewManagersPerCycle = _maxNewManagersPerCycle;\n        reptokenPrice = _reptokenPrice;\n        peakManagerStakeRequired = _peakManagerStakeRequired;\n        isPermissioned = _isPermissioned;\n    }\n\n    function initTokenListings(\n        address[] calldata _kyberTokens,\n        address[] calldata _compoundTokens\n    ) external onlyOwner {\n        // May only initialize once\n        require(!hasInitializedTokenListings);\n        hasInitializedTokenListings = true;\n\n        uint256 i;\n        for (i = 0; i < _kyberTokens.length; i++) {\n            isKyberToken[_kyberTokens[i]] = true;\n        }\n        CompoundOrderFactory factory = CompoundOrderFactory(compoundFactoryAddr);\n        for (i = 0; i < _compoundTokens.length; i++) {\n            require(factory.tokenIsListed(_compoundTokens[i]));\n            isCompoundToken[_compoundTokens[i]] = true;\n        }\n    }\n\n    /**\n     * @notice Used during deployment to set the PeakDeFiProxy contract address.\n     * @param _proxyAddr the proxy's address\n     */\n    function setProxy(address payable _proxyAddr) external onlyOwner {\n        require(_proxyAddr != address(0));\n        require(proxyAddr == address(0));\n        proxyAddr = _proxyAddr;\n        proxy = PeakDeFiProxyInterface(_proxyAddr);\n    }\n\n    /**\n     * Upgrading functions\n     */\n\n    /**\n     * @notice Allows the developer to propose a candidate smart contract for the fund to upgrade to.\n     *          The developer may change the candidate during the Intermission phase.\n     * @param _candidate the address of the candidate smart contract\n     * @return True if successfully changed candidate, false otherwise.\n     */\n    function developerInitiateUpgrade(address payable _candidate)\n        public\n        returns (bool _success)\n    {\n        (bool success, bytes memory result) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.developerInitiateUpgrade.selector,\n                _candidate\n            )\n        );\n        if (!success) {\n            return false;\n        }\n        return abi.decode(result, (bool));\n    }\n\n    /**\n     * @notice Transfers ownership of RepToken & Share token contracts to the next version. Also updates PeakDeFiFund's\n     *         address in PeakDeFiProxy.\n     */\n    function migrateOwnedContractsToNextVersion()\n        public\n        nonReentrant\n        readyForUpgradeMigration\n    {\n        cToken.transferOwnership(nextVersion);\n        sToken.transferOwnership(nextVersion);\n        peakReferralToken.transferOwnership(nextVersion);\n        proxy.updatePeakDeFiFundAddress();\n    }\n\n    /**\n     * @notice Transfers assets to the next version.\n     * @param _assetAddress the address of the asset to be transferred. Use ETH_TOKEN_ADDRESS to transfer Ether.\n     */\n    function transferAssetToNextVersion(address _assetAddress)\n        public\n        nonReentrant\n        readyForUpgradeMigration\n        isValidToken(_assetAddress)\n    {\n        if (_assetAddress == address(ETH_TOKEN_ADDRESS)) {\n            nextVersion.transfer(address(this).balance);\n        } else {\n            ERC20Detailed token = ERC20Detailed(_assetAddress);\n            token.safeTransfer(nextVersion, token.balanceOf(address(this)));\n        }\n    }\n\n    /**\n     * Getters\n     */\n\n    /**\n     * @notice Returns the length of the user's investments array.\n     * @return length of the user's investments array\n     */\n    function investmentsCount(address _userAddr)\n        public\n        view\n        returns (uint256 _count)\n    {\n        return userInvestments[_userAddr].length;\n    }\n\n    /**\n     * @notice Returns the length of the user's compound orders array.\n     * @return length of the user's compound orders array\n     */\n    function compoundOrdersCount(address _userAddr)\n        public\n        view\n        returns (uint256 _count)\n    {\n        return userCompoundOrders[_userAddr].length;\n    }\n\n    /**\n     * @notice Returns the phaseLengths array.\n     * @return the phaseLengths array\n     */\n    function getPhaseLengths()\n        public\n        view\n        returns (uint256[2] memory _phaseLengths)\n    {\n        return phaseLengths;\n    }\n\n    /**\n     * @notice Returns the commission balance of `_manager`\n     * @return the commission balance and the received penalty, denoted in USDC\n     */\n    function commissionBalanceOf(address _manager)\n        public\n        returns (uint256 _commission, uint256 _penalty)\n    {\n        (bool success, bytes memory result) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(this.commissionBalanceOf.selector, _manager)\n        );\n        if (!success) {\n            return (0, 0);\n        }\n        return abi.decode(result, (uint256, uint256));\n    }\n\n    /**\n     * @notice Returns the commission amount received by `_manager` in the `_cycle`th cycle\n     * @return the commission amount and the received penalty, denoted in USDC\n     */\n    function commissionOfAt(address _manager, uint256 _cycle)\n        public\n        returns (uint256 _commission, uint256 _penalty)\n    {\n        (bool success, bytes memory result) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.commissionOfAt.selector,\n                _manager,\n                _cycle\n            )\n        );\n        if (!success) {\n            return (0, 0);\n        }\n        return abi.decode(result, (uint256, uint256));\n    }\n\n    /**\n     * Parameter setters\n     */\n\n    /**\n     * @notice Changes the address to which the developer fees will be sent. Only callable by owner.\n     * @param _newAddr the new developer fee address\n     */\n    function changeDeveloperFeeAccount(address payable _newAddr)\n        public\n        onlyOwner\n    {\n        require(_newAddr != address(0) && _newAddr != address(this));\n        devFundingAccount = _newAddr;\n    }\n\n    /**\n     * @notice Changes the proportion of fund balance sent to the developers each cycle. May only decrease. Only callable by owner.\n     * @param _newProp the new proportion, fixed point decimal\n     */\n    function changeDeveloperFeeRate(uint256 _newProp) public onlyOwner {\n        require(_newProp < PRECISION);\n        require(_newProp < devFundingRate);\n        devFundingRate = _newProp;\n    }\n\n    /**\n     * @notice Allows managers to invest in a token. Only callable by owner.\n     * @param _token address of the token to be listed\n     */\n    function listKyberToken(address _token) public onlyOwner {\n        isKyberToken[_token] = true;\n    }\n\n    /**\n     * @notice Allows managers to invest in a Compound token. Only callable by owner.\n     * @param _token address of the Compound token to be listed\n     */\n    function listCompoundToken(address _token) public onlyOwner {\n        CompoundOrderFactory factory = CompoundOrderFactory(\n            compoundFactoryAddr\n        );\n        require(factory.tokenIsListed(_token));\n        isCompoundToken[_token] = true;\n    }\n\n    /**\n     * @notice Moves the fund to the next phase in the investment cycle.\n     */\n    function nextPhase() public {\n        (bool success, ) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(this.nextPhase.selector)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * Manager registration\n     */\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using USDC as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     */\n    function registerWithUSDC() public {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(this.registerWithUSDC.selector)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using ETH as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     */\n    function registerWithETH() public payable {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(this.registerWithETH.selector)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using tokens as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     * @param _token the token to be used for payment\n     * @param _donationInTokens the amount of tokens to be used for registration, should use the token's native decimals\n     */\n    function registerWithToken(address _token, uint256 _donationInTokens)\n        public\n    {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.registerWithToken.selector,\n                _token,\n                _donationInTokens\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * Intermission phase functions\n     */\n\n    /**\n     * @notice Deposit Ether into the fund. Ether will be converted into USDC.\n     */\n    function depositEther(address _referrer) public payable {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(this.depositEther.selector, _referrer)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function depositEtherAdvanced(\n        bool _useKyber,\n        bytes calldata _calldata,\n        address _referrer\n    ) external payable {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.depositEtherAdvanced.selector,\n                _useKyber,\n                _calldata,\n                _referrer\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Deposit USDC Stablecoin into the fund.\n     * @param _usdcAmount The amount of USDC to be deposited. May be different from actual deposited amount.\n     */\n    function depositUSDC(uint256 _usdcAmount, address _referrer) public {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.depositUSDC.selector,\n                _usdcAmount,\n                _referrer\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens into the fund. Tokens will be converted into USDC.\n     * @param _tokenAddr the address of the token to be deposited\n     * @param _tokenAmount The amount of tokens to be deposited. May be different from actual deposited amount.\n     */\n    function depositToken(\n        address _tokenAddr,\n        uint256 _tokenAmount,\n        address _referrer\n    ) public {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.depositToken.selector,\n                _tokenAddr,\n                _tokenAmount,\n                _referrer\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function depositTokenAdvanced(\n        address _tokenAddr,\n        uint256 _tokenAmount,\n        bool _useKyber,\n        bytes calldata _calldata,\n        address _referrer\n    ) external {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.depositTokenAdvanced.selector,\n                _tokenAddr,\n                _tokenAmount,\n                _useKyber,\n                _calldata,\n                _referrer\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Withdraws Ether by burning Shares.\n     * @param _amountInUSDC Amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     */\n    function withdrawEther(uint256 _amountInUSDC) external {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(this.withdrawEther.selector, _amountInUSDC)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function withdrawEtherAdvanced(\n        uint256 _amountInUSDC,\n        bool _useKyber,\n        bytes calldata _calldata\n    ) external {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.withdrawEtherAdvanced.selector,\n                _amountInUSDC,\n                _useKyber,\n                _calldata\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Withdraws Ether by burning Shares.\n     * @param _amountInUSDC Amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     */\n    function withdrawUSDC(uint256 _amountInUSDC) public {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(this.withdrawUSDC.selector, _amountInUSDC)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Withdraws funds by burning Shares, and converts the funds into the specified token using Kyber Network.\n     * @param _tokenAddr the address of the token to be withdrawn into the caller's account\n     * @param _amountInUSDC The amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     */\n    function withdrawToken(address _tokenAddr, uint256 _amountInUSDC) external {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.withdrawToken.selector,\n                _tokenAddr,\n                _amountInUSDC\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function withdrawTokenAdvanced(\n        address _tokenAddr,\n        uint256 _amountInUSDC,\n        bool _useKyber,\n        bytes calldata _calldata\n    ) external {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.withdrawTokenAdvanced.selector,\n                _tokenAddr,\n                _amountInUSDC,\n                _useKyber,\n                _calldata\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Redeems commission.\n     */\n    function redeemCommission(bool _inShares) public {\n        (bool success, ) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(this.redeemCommission.selector, _inShares)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle.\n     * @param _inShares true to redeem in PeakDeFi Shares, false to redeem in USDC\n     * @param _cycle the cycle for which the commission will be redeemed.\n     *        Commissions for a cycle will be redeemed during the Intermission phase of the next cycle, so _cycle must < cycleNumber.\n     */\n    function redeemCommissionForCycle(bool _inShares, uint256 _cycle) public {\n        (bool success, ) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.redeemCommissionForCycle.selector,\n                _inShares,\n                _cycle\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Sells tokens left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n     * @param _tokenAddr address of the token to be sold\n     * @param _calldata the 1inch trade call data\n     */\n    function sellLeftoverToken(address _tokenAddr, bytes calldata _calldata)\n        external\n    {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.sellLeftoverToken.selector,\n                _tokenAddr,\n                _calldata\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Sells CompoundOrder left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n     * @param _orderAddress address of the CompoundOrder to be sold\n     */\n    function sellLeftoverCompoundOrder(address payable _orderAddress) public {\n        (bool success, ) = peakdefiLogic2.delegatecall(\n            abi.encodeWithSelector(\n                this.sellLeftoverCompoundOrder.selector,\n                _orderAddress\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Burns the RepToken balance of a manager who has been inactive for a certain number of cycles\n     * @param _deadman the manager whose RepToken balance will be burned\n     */\n    function burnDeadman(address _deadman) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(this.burnDeadman.selector, _deadman)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * Manage phase functions\n     */\n\n    function createInvestmentWithSignature(\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice,\n        bytes calldata _calldata,\n        bool _useKyber,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.createInvestmentWithSignature.selector,\n                _tokenAddress,\n                _stake,\n                _maxPrice,\n                _calldata,\n                _useKyber,\n                _manager,\n                _salt,\n                _signature\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function sellInvestmentWithSignature(\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        bytes calldata _calldata,\n        bool _useKyber,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.sellInvestmentWithSignature.selector,\n                _investmentId,\n                _tokenAmount,\n                _minPrice,\n                _maxPrice,\n                _calldata,\n                _useKyber,\n                _manager,\n                _salt,\n                _signature\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function createCompoundOrderWithSignature(\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.createCompoundOrderWithSignature.selector,\n                _orderType,\n                _tokenAddress,\n                _stake,\n                _minPrice,\n                _maxPrice,\n                _manager,\n                _salt,\n                _signature\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function sellCompoundOrderWithSignature(\n        uint256 _orderId,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.sellCompoundOrderWithSignature.selector,\n                _orderId,\n                _minPrice,\n                _maxPrice,\n                _manager,\n                _salt,\n                _signature\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    function repayCompoundOrderWithSignature(\n        uint256 _orderId,\n        uint256 _repayAmountInUSDC,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.repayCompoundOrderWithSignature.selector,\n                _orderId,\n                _repayAmountInUSDC,\n                _manager,\n                _salt,\n                _signature\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Creates a new investment for an ERC20 token.\n     * @param _tokenAddress address of the ERC20 token contract\n     * @param _stake amount of RepTokens to be staked in support of the investment\n     * @param _maxPrice the maximum price for the trade\n     */\n    function createInvestment(\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.createInvestment.selector,\n                _tokenAddress,\n                _stake,\n                _maxPrice\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Creates a new investment for an ERC20 token.\n     * @param _tokenAddress address of the ERC20 token contract\n     * @param _stake amount of RepTokens to be staked in support of the investment\n     * @param _maxPrice the maximum price for the trade\n     * @param _calldata calldata for 1inch trading\n     * @param _useKyber true for Kyber Network, false for 1inch\n     */\n    function createInvestmentV2(\n        address _sender,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice,\n        bytes memory _calldata,\n        bool _useKyber\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.createInvestmentV2.selector,\n                _sender,\n                _tokenAddress,\n                _stake,\n                _maxPrice,\n                _calldata,\n                _useKyber\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Called by user to sell the assets an investment invested in. Returns the staked RepToken plus rewards/penalties to the user.\n     *         The user can sell only part of the investment by changing _tokenAmount.\n     * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n     *   the original buy price and however much tokens that are not sold.\n     * @param _investmentId the ID of the investment\n     * @param _tokenAmount the amount of tokens to be sold.\n     * @param _minPrice the minimum price for the trade\n     */\n    function sellInvestmentAsset(\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.sellInvestmentAsset.selector,\n                _investmentId,\n                _tokenAmount,\n                _minPrice\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Called by user to sell the assets an investment invested in. Returns the staked RepToken plus rewards/penalties to the user.\n     *         The user can sell only part of the investment by changing _tokenAmount.\n     * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n     *   the original buy price and however much tokens that are not sold.\n     * @param _investmentId the ID of the investment\n     * @param _tokenAmount the amount of tokens to be sold.\n     * @param _minPrice the minimum price for the trade\n     */\n    function sellInvestmentAssetV2(\n        address _sender,\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice,\n        bytes memory _calldata,\n        bool _useKyber\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.sellInvestmentAssetV2.selector,\n                _sender,\n                _investmentId,\n                _tokenAmount,\n                _minPrice,\n                _calldata,\n                _useKyber\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Creates a new Compound order to either short or leverage long a token.\n     * @param _orderType true for a short order, false for a levarage long order\n     * @param _tokenAddress address of the Compound token to be traded\n     * @param _stake amount of RepTokens to be staked\n     * @param _minPrice the minimum token price for the trade\n     * @param _maxPrice the maximum token price for the trade\n     */\n    function createCompoundOrder(\n        address _sender,\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.createCompoundOrder.selector,\n                _sender,\n                _orderType,\n                _tokenAddress,\n                _stake,\n                _minPrice,\n                _maxPrice\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Sells a compound order\n     * @param _orderId the ID of the order to be sold (index in userCompoundOrders[msg.sender])\n     * @param _minPrice the minimum token price for the trade\n     * @param _maxPrice the maximum token price for the trade\n     */\n    function sellCompoundOrder(\n        address _sender,\n        uint256 _orderId,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.sellCompoundOrder.selector,\n                _sender,\n                _orderId,\n                _minPrice,\n                _maxPrice\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Repys debt for a Compound order to prevent the collateral ratio from dropping below threshold.\n     * @param _orderId the ID of the Compound order\n     * @param _repayAmountInUSDC amount of USDC to use for repaying debt\n     */\n    function repayCompoundOrder(\n        address _sender,\n        uint256 _orderId,\n        uint256 _repayAmountInUSDC\n    ) public {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.repayCompoundOrder.selector,\n                _sender,\n                _orderId,\n                _repayAmountInUSDC\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Emergency exit the tokens from order contract during intermission stage\n     * @param _sender the address of trader, who created the order\n     * @param _orderId the ID of the Compound order\n     * @param _tokenAddr the address of token which should be transferred\n     * @param _receiver the address of receiver\n     */\n    function emergencyExitCompoundTokens(\n        address _sender,\n        uint256 _orderId,\n        address _tokenAddr,\n        address _receiver\n    ) public onlyOwner {\n        (bool success, ) = peakdefiLogic.delegatecall(\n            abi.encodeWithSelector(\n                this.emergencyExitCompoundTokens.selector,\n                _sender,\n                _orderId,\n                _tokenAddr,\n                _receiver\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * Internal use functions\n     */\n\n    // MiniMe TokenController functions, not used right now\n    /**\n     * @notice Called when `_owner` sends ether to the MiniMe Token contract\n     * @return True if the ether is accepted, false if it throws\n     */\n    function proxyPayment(\n        address /*_owner*/\n    ) public payable returns (bool) {\n        return false;\n    }\n\n    /**\n     * @notice Notifies the controller about a token transfer allowing the\n     *  controller to react if desired\n     * @return False if the controller does not authorize the transfer\n     */\n    function onTransfer(\n        address, /*_from*/\n        address, /*_to*/\n        uint256 /*_amount*/\n    ) public returns (bool) {\n        return true;\n    }\n\n    /**\n     * @notice Notifies the controller about an approval allowing the\n     *  controller to react if desired\n     * @return False if the controller does not authorize the approval\n     */\n    function onApprove(\n        address, /*_owner*/\n        address, /*_spender*/\n        uint256 /*_amount*/\n    ) public returns (bool) {\n        return true;\n    }\n\n    function() external payable {}\n\n    /**\n    PeakDeFi\n   */\n\n    /**\n     * @notice Returns the commission balance of `_referrer`\n     * @return the commission balance and the received penalty, denoted in USDC\n     */\n    function peakReferralCommissionBalanceOf(address _referrer)\n        public\n        returns (uint256 _commission)\n    {\n        (bool success, bytes memory result) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.peakReferralCommissionBalanceOf.selector,\n                _referrer\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        return abi.decode(result, (uint256));\n    }\n\n    /**\n     * @notice Returns the commission amount received by `_referrer` in the `_cycle`th cycle\n     * @return the commission amount and the received penalty, denoted in USDC\n     */\n    function peakReferralCommissionOfAt(address _referrer, uint256 _cycle)\n        public\n        returns (uint256 _commission)\n    {\n        (bool success, bytes memory result) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.peakReferralCommissionOfAt.selector,\n                _referrer,\n                _cycle\n            )\n        );\n        if (!success) {\n            return 0;\n        }\n        return abi.decode(result, (uint256));\n    }\n\n    /**\n     * @notice Redeems commission.\n     */\n    function peakReferralRedeemCommission() public {\n        (bool success, ) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(this.peakReferralRedeemCommission.selector)\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle.\n     * @param _cycle the cycle for which the commission will be redeemed.\n     *        Commissions for a cycle will be redeemed during the Intermission phase of the next cycle, so _cycle must < cycleNumber.\n     */\n    function peakReferralRedeemCommissionForCycle(uint256 _cycle) public {\n        (bool success, ) = peakdefiLogic3.delegatecall(\n            abi.encodeWithSelector(\n                this.peakReferralRedeemCommissionForCycle.selector,\n                _cycle\n            )\n        );\n        if (!success) {\n            revert();\n        }\n    }\n\n    /**\n     * @notice Changes the required PEAK stake of a new manager. Only callable by owner.\n     * @param _newValue the new value\n     */\n    function peakChangeManagerStakeRequired(uint256 _newValue)\n        public\n        onlyOwner\n    {\n        peakManagerStakeRequired = _newValue;\n    }\n}\n"
    },
    "contracts/PeakDeFiStorage.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"./lib/ReentrancyGuard.sol\";\nimport \"./interfaces/IMiniMeToken.sol\";\nimport \"./tokens/minime/TokenController.sol\";\nimport \"./Utils.sol\";\nimport \"./PeakDeFiProxyInterface.sol\";\nimport \"./peak/reward/PeakReward.sol\";\nimport \"./peak/staking/PeakStaking.sol\";\n\n/**\n * @title The storage layout of PeakDeFiFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract PeakDeFiStorage is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    enum CyclePhase {Intermission, Manage}\n    enum VoteDirection {Empty, For, Against}\n    enum Subchunk {Propose, Vote}\n\n    struct Investment {\n        address tokenAddress;\n        uint256 cycleNumber;\n        uint256 stake;\n        uint256 tokenAmount;\n        uint256 buyPrice; // token buy price in 18 decimals in USDC\n        uint256 sellPrice; // token sell price in 18 decimals in USDC\n        uint256 buyTime;\n        uint256 buyCostInUSDC;\n        bool isSold;\n    }\n\n    // Fund parameters\n    uint256 public constant COMMISSION_RATE = 15 * (10**16); // The proportion of profits that gets distributed to RepToken holders every cycle.\n    uint256 public constant ASSET_FEE_RATE = 1 * (10**15); // The proportion of fund balance that gets distributed to RepToken holders every cycle.\n    uint256 public constant NEXT_PHASE_REWARD = 1 * (10**18); // Amount of RepToken rewarded to the user who calls nextPhase().\n    uint256 public constant COLLATERAL_RATIO_MODIFIER = 75 * (10**16); // Modifies Compound's collateral ratio, gets 2:1 from 1.5:1 ratio\n    uint256 public constant MIN_RISK_TIME = 3 days; // Mininum risk taken to get full commissions is 9 days * reptokenBalance\n    uint256 public constant INACTIVE_THRESHOLD = 2; // Number of inactive cycles after which a manager's RepToken balance can be burned\n    uint256 public constant ROI_PUNISH_THRESHOLD = 1 * (10**17); // ROI worse than 10% will see punishment in stake\n    uint256 public constant ROI_BURN_THRESHOLD = 25 * (10**16); // ROI worse than 25% will see their stake all burned\n    uint256 public constant ROI_PUNISH_SLOPE = 6; // repROI = -(6 * absROI - 0.5)\n    uint256 public constant ROI_PUNISH_NEG_BIAS = 5 * (10**17); // repROI = -(6 * absROI - 0.5)\n    uint256 public constant PEAK_COMMISSION_RATE = 20 * (10**16); // The proportion of profits that gets distributed to PeakDeFi referrers every cycle.\n\n    // Instance variables\n\n    // Checks if the token listing initialization has been completed.\n    bool public hasInitializedTokenListings;\n\n    // Checks if the fund has been initialized\n    bool public isInitialized;\n\n    // Address of the RepToken token contract.\n    address public controlTokenAddr;\n\n    // Address of the share token contract.\n    address public shareTokenAddr;\n\n    // Address of the PeakDeFiProxy contract.\n    address payable public proxyAddr;\n\n    // Address of the CompoundOrderFactory contract.\n    address public compoundFactoryAddr;\n\n    // Address of the PeakDeFiLogic contract.\n    address public peakdefiLogic;\n    address public peakdefiLogic2;\n    address public peakdefiLogic3;\n\n    // Address to which the development team funding will be sent.\n    address payable public devFundingAccount;\n\n    // Address of the previous version of PeakDeFiFund.\n    address payable public previousVersion;\n\n    // The number of the current investment cycle.\n    uint256 public cycleNumber;\n\n    // The amount of funds held by the fund.\n    uint256 public totalFundsInUSDC;\n\n    // The total funds at the beginning of the current management phase\n    uint256 public totalFundsAtManagePhaseStart;\n\n    // The start time for the current investment cycle phase, in seconds since Unix epoch.\n    uint256 public startTimeOfCyclePhase;\n\n    // The proportion of PeakDeFi Shares total supply to mint and use for funding the development team. Fixed point decimal.\n    uint256 public devFundingRate;\n\n    // Total amount of commission unclaimed by managers\n    uint256 public totalCommissionLeft;\n\n    // Stores the lengths of each cycle phase in seconds.\n    uint256[2] public phaseLengths;\n\n    // The number of managers onboarded during the current cycle\n    uint256 public managersOnboardedThisCycle;\n\n    // The amount of RepToken tokens a new manager receves\n    uint256 public newManagerRepToken;\n\n    // The max number of new managers that can be onboarded in one cycle\n    uint256 public maxNewManagersPerCycle;\n\n    // The price of RepToken in USDC\n    uint256 public reptokenPrice;\n\n    // The last cycle where a user redeemed all of their remaining commission.\n    mapping(address => uint256) internal _lastCommissionRedemption;\n\n    // Marks whether a manager has redeemed their commission for a certain cycle\n    mapping(address => mapping(uint256 => bool))\n        internal _hasRedeemedCommissionForCycle;\n\n    // The stake-time measured risk that a manager has taken in a cycle\n    mapping(address => mapping(uint256 => uint256)) internal _riskTakenInCycle;\n\n    // In case a manager joined the fund during the current cycle, set the fallback base stake for risk threshold calculation\n    mapping(address => uint256) internal _baseRiskStakeFallback;\n\n    // List of investments of a manager in the current cycle.\n    mapping(address => Investment[]) public userInvestments;\n\n    // List of short/long orders of a manager in the current cycle.\n    mapping(address => address payable[]) public userCompoundOrders;\n\n    // Total commission to be paid for work done in a certain cycle (will be redeemed in the next cycle's Intermission)\n    mapping(uint256 => uint256) internal _totalCommissionOfCycle;\n\n    // The block number at which the Manage phase ended for a given cycle\n    mapping(uint256 => uint256) internal _managePhaseEndBlock;\n\n    // The last cycle where a manager made an investment\n    mapping(address => uint256) internal _lastActiveCycle;\n\n    // Checks if an address points to a whitelisted Kyber token.\n    mapping(address => bool) public isKyberToken;\n\n    // Checks if an address points to a whitelisted Compound token. Returns false for cUSDC and other stablecoin CompoundTokens.\n    mapping(address => bool) public isCompoundToken;\n\n    // The current cycle phase.\n    CyclePhase public cyclePhase;\n\n    // Upgrade governance related variables\n    bool public hasFinalizedNextVersion; // Denotes if the address of the next smart contract version has been finalized\n    address payable public nextVersion; // Address of the next version of PeakDeFiFund.\n\n    // Contract instances\n    IMiniMeToken internal cToken;\n    IMiniMeToken internal sToken;\n    PeakDeFiProxyInterface internal proxy;\n\n    // PeakDeFi\n    uint256 public peakReferralTotalCommissionLeft;\n    uint256 public peakManagerStakeRequired;\n    mapping(uint256 => uint256) internal _peakReferralTotalCommissionOfCycle;\n    mapping(address => uint256) internal _peakReferralLastCommissionRedemption;\n    mapping(address => mapping(uint256 => bool))\n        internal _peakReferralHasRedeemedCommissionForCycle;\n    IMiniMeToken public peakReferralToken;\n    PeakReward public peakReward;\n    PeakStaking public peakStaking;\n    bool public isPermissioned;\n    mapping(address => mapping(uint256 => bool)) public hasUsedSalt;\n\n    // Events\n\n    event ChangedPhase(\n        uint256 indexed _cycleNumber,\n        uint256 indexed _newPhase,\n        uint256 _timestamp,\n        uint256 _totalFundsInUSDC\n    );\n\n    event Deposit(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        address _tokenAddress,\n        uint256 _tokenAmount,\n        uint256 _usdcAmount,\n        uint256 _timestamp\n    );\n    event Withdraw(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        address _tokenAddress,\n        uint256 _tokenAmount,\n        uint256 _usdcAmount,\n        uint256 _timestamp\n    );\n\n    event CreatedInvestment(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _id,\n        address _tokenAddress,\n        uint256 _stakeInWeis,\n        uint256 _buyPrice,\n        uint256 _costUSDCAmount,\n        uint256 _tokenAmount\n    );\n    event SoldInvestment(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _id,\n        address _tokenAddress,\n        uint256 _receivedRepToken,\n        uint256 _sellPrice,\n        uint256 _earnedUSDCAmount\n    );\n\n    event CreatedCompoundOrder(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _id,\n        address _order,\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stakeInWeis,\n        uint256 _costUSDCAmount\n    );\n    event SoldCompoundOrder(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _id,\n        address _order,\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _receivedRepToken,\n        uint256 _earnedUSDCAmount\n    );\n    event RepaidCompoundOrder(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _id,\n        address _order,\n        uint256 _repaidUSDCAmount\n    );\n\n    event CommissionPaid(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _commission\n    );\n    event TotalCommissionPaid(\n        uint256 indexed _cycleNumber,\n        uint256 _totalCommissionInUSDC\n    );\n\n    event Register(\n        address indexed _manager,\n        uint256 _donationInUSDC,\n        uint256 _reptokenReceived\n    );\n    event BurnDeadman(address indexed _manager, uint256 _reptokenBurned);\n\n    event DeveloperInitiatedUpgrade(\n        uint256 indexed _cycleNumber,\n        address _candidate\n    );\n    event FinalizedNextVersion(\n        uint256 indexed _cycleNumber,\n        address _nextVersion\n    );\n\n    event PeakReferralCommissionPaid(\n        uint256 indexed _cycleNumber,\n        address indexed _sender,\n        uint256 _commission\n    );\n    event PeakReferralTotalCommissionPaid(\n        uint256 indexed _cycleNumber,\n        uint256 _totalCommissionInUSDC\n    );\n\n    /*\n  Helper functions shared by both PeakDeFiLogic & PeakDeFiFund\n  */\n\n    function lastCommissionRedemption(address _manager)\n        public\n        view\n        returns (uint256)\n    {\n        if (_lastCommissionRedemption[_manager] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).lastCommissionRedemption(\n                        _manager\n                    );\n        }\n        return _lastCommissionRedemption[_manager];\n    }\n\n    function hasRedeemedCommissionForCycle(address _manager, uint256 _cycle)\n        public\n        view\n        returns (bool)\n    {\n        if (_hasRedeemedCommissionForCycle[_manager][_cycle] == false) {\n            return\n                previousVersion == address(0)\n                    ? false\n                    : PeakDeFiStorage(previousVersion)\n                        .hasRedeemedCommissionForCycle(_manager, _cycle);\n        }\n        return _hasRedeemedCommissionForCycle[_manager][_cycle];\n    }\n\n    function riskTakenInCycle(address _manager, uint256 _cycle)\n        public\n        view\n        returns (uint256)\n    {\n        if (_riskTakenInCycle[_manager][_cycle] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).riskTakenInCycle(\n                        _manager,\n                        _cycle\n                    );\n        }\n        return _riskTakenInCycle[_manager][_cycle];\n    }\n\n    function baseRiskStakeFallback(address _manager)\n        public\n        view\n        returns (uint256)\n    {\n        if (_baseRiskStakeFallback[_manager] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).baseRiskStakeFallback(\n                        _manager\n                    );\n        }\n        return _baseRiskStakeFallback[_manager];\n    }\n\n    function totalCommissionOfCycle(uint256 _cycle)\n        public\n        view\n        returns (uint256)\n    {\n        if (_totalCommissionOfCycle[_cycle] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).totalCommissionOfCycle(\n                        _cycle\n                    );\n        }\n        return _totalCommissionOfCycle[_cycle];\n    }\n\n    function managePhaseEndBlock(uint256 _cycle) public view returns (uint256) {\n        if (_managePhaseEndBlock[_cycle] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).managePhaseEndBlock(\n                        _cycle\n                    );\n        }\n        return _managePhaseEndBlock[_cycle];\n    }\n\n    function lastActiveCycle(address _manager) public view returns (uint256) {\n        if (_lastActiveCycle[_manager] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion).lastActiveCycle(_manager);\n        }\n        return _lastActiveCycle[_manager];\n    }\n\n    /**\n    PeakDeFi\n   */\n    function peakReferralLastCommissionRedemption(address _manager)\n        public\n        view\n        returns (uint256)\n    {\n        if (_peakReferralLastCommissionRedemption[_manager] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion)\n                        .peakReferralLastCommissionRedemption(_manager);\n        }\n        return _peakReferralLastCommissionRedemption[_manager];\n    }\n\n    function peakReferralHasRedeemedCommissionForCycle(\n        address _manager,\n        uint256 _cycle\n    ) public view returns (bool) {\n        if (\n            _peakReferralHasRedeemedCommissionForCycle[_manager][_cycle] ==\n            false\n        ) {\n            return\n                previousVersion == address(0)\n                    ? false\n                    : PeakDeFiStorage(previousVersion)\n                        .peakReferralHasRedeemedCommissionForCycle(\n                        _manager,\n                        _cycle\n                    );\n        }\n        return _peakReferralHasRedeemedCommissionForCycle[_manager][_cycle];\n    }\n\n    function peakReferralTotalCommissionOfCycle(uint256 _cycle)\n        public\n        view\n        returns (uint256)\n    {\n        if (_peakReferralTotalCommissionOfCycle[_cycle] == 0) {\n            return\n                previousVersion == address(0)\n                    ? 0\n                    : PeakDeFiStorage(previousVersion)\n                        .peakReferralTotalCommissionOfCycle(_cycle);\n        }\n        return _peakReferralTotalCommissionOfCycle[_cycle];\n    }\n}\n"
    },
    "contracts/PeakDeFiProxyInterface.sol": {
      "content": "pragma solidity 0.5.17;\n\ninterface PeakDeFiProxyInterface {\n  function peakdefiFundAddress() external view returns (address payable);\n  function updatePeakDeFiFundAddress() external;\n}"
    },
    "contracts/PeakDeFiProxy.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./PeakDeFiFund.sol\";\n\ncontract PeakDeFiProxy {\n    address payable public peakdefiFundAddress;\n\n    event UpdatedFundAddress(address payable _newFundAddr);\n\n    constructor(address payable _fundAddr) public {\n        peakdefiFundAddress = _fundAddr;\n        emit UpdatedFundAddress(_fundAddr);\n    }\n\n    function updatePeakDeFiFundAddress() public {\n        require(msg.sender == peakdefiFundAddress, \"Sender not PeakDeFiFund\");\n        address payable nextVersion = PeakDeFiFund(peakdefiFundAddress)\n            .nextVersion();\n        require(nextVersion != address(0), \"Next version can't be empty\");\n        peakdefiFundAddress = nextVersion;\n        emit UpdatedFundAddress(peakdefiFundAddress);\n    }\n}\n"
    },
    "contracts/PeakDeFiLogic.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/cryptography/ECDSA.sol\";\nimport \"./PeakDeFiStorage.sol\";\nimport \"./derivatives/CompoundOrderFactory.sol\";\n\n/**\n * @title Part of the functions for PeakDeFiFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract PeakDeFiLogic is\n    PeakDeFiStorage,\n    Utils(address(0), address(0), address(0))\n{\n    /**\n     * @notice Executes function only during the given cycle phase.\n     * @param phase the cycle phase during which the function may be called\n     */\n    modifier during(CyclePhase phase) {\n        require(cyclePhase == phase);\n        if (cyclePhase == CyclePhase.Intermission) {\n            require(isInitialized);\n        }\n        _;\n    }\n\n    /**\n     * @notice Returns the length of the user's investments array.\n     * @return length of the user's investments array\n     */\n    function investmentsCount(address _userAddr)\n        public\n        view\n        returns (uint256 _count)\n    {\n        return userInvestments[_userAddr].length;\n    }\n\n    /**\n     * @notice Burns the RepToken balance of a manager who has been inactive for a certain number of cycles\n     * @param _deadman the manager whose RepToken balance will be burned\n     */\n    function burnDeadman(address _deadman)\n        public\n        nonReentrant\n        during(CyclePhase.Intermission)\n    {\n        require(_deadman != address(this));\n        require(\n            cycleNumber.sub(lastActiveCycle(_deadman)) > INACTIVE_THRESHOLD\n        );\n        uint256 balance = cToken.balanceOf(_deadman);\n        require(cToken.destroyTokens(_deadman, balance));\n        emit BurnDeadman(_deadman, balance);\n    }\n\n    /**\n     * @notice Creates a new investment for an ERC20 token. Backwards compatible.\n     * @param _tokenAddress address of the ERC20 token contract\n     * @param _stake amount of RepTokens to be staked in support of the investment\n     * @param _maxPrice the maximum price for the trade\n     */\n    function createInvestment(\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice\n    ) public {\n        bytes memory nil;\n        createInvestmentV2(\n            msg.sender,\n            _tokenAddress,\n            _stake,\n            _maxPrice,\n            nil,\n            true\n        );\n    }\n\n    function createInvestmentWithSignature(\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice,\n        bytes calldata _calldata,\n        bool _useKyber,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        require(!hasUsedSalt[_manager][_salt]);\n        bytes32 naiveHash = keccak256(\n            abi.encodeWithSelector(\n                this.createInvestmentWithSignature.selector,\n                abi.encode(\n                    _tokenAddress,\n                    _stake,\n                    _maxPrice,\n                    _calldata,\n                    _useKyber\n                ),\n                \"|END|\",\n                _salt,\n                address(this)\n            )\n        );\n        bytes32 msgHash = ECDSA.toEthSignedMessageHash(naiveHash);\n        address recoveredAddress = ECDSA.recover(msgHash, _signature);\n        require(recoveredAddress == _manager);\n\n        // Signature valid, record use of salt\n        hasUsedSalt[_manager][_salt] = true;\n\n        this.createInvestmentV2(\n            _manager,\n            _tokenAddress,\n            _stake,\n            _maxPrice,\n            _calldata,\n            _useKyber\n        );\n    }\n\n    /**\n     * @notice Called by user to sell the assets an investment invested in. Returns the staked RepToken plus rewards/penalties to the user.\n     *         The user can sell only part of the investment by changing _tokenAmount. Backwards compatible.\n     * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n     *   the original buy price and however much tokens that are not sold.\n     * @param _investmentId the ID of the investment\n     * @param _tokenAmount the amount of tokens to be sold.\n     * @param _minPrice the minimum price for the trade\n     */\n    function sellInvestmentAsset(\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice\n    ) public {\n        bytes memory nil;\n        sellInvestmentAssetV2(\n            msg.sender,\n            _investmentId,\n            _tokenAmount,\n            _minPrice,\n            nil,\n            true\n        );\n    }\n\n    function sellInvestmentWithSignature(\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice,\n        bytes calldata _calldata,\n        bool _useKyber,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        require(!hasUsedSalt[_manager][_salt]);\n        bytes32 naiveHash = keccak256(\n            abi.encodeWithSelector(\n                this.sellInvestmentWithSignature.selector,\n                abi.encode(\n                    _investmentId,\n                    _tokenAmount,\n                    _minPrice,\n                    _calldata,\n                    _useKyber\n                ),\n                \"|END|\",\n                _salt,\n                address(this)\n            )\n        );\n        bytes32 msgHash = ECDSA.toEthSignedMessageHash(naiveHash);\n        address recoveredAddress = ECDSA.recover(msgHash, _signature);\n        require(recoveredAddress == _manager);\n\n        // Signature valid, record use of salt\n        hasUsedSalt[_manager][_salt] = true;\n\n        this.sellInvestmentAssetV2(\n            _manager,\n            _investmentId,\n            _tokenAmount,\n            _minPrice,\n            _calldata,\n            _useKyber\n        );\n    }\n\n    /**\n     * @notice Creates a new investment for an ERC20 token.\n     * @param _tokenAddress address of the ERC20 token contract\n     * @param _stake amount of RepTokens to be staked in support of the investment\n     * @param _maxPrice the maximum price for the trade\n     * @param _calldata calldata for 1inch trading\n     * @param _useKyber true for Kyber Network, false for 1inch\n     */\n    function createInvestmentV2(\n        address _sender,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _maxPrice,\n        bytes memory _calldata,\n        bool _useKyber\n    )\n        public\n        during(CyclePhase.Manage)\n        nonReentrant\n        isValidToken(_tokenAddress)\n    {\n        require(msg.sender == _sender || msg.sender == address(this));\n        require(_stake > 0);\n        require(isKyberToken[_tokenAddress]);\n\n        // Verify user peak stake\n        uint256 peakStake = peakStaking.userStakeAmount(_sender);\n        require(peakStake >= peakManagerStakeRequired);\n\n        // Collect stake\n        require(cToken.generateTokens(address(this), _stake));\n        require(cToken.destroyTokens(_sender, _stake));\n\n        // Add investment to list\n        userInvestments[_sender].push(\n            Investment({\n                tokenAddress: _tokenAddress,\n                cycleNumber: cycleNumber,\n                stake: _stake,\n                tokenAmount: 0,\n                buyPrice: 0,\n                sellPrice: 0,\n                buyTime: now,\n                buyCostInUSDC: 0,\n                isSold: false\n            })\n        );\n\n        // Invest\n        uint256 investmentId = investmentsCount(_sender).sub(1);\n        __handleInvestment(\n            _sender,\n            investmentId,\n            0,\n            _maxPrice,\n            true,\n            _calldata,\n            _useKyber\n        );\n\n        // Update last active cycle\n        _lastActiveCycle[_sender] = cycleNumber;\n\n        // Emit event\n        __emitCreatedInvestmentEvent(_sender, investmentId);\n    }\n\n    /**\n     * @notice Called by user to sell the assets an investment invested in. Returns the staked RepToken plus rewards/penalties to the user.\n     *         The user can sell only part of the investment by changing _tokenAmount.\n     * @dev When selling only part of an investment, the old investment would be \"fully\" sold and a new investment would be created with\n     *   the original buy price and however much tokens that are not sold.\n     * @param _investmentId the ID of the investment\n     * @param _tokenAmount the amount of tokens to be sold.\n     * @param _minPrice the minimum price for the trade\n     */\n    function sellInvestmentAssetV2(\n        address _sender,\n        uint256 _investmentId,\n        uint256 _tokenAmount,\n        uint256 _minPrice,\n        bytes memory _calldata,\n        bool _useKyber\n    ) public nonReentrant during(CyclePhase.Manage) {\n        require(msg.sender == _sender || msg.sender == address(this));\n        Investment storage investment = userInvestments[_sender][_investmentId];\n        require(\n            investment.buyPrice > 0 &&\n                investment.cycleNumber == cycleNumber &&\n                !investment.isSold\n        );\n        require(_tokenAmount > 0 && _tokenAmount <= investment.tokenAmount);\n\n        // Create new investment for leftover tokens\n        bool isPartialSell = false;\n        uint256 stakeOfSoldTokens = investment.stake.mul(_tokenAmount).div(\n            investment.tokenAmount\n        );\n        if (_tokenAmount != investment.tokenAmount) {\n            isPartialSell = true;\n\n            __createInvestmentForLeftovers(\n                _sender,\n                _investmentId,\n                _tokenAmount\n            );\n\n            __emitCreatedInvestmentEvent(\n                _sender,\n                investmentsCount(_sender).sub(1)\n            );\n        }\n\n        // Update investment info\n        investment.isSold = true;\n\n        // Sell asset\n        (\n            uint256 actualDestAmount,\n            uint256 actualSrcAmount\n        ) = __handleInvestment(\n            _sender,\n            _investmentId,\n            _minPrice,\n            uint256(-1),\n            false,\n            _calldata,\n            _useKyber\n        );\n\n        __sellInvestmentUpdate(\n            _sender,\n            _investmentId,\n            stakeOfSoldTokens,\n            actualDestAmount\n        );\n    }\n\n    function __sellInvestmentUpdate(\n        address _sender,\n        uint256 _investmentId,\n        uint256 stakeOfSoldTokens,\n        uint256 actualDestAmount\n    ) internal {\n        Investment storage investment = userInvestments[_sender][_investmentId];\n\n        // Return staked RepToken\n        uint256 receiveRepTokenAmount = getReceiveRepTokenAmount(\n            stakeOfSoldTokens,\n            investment.sellPrice,\n            investment.buyPrice\n        );\n        __returnStake(receiveRepTokenAmount, stakeOfSoldTokens);\n\n        // Record risk taken in investment\n        __recordRisk(_sender, investment.stake, investment.buyTime);\n\n        // Update total funds\n        totalFundsInUSDC = totalFundsInUSDC.sub(investment.buyCostInUSDC).add(\n            actualDestAmount\n        );\n\n        // Emit event\n        __emitSoldInvestmentEvent(\n            _sender,\n            _investmentId,\n            receiveRepTokenAmount,\n            actualDestAmount\n        );\n    }\n\n    function __emitSoldInvestmentEvent(\n        address _sender,\n        uint256 _investmentId,\n        uint256 _receiveRepTokenAmount,\n        uint256 _actualDestAmount\n    ) internal {\n        Investment storage investment = userInvestments[_sender][_investmentId];\n        emit SoldInvestment(\n            cycleNumber,\n            _sender,\n            _investmentId,\n            investment.tokenAddress,\n            _receiveRepTokenAmount,\n            investment.sellPrice,\n            _actualDestAmount\n        );\n    }\n\n    function __createInvestmentForLeftovers(\n        address _sender,\n        uint256 _investmentId,\n        uint256 _tokenAmount\n    ) internal {\n        Investment storage investment = userInvestments[_sender][_investmentId];\n\n        uint256 stakeOfSoldTokens = investment.stake.mul(_tokenAmount).div(\n            investment.tokenAmount\n        );\n\n        // calculate the part of original USDC cost attributed to the sold tokens\n        uint256 soldBuyCostInUSDC = investment\n            .buyCostInUSDC\n            .mul(_tokenAmount)\n            .div(investment.tokenAmount);\n\n        userInvestments[_sender].push(\n            Investment({\n                tokenAddress: investment.tokenAddress,\n                cycleNumber: cycleNumber,\n                stake: investment.stake.sub(stakeOfSoldTokens),\n                tokenAmount: investment.tokenAmount.sub(_tokenAmount),\n                buyPrice: investment.buyPrice,\n                sellPrice: 0,\n                buyTime: investment.buyTime,\n                buyCostInUSDC: investment.buyCostInUSDC.sub(soldBuyCostInUSDC),\n                isSold: false\n            })\n        );\n\n        // update the investment object being sold\n        investment.tokenAmount = _tokenAmount;\n        investment.stake = stakeOfSoldTokens;\n        investment.buyCostInUSDC = soldBuyCostInUSDC;\n    }\n\n    function __emitCreatedInvestmentEvent(address _sender, uint256 _id)\n        internal\n    {\n        Investment storage investment = userInvestments[_sender][_id];\n        emit CreatedInvestment(\n            cycleNumber,\n            _sender,\n            _id,\n            investment.tokenAddress,\n            investment.stake,\n            investment.buyPrice,\n            investment.buyCostInUSDC,\n            investment.tokenAmount\n        );\n    }\n\n    function createCompoundOrderWithSignature(\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        require(!hasUsedSalt[_manager][_salt]);\n        bytes32 naiveHash = keccak256(\n            abi.encodeWithSelector(\n                this.createCompoundOrderWithSignature.selector,\n                abi.encode(\n                    _orderType,\n                    _tokenAddress,\n                    _stake,\n                    _minPrice,\n                    _maxPrice\n                ),\n                \"|END|\",\n                _salt,\n                address(this)\n            )\n        );\n        bytes32 msgHash = ECDSA.toEthSignedMessageHash(naiveHash);\n        address recoveredAddress = ECDSA.recover(msgHash, _signature);\n        require(recoveredAddress == _manager);\n\n        // Signature valid, record use of salt\n        hasUsedSalt[_manager][_salt] = true;\n\n        this.createCompoundOrder(\n            _manager,\n            _orderType,\n            _tokenAddress,\n            _stake,\n            _minPrice,\n            _maxPrice\n        );\n    }\n\n    function sellCompoundOrderWithSignature(\n        uint256 _orderId,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        require(!hasUsedSalt[_manager][_salt]);\n        bytes32 naiveHash = keccak256(\n            abi.encodeWithSelector(\n                this.sellCompoundOrderWithSignature.selector,\n                abi.encode(_orderId, _minPrice, _maxPrice),\n                \"|END|\",\n                _salt,\n                address(this)\n            )\n        );\n        bytes32 msgHash = ECDSA.toEthSignedMessageHash(naiveHash);\n        address recoveredAddress = ECDSA.recover(msgHash, _signature);\n        require(recoveredAddress == _manager);\n\n        // Signature valid, record use of salt\n        hasUsedSalt[_manager][_salt] = true;\n\n        this.sellCompoundOrder(_manager, _orderId, _minPrice, _maxPrice);\n    }\n\n    function repayCompoundOrderWithSignature(\n        uint256 _orderId,\n        uint256 _repayAmountInUSDC,\n        address _manager,\n        uint256 _salt,\n        bytes calldata _signature\n    ) external {\n        require(!hasUsedSalt[_manager][_salt]);\n        bytes32 naiveHash = keccak256(\n            abi.encodeWithSelector(\n                this.repayCompoundOrderWithSignature.selector,\n                abi.encode(_orderId, _repayAmountInUSDC),\n                \"|END|\",\n                _salt,\n                address(this)\n            )\n        );\n        bytes32 msgHash = ECDSA.toEthSignedMessageHash(naiveHash);\n        address recoveredAddress = ECDSA.recover(msgHash, _signature);\n        require(recoveredAddress == _manager);\n\n        // Signature valid, record use of salt\n        hasUsedSalt[_manager][_salt] = true;\n\n        this.repayCompoundOrder(_manager, _orderId, _repayAmountInUSDC);\n    }\n\n    /**\n     * @notice Creates a new Compound order to either short or leverage long a token.\n     * @param _orderType true for a short order, false for a levarage long order\n     * @param _tokenAddress address of the Compound token to be traded\n     * @param _stake amount of RepTokens to be staked\n     * @param _minPrice the minimum token price for the trade\n     * @param _maxPrice the maximum token price for the trade\n     */\n    function createCompoundOrder(\n        address _sender,\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    )\n        public\n        during(CyclePhase.Manage)\n        nonReentrant\n        isValidToken(_tokenAddress)\n    {\n        require(msg.sender == _sender || msg.sender == address(this));\n        require(_minPrice <= _maxPrice);\n        require(_stake > 0);\n        require(isCompoundToken[_tokenAddress]);\n\n        // Verify user peak stake\n        uint256 peakStake = peakStaking.userStakeAmount(_sender);\n        require(peakStake >= peakManagerStakeRequired);\n\n        // Collect stake\n        require(cToken.generateTokens(address(this), _stake));\n        require(cToken.destroyTokens(_sender, _stake));\n\n        // Create compound order and execute\n        uint256 collateralAmountInUSDC = totalFundsInUSDC.mul(_stake).div(\n            cToken.totalSupply()\n        );\n        CompoundOrder order = __createCompoundOrder(\n            _orderType,\n            _tokenAddress,\n            _stake,\n            collateralAmountInUSDC\n        );\n        usdc.safeApprove(address(order), 0);\n        usdc.safeApprove(address(order), collateralAmountInUSDC);\n        order.executeOrder(_minPrice, _maxPrice);\n\n        // Add order to list\n        userCompoundOrders[_sender].push(address(order));\n\n        // Update last active cycle\n        _lastActiveCycle[_sender] = cycleNumber;\n\n        __emitCreatedCompoundOrderEvent(\n            _sender,\n            address(order),\n            _orderType,\n            _tokenAddress,\n            _stake,\n            collateralAmountInUSDC\n        );\n    }\n\n    function __emitCreatedCompoundOrderEvent(\n        address _sender,\n        address order,\n        bool _orderType,\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 collateralAmountInUSDC\n    ) internal {\n        // Emit event\n        emit CreatedCompoundOrder(\n            cycleNumber,\n            _sender,\n            userCompoundOrders[_sender].length - 1,\n            address(order),\n            _orderType,\n            _tokenAddress,\n            _stake,\n            collateralAmountInUSDC\n        );\n    }\n\n    /**\n     * @notice Sells a compound order\n     * @param _orderId the ID of the order to be sold (index in userCompoundOrders[msg.sender])\n     * @param _minPrice the minimum token price for the trade\n     * @param _maxPrice the maximum token price for the trade\n     */\n    function sellCompoundOrder(\n        address _sender,\n        uint256 _orderId,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) public during(CyclePhase.Manage) nonReentrant {\n        require(msg.sender == _sender || msg.sender == address(this));\n        // Load order info\n        require(userCompoundOrders[_sender][_orderId] != address(0));\n        CompoundOrder order = CompoundOrder(\n            userCompoundOrders[_sender][_orderId]\n        );\n        require(order.isSold() == false && order.cycleNumber() == cycleNumber);\n\n        // Sell order\n        (uint256 inputAmount, uint256 outputAmount) = order.sellOrder(\n            _minPrice,\n            _maxPrice\n        );\n\n        // Return staked RepToken\n        uint256 stake = order.stake();\n        uint256 receiveRepTokenAmount = getReceiveRepTokenAmount(\n            stake,\n            outputAmount,\n            inputAmount\n        );\n        __returnStake(receiveRepTokenAmount, stake);\n\n        // Record risk taken\n        __recordRisk(_sender, stake, order.buyTime());\n\n        // Update total funds\n        totalFundsInUSDC = totalFundsInUSDC.sub(inputAmount).add(outputAmount);\n\n        // Emit event\n        emit SoldCompoundOrder(\n            cycleNumber,\n            _sender,\n            userCompoundOrders[_sender].length - 1,\n            address(order),\n            order.orderType(),\n            order.compoundTokenAddr(),\n            receiveRepTokenAmount,\n            outputAmount\n        );\n    }\n\n    /**\n     * @notice Repys debt for a Compound order to prevent the collateral ratio from dropping below threshold.\n     * @param _orderId the ID of the Compound order\n     * @param _repayAmountInUSDC amount of USDC to use for repaying debt\n     */\n    function repayCompoundOrder(\n        address _sender,\n        uint256 _orderId,\n        uint256 _repayAmountInUSDC\n    ) public during(CyclePhase.Manage) nonReentrant {\n        require(msg.sender == _sender || msg.sender == address(this));\n        // Load order info\n        require(userCompoundOrders[_sender][_orderId] != address(0));\n        CompoundOrder order = CompoundOrder(\n            userCompoundOrders[_sender][_orderId]\n        );\n        require(order.isSold() == false && order.cycleNumber() == cycleNumber);\n\n        // Repay loan\n        order.repayLoan(_repayAmountInUSDC);\n\n        // Emit event\n        emit RepaidCompoundOrder(\n            cycleNumber,\n            _sender,\n            userCompoundOrders[_sender].length - 1,\n            address(order),\n            _repayAmountInUSDC\n        );\n    }\n\n    function emergencyExitCompoundTokens(\n        address _sender,\n        uint256 _orderId,\n        address _tokenAddr,\n        address _receiver\n    ) public during(CyclePhase.Intermission) nonReentrant {\n        CompoundOrder order = CompoundOrder(userCompoundOrders[_sender][_orderId]);\n        order.emergencyExitTokens(_tokenAddr, _receiver);\n    }\n\n    function getReceiveRepTokenAmount(\n        uint256 stake,\n        uint256 output,\n        uint256 input\n    ) public pure returns (uint256 _amount) {\n        if (output >= input) {\n            // positive ROI, simply return stake * (1 + ROI)\n            return stake.mul(output).div(input);\n        } else {\n            // negative ROI\n            uint256 absROI = input.sub(output).mul(PRECISION).div(input);\n            if (absROI <= ROI_PUNISH_THRESHOLD) {\n                // ROI better than -10%, no punishment\n                return stake.mul(output).div(input);\n            } else if (\n                absROI > ROI_PUNISH_THRESHOLD && absROI < ROI_BURN_THRESHOLD\n            ) {\n                // ROI between -10% and -25%, punish\n                // return stake * (1 + roiWithPunishment) = stake * (1 + (-(6 * absROI - 0.5)))\n                return\n                    stake\n                        .mul(\n                        PRECISION.sub(\n                            ROI_PUNISH_SLOPE.mul(absROI).sub(\n                                ROI_PUNISH_NEG_BIAS\n                            )\n                        )\n                    )\n                        .div(PRECISION);\n            } else {\n                // ROI greater than 25%, burn all stake\n                return 0;\n            }\n        }\n    }\n\n    /**\n     * @notice Handles and investment by doing the necessary trades using __kyberTrade() or Fulcrum trading\n     * @param _investmentId the ID of the investment to be handled\n     * @param _minPrice the minimum price for the trade\n     * @param _maxPrice the maximum price for the trade\n     * @param _buy whether to buy or sell the given investment\n     * @param _calldata calldata for 1inch trading\n     * @param _useKyber true for Kyber Network, false for 1inch\n     */\n    function __handleInvestment(\n        address _sender,\n        uint256 _investmentId,\n        uint256 _minPrice,\n        uint256 _maxPrice,\n        bool _buy,\n        bytes memory _calldata,\n        bool _useKyber\n    ) internal returns (uint256 _actualDestAmount, uint256 _actualSrcAmount) {\n        Investment storage investment = userInvestments[_sender][_investmentId];\n        address token = investment.tokenAddress;\n        // Basic trading\n        uint256 dInS; // price of dest token denominated in src token\n        uint256 sInD; // price of src token denominated in dest token\n        if (_buy) {\n            if (_useKyber) {\n                (\n                    dInS,\n                    sInD,\n                    _actualDestAmount,\n                    _actualSrcAmount\n                ) = __kyberTrade(\n                    usdc,\n                    totalFundsInUSDC.mul(investment.stake).div(\n                        cToken.totalSupply()\n                    ),\n                    ERC20Detailed(token)\n                );\n            } else {\n                // 1inch trading\n                (\n                    dInS,\n                    sInD,\n                    _actualDestAmount,\n                    _actualSrcAmount\n                ) = __oneInchTrade(\n                    usdc,\n                    totalFundsInUSDC.mul(investment.stake).div(\n                        cToken.totalSupply()\n                    ),\n                    ERC20Detailed(token),\n                    _calldata\n                );\n            }\n            require(_minPrice <= dInS && dInS <= _maxPrice);\n            investment.buyPrice = dInS;\n            investment.tokenAmount = _actualDestAmount;\n            investment.buyCostInUSDC = _actualSrcAmount;\n        } else {\n            if (_useKyber) {\n                (\n                    dInS,\n                    sInD,\n                    _actualDestAmount,\n                    _actualSrcAmount\n                ) = __kyberTrade(\n                    ERC20Detailed(token),\n                    investment.tokenAmount,\n                    usdc\n                );\n            } else {\n                (\n                    dInS,\n                    sInD,\n                    _actualDestAmount,\n                    _actualSrcAmount\n                ) = __oneInchTrade(\n                    ERC20Detailed(token),\n                    investment.tokenAmount,\n                    usdc,\n                    _calldata\n                );\n            }\n\n            require(_minPrice <= sInD && sInD <= _maxPrice);\n            investment.sellPrice = sInD;\n        }\n    }\n\n    /**\n     * @notice Separated from createCompoundOrder() to avoid stack too deep error\n     */\n    function __createCompoundOrder(\n        bool _orderType, // True for shorting, false for longing\n        address _tokenAddress,\n        uint256 _stake,\n        uint256 _collateralAmountInUSDC\n    ) internal returns (CompoundOrder) {\n        CompoundOrderFactory factory = CompoundOrderFactory(\n            compoundFactoryAddr\n        );\n        uint256 loanAmountInUSDC = _collateralAmountInUSDC\n            .mul(COLLATERAL_RATIO_MODIFIER)\n            .div(PRECISION)\n            .mul(factory.getMarketCollateralFactor(_tokenAddress))\n            .div(PRECISION);\n        CompoundOrder order = factory.createOrder(\n            _tokenAddress,\n            cycleNumber,\n            _stake,\n            _collateralAmountInUSDC,\n            loanAmountInUSDC,\n            _orderType\n        );\n        return order;\n    }\n\n    /**\n     * @notice Returns stake to manager after investment is sold, including reward/penalty based on performance\n     */\n    function __returnStake(uint256 _receiveRepTokenAmount, uint256 _stake)\n        internal\n    {\n        require(cToken.destroyTokens(address(this), _stake));\n        require(cToken.generateTokens(msg.sender, _receiveRepTokenAmount));\n    }\n\n    /**\n     * @notice Records risk taken in a trade based on stake and time of investment\n     */\n    function __recordRisk(\n        address _sender,\n        uint256 _stake,\n        uint256 _buyTime\n    ) internal {\n        _riskTakenInCycle[_sender][cycleNumber] = riskTakenInCycle(\n            _sender,\n            cycleNumber\n        )\n            .add(_stake.mul(now.sub(_buyTime)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/cryptography/ECDSA.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * NOTE: This call _does not revert_ if the signature is invalid, or\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\n     * the zero address is returned.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Check the signature length\n        if (signature.length != 65) {\n            return (address(0));\n        }\n\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // ecrecover takes the signature parameters, and the only way to get them\n        // currently is to use assembly.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            r := mload(add(signature, 0x20))\n            s := mload(add(signature, 0x40))\n            v := byte(0, mload(add(signature, 0x60)))\n        }\n\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return address(0);\n        }\n\n        if (v != 27 && v != 28) {\n            return address(0);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        return ecrecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * replicates the behavior of the\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n     * JSON-RPC method.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "contracts/PeakDeFiLogic2.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./PeakDeFiStorage.sol\";\nimport \"./derivatives/CompoundOrderFactory.sol\";\nimport \"@nomiclabs/buidler/console.sol\";\n\n/**\n * @title Part of the functions for PeakDeFiFund\n * @author Zefram Lou (Zebang Liu)\n */\ncontract PeakDeFiLogic2 is\n    PeakDeFiStorage,\n    Utils(address(0), address(0), address(0))\n{\n    /**\n     * @notice Passes if the fund has not finalized the next smart contract to upgrade to\n     */\n    modifier notReadyForUpgrade {\n        require(hasFinalizedNextVersion == false);\n        _;\n    }\n\n    /**\n     * @notice Executes function only during the given cycle phase.\n     * @param phase the cycle phase during which the function may be called\n     */\n    modifier during(CyclePhase phase) {\n        require(cyclePhase == phase);\n        if (cyclePhase == CyclePhase.Intermission) {\n            require(isInitialized);\n        }\n        _;\n    }\n\n    /**\n     * Deposit & Withdraw\n     */\n\n    function depositEther(address _referrer) public payable {\n        bytes memory nil;\n        depositEtherAdvanced(true, nil, _referrer);\n    }\n\n    /**\n     * @notice Deposit Ether into the fund. Ether will be converted into USDC.\n     * @param _useKyber true for Kyber Network, false for 1inch\n     * @param _calldata calldata for 1inch trading\n     * @param _referrer the referrer's address\n\n     */\n    function depositEtherAdvanced(\n        bool _useKyber,\n        bytes memory _calldata,\n        address _referrer\n    ) public payable nonReentrant notReadyForUpgrade {\n        // Buy USDC with ETH\n        uint256 actualUSDCDeposited;\n        uint256 actualETHDeposited;\n        if (_useKyber) {\n            (, , actualUSDCDeposited, actualETHDeposited) = __kyberTrade(\n                ETH_TOKEN_ADDRESS,\n                msg.value,\n                usdc\n            );\n        } else {\n            (, , actualUSDCDeposited, actualETHDeposited) = __oneInchTrade(\n                ETH_TOKEN_ADDRESS,\n                msg.value,\n                usdc,\n                _calldata\n            );\n        }\n\n        // Send back leftover ETH\n        uint256 leftOverETH = msg.value.sub(actualETHDeposited);\n        if (leftOverETH > 0) {\n            msg.sender.transfer(leftOverETH);\n        }\n\n        // Register investment\n        __deposit(actualUSDCDeposited, _referrer);\n\n        // Emit event\n        emit Deposit(\n            cycleNumber,\n            msg.sender,\n            address(ETH_TOKEN_ADDRESS),\n            actualETHDeposited,\n            actualUSDCDeposited,\n            now\n        );\n    }\n\n    /**\n     * @notice Deposit USDC Stablecoin into the fund.\n     * @param _usdcAmount The amount of USDC to be deposited. May be different from actual deposited amount.\n     * @param _referrer the referrer's address\n     */\n    function depositUSDC(uint256 _usdcAmount, address _referrer)\n        public\n        nonReentrant\n        notReadyForUpgrade\n    {\n        usdc.safeTransferFrom(msg.sender, address(this), _usdcAmount);\n\n        // Register investment\n        __deposit(_usdcAmount, _referrer);\n\n        // Emit event\n        emit Deposit(\n            cycleNumber,\n            msg.sender,\n            USDC_ADDR,\n            _usdcAmount,\n            _usdcAmount,\n            now\n        );\n    }\n\n    function depositToken(\n        address _tokenAddr,\n        uint256 _tokenAmount,\n        address _referrer\n    ) public {\n        bytes memory nil;\n        depositTokenAdvanced(_tokenAddr, _tokenAmount, true, nil, _referrer);\n    }\n\n    /**\n     * @notice Deposit ERC20 tokens into the fund. Tokens will be converted into USDC.\n     * @param _tokenAddr the address of the token to be deposited\n     * @param _tokenAmount The amount of tokens to be deposited. May be different from actual deposited amount.\n     * @param _useKyber true for Kyber Network, false for 1inch\n     * @param _calldata calldata for 1inch trading\n     * @param _referrer the referrer's address\n     */\n    function depositTokenAdvanced(\n        address _tokenAddr,\n        uint256 _tokenAmount,\n        bool _useKyber,\n        bytes memory _calldata,\n        address _referrer\n    ) public nonReentrant notReadyForUpgrade isValidToken(_tokenAddr) {\n        require(\n            _tokenAddr != USDC_ADDR && _tokenAddr != address(ETH_TOKEN_ADDRESS)\n        );\n\n        ERC20Detailed token = ERC20Detailed(_tokenAddr);\n\n        token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\n        // Convert token into USDC\n        uint256 actualUSDCDeposited;\n        uint256 actualTokenDeposited;\n        if (_useKyber) {\n            (, , actualUSDCDeposited, actualTokenDeposited) = __kyberTrade(\n                token,\n                _tokenAmount,\n                usdc\n            );\n        } else {\n            (, , actualUSDCDeposited, actualTokenDeposited) = __oneInchTrade(\n                token,\n                _tokenAmount,\n                usdc,\n                _calldata\n            );\n        }\n        // Give back leftover tokens\n        uint256 leftOverTokens = _tokenAmount.sub(actualTokenDeposited);\n        if (leftOverTokens > 0) {\n            token.safeTransfer(msg.sender, leftOverTokens);\n        }\n\n        // Register investment\n        __deposit(actualUSDCDeposited, _referrer);\n\n        // Emit event\n        emit Deposit(\n            cycleNumber,\n            msg.sender,\n            _tokenAddr,\n            actualTokenDeposited,\n            actualUSDCDeposited,\n            now\n        );\n    }\n\n    function withdrawEther(uint256 _amountInUSDC) external {\n        bytes memory nil;\n        withdrawEtherAdvanced(_amountInUSDC, true, nil);\n    }\n\n    /**\n     * @notice Withdraws Ether by burning Shares.\n     * @param _amountInUSDC Amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     * @param _useKyber true for Kyber Network, false for 1inch\n     * @param _calldata calldata for 1inch trading\n     */\n    function withdrawEtherAdvanced(\n        uint256 _amountInUSDC,\n        bool _useKyber,\n        bytes memory _calldata\n    ) public nonReentrant during(CyclePhase.Intermission) {\n        // Buy ETH\n        uint256 actualETHWithdrawn;\n        uint256 actualUSDCWithdrawn;\n        if (_useKyber) {\n            (, , actualETHWithdrawn, actualUSDCWithdrawn) = __kyberTrade(\n                usdc,\n                _amountInUSDC,\n                ETH_TOKEN_ADDRESS\n            );\n        } else {\n            (, , actualETHWithdrawn, actualUSDCWithdrawn) = __oneInchTrade(\n                usdc,\n                _amountInUSDC,\n                ETH_TOKEN_ADDRESS,\n                _calldata\n            );\n        }\n\n        __withdraw(actualUSDCWithdrawn);\n\n        // Transfer Ether to user\n        msg.sender.transfer(actualETHWithdrawn);\n\n        // Emit event\n        emit Withdraw(\n            cycleNumber,\n            msg.sender,\n            address(ETH_TOKEN_ADDRESS),\n            actualETHWithdrawn,\n            actualUSDCWithdrawn,\n            now\n        );\n    }\n\n    /**\n     * @notice Withdraws Ether by burning Shares.\n     * @param _amountInUSDC Amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     */\n    function withdrawUSDC(uint256 _amountInUSDC)\n        external\n        nonReentrant\n        during(CyclePhase.Intermission)\n    {\n        __withdraw(_amountInUSDC);\n\n        // Transfer USDC to user\n        usdc.safeTransfer(msg.sender, _amountInUSDC);\n\n        // Emit event\n        emit Withdraw(\n            cycleNumber,\n            msg.sender,\n            USDC_ADDR,\n            _amountInUSDC,\n            _amountInUSDC,\n            now\n        );\n    }\n\n    function withdrawToken(address _tokenAddr, uint256 _amountInUSDC) external {\n        bytes memory nil;\n        withdrawTokenAdvanced(_tokenAddr, _amountInUSDC, true, nil);\n    }\n\n    /**\n     * @notice Withdraws funds by burning Shares, and converts the funds into the specified token using Kyber Network.\n     * @param _tokenAddr the address of the token to be withdrawn into the caller's account\n     * @param _amountInUSDC The amount of funds to be withdrawn expressed in USDC. Fixed-point decimal. May be different from actual amount.\n     * @param _useKyber true for Kyber Network, false for 1inch\n     * @param _calldata calldata for 1inch trading\n     */\n    function withdrawTokenAdvanced(\n        address _tokenAddr,\n        uint256 _amountInUSDC,\n        bool _useKyber,\n        bytes memory _calldata\n    )\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n        isValidToken(_tokenAddr)\n    {\n        require(\n            _tokenAddr != USDC_ADDR && _tokenAddr != address(ETH_TOKEN_ADDRESS)\n        );\n\n        ERC20Detailed token = ERC20Detailed(_tokenAddr);\n\n        // Convert USDC into desired tokens\n        uint256 actualTokenWithdrawn;\n        uint256 actualUSDCWithdrawn;\n        if (_useKyber) {\n            (, , actualTokenWithdrawn, actualUSDCWithdrawn) = __kyberTrade(\n                usdc,\n                _amountInUSDC,\n                token\n            );\n        } else {\n            (, , actualTokenWithdrawn, actualUSDCWithdrawn) = __oneInchTrade(\n                usdc,\n                _amountInUSDC,\n                token,\n                _calldata\n            );\n        }\n\n        __withdraw(actualUSDCWithdrawn);\n\n        // Transfer tokens to user\n        token.safeTransfer(msg.sender, actualTokenWithdrawn);\n\n        // Emit event\n        emit Withdraw(\n            cycleNumber,\n            msg.sender,\n            _tokenAddr,\n            actualTokenWithdrawn,\n            actualUSDCWithdrawn,\n            now\n        );\n    }\n\n    /**\n     * Manager registration\n     */\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using USDC as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     */\n    function registerWithUSDC()\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        require(!isPermissioned);\n        require(managersOnboardedThisCycle < maxNewManagersPerCycle);\n        managersOnboardedThisCycle = managersOnboardedThisCycle.add(1);\n\n        uint256 peakStake = peakStaking.userStakeAmount(msg.sender);\n        require(peakStake >= peakManagerStakeRequired);\n\n        uint256 donationInUSDC = newManagerRepToken.mul(reptokenPrice).div(PRECISION);\n        usdc.safeTransferFrom(msg.sender, address(this), donationInUSDC);\n        __register(donationInUSDC);\n    }\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using ETH as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     */\n    function registerWithETH()\n        public\n        payable\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        require(!isPermissioned);\n        require(managersOnboardedThisCycle < maxNewManagersPerCycle);\n        managersOnboardedThisCycle = managersOnboardedThisCycle.add(1);\n\n        uint256 peakStake = peakStaking.userStakeAmount(msg.sender);\n        require(peakStake >= peakManagerStakeRequired);\n\n        uint256 receivedUSDC;\n\n        // trade ETH for USDC\n        (, , receivedUSDC, ) = __kyberTrade(ETH_TOKEN_ADDRESS, msg.value, usdc);\n\n        // if USDC value is greater than the amount required, return excess USDC to msg.sender\n        uint256 donationInUSDC = newManagerRepToken.mul(reptokenPrice).div(PRECISION);\n        if (receivedUSDC > donationInUSDC) {\n            usdc.safeTransfer(msg.sender, receivedUSDC.sub(donationInUSDC));\n            receivedUSDC = donationInUSDC;\n        }\n\n        // register new manager\n        __register(receivedUSDC);\n    }\n\n    /**\n     * @notice Registers `msg.sender` as a manager, using tokens as payment. The more one pays, the more RepToken one gets.\n     *         There's a max RepToken amount that can be bought, and excess payment will be sent back to sender.\n     * @param _token the token to be used for payment\n     * @param _donationInTokens the amount of tokens to be used for registration, should use the token's native decimals\n     */\n    function registerWithToken(address _token, uint256 _donationInTokens)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        require(!isPermissioned);\n        require(managersOnboardedThisCycle < maxNewManagersPerCycle);\n        managersOnboardedThisCycle = managersOnboardedThisCycle.add(1);\n\n        uint256 peakStake = peakStaking.userStakeAmount(msg.sender);\n        require(peakStake >= peakManagerStakeRequired);\n\n        require(\n            _token != address(0) &&\n                _token != address(ETH_TOKEN_ADDRESS) &&\n                _token != USDC_ADDR\n        );\n        ERC20Detailed token = ERC20Detailed(_token);\n        require(token.totalSupply() > 0);\n\n        token.safeTransferFrom(msg.sender, address(this), _donationInTokens);\n\n        uint256 receivedUSDC;\n\n        (, , receivedUSDC, ) = __kyberTrade(token, _donationInTokens, usdc);\n\n        // if USDC value is greater than the amount required, return excess USDC to msg.sender\n        uint256 donationInUSDC = newManagerRepToken.mul(reptokenPrice).div(PRECISION);\n        if (receivedUSDC > donationInUSDC) {\n            usdc.safeTransfer(msg.sender, receivedUSDC.sub(donationInUSDC));\n            receivedUSDC = donationInUSDC;\n        }\n\n        // register new manager\n        __register(receivedUSDC);\n    }\n\n    function peakAdminRegisterManager(address _manager, uint256 _reptokenAmount)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n        onlyOwner\n    {\n        require(isPermissioned);\n\n        // mint REP for msg.sender\n        require(cToken.generateTokens(_manager, _reptokenAmount));\n\n        // Set risk fallback base stake\n        _baseRiskStakeFallback[_manager] = _baseRiskStakeFallback[_manager].add(\n            _reptokenAmount\n        );\n\n        // Set last active cycle for msg.sender to be the current cycle\n        _lastActiveCycle[_manager] = cycleNumber;\n\n        // emit events\n        emit Register(_manager, 0, _reptokenAmount);\n    }\n\n    /**\n     * @notice Sells tokens left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n     * @param _tokenAddr address of the token to be sold\n     * @param _calldata the 1inch trade call data\n     */\n    function sellLeftoverToken(address _tokenAddr, bytes calldata _calldata)\n        external\n        during(CyclePhase.Intermission)\n        nonReentrant\n        isValidToken(_tokenAddr)\n    {\n        ERC20Detailed token = ERC20Detailed(_tokenAddr);\n        (, , uint256 actualUSDCReceived, ) = __oneInchTrade(\n            token,\n            getBalance(token, address(this)),\n            usdc,\n            _calldata\n        );\n        totalFundsInUSDC = totalFundsInUSDC.add(actualUSDCReceived);\n    }\n\n    /**\n     * @notice Sells CompoundOrder left over due to manager not selling or KyberNetwork not having enough volume. Callable by anyone. Money goes to developer.\n     * @param _orderAddress address of the CompoundOrder to be sold\n     */\n    function sellLeftoverCompoundOrder(address payable _orderAddress)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        // Load order info\n        require(_orderAddress != address(0));\n        CompoundOrder order = CompoundOrder(_orderAddress);\n        require(order.isSold() == false && order.cycleNumber() < cycleNumber);\n\n        // Sell short order\n        // Not using outputAmount returned by order.sellOrder() because _orderAddress could point to a malicious contract\n        uint256 beforeUSDCBalance = usdc.balanceOf(address(this));\n        order.sellOrder(0, MAX_QTY);\n        uint256 actualUSDCReceived = usdc.balanceOf(address(this)).sub(\n            beforeUSDCBalance\n        );\n\n        totalFundsInUSDC = totalFundsInUSDC.add(actualUSDCReceived);\n    }\n\n    /**\n     * @notice Registers `msg.sender` as a manager.\n     * @param _donationInUSDC the amount of USDC to be used for registration\n     */\n    function __register(uint256 _donationInUSDC) internal {\n        require(\n            cToken.balanceOf(msg.sender) == 0 &&\n                userInvestments[msg.sender].length == 0 &&\n                userCompoundOrders[msg.sender].length == 0\n        ); // each address can only join once\n\n        // mint REP for msg.sender\n        uint256 repAmount = _donationInUSDC.mul(PRECISION).div(reptokenPrice);\n        require(cToken.generateTokens(msg.sender, repAmount));\n\n        // Set risk fallback base stake\n        _baseRiskStakeFallback[msg.sender] = repAmount;\n\n        // Set last active cycle for msg.sender to be the current cycle\n        _lastActiveCycle[msg.sender] = cycleNumber;\n\n        // keep USDC in the fund\n        totalFundsInUSDC = totalFundsInUSDC.add(_donationInUSDC);\n\n        // emit events\n        emit Register(msg.sender, _donationInUSDC, repAmount);\n    }\n\n    /**\n     * @notice Handles deposits by minting PeakDeFi Shares & updating total funds.\n     * @param _depositUSDCAmount The amount of the deposit in USDC\n     * @param _referrer The deposit referrer\n     */\n    function __deposit(uint256 _depositUSDCAmount, address _referrer) internal {\n        // Register investment and give shares\n        uint256 shareAmount;\n        if (sToken.totalSupply() == 0 || totalFundsInUSDC == 0) {\n            uint256 usdcDecimals = getDecimals(usdc);\n            shareAmount = _depositUSDCAmount.mul(PRECISION).div(10**usdcDecimals);\n        } else {\n            shareAmount = _depositUSDCAmount.mul(sToken.totalSupply()).div(\n                totalFundsInUSDC\n            );\n        }\n        require(sToken.generateTokens(msg.sender, shareAmount));\n        totalFundsInUSDC = totalFundsInUSDC.add(_depositUSDCAmount);\n        totalFundsAtManagePhaseStart = totalFundsAtManagePhaseStart.add(\n            _depositUSDCAmount\n        );\n\n        // Handle peakReferralToken\n        if (peakReward.canRefer(msg.sender, _referrer)) {\n            peakReward.refer(msg.sender, _referrer);\n        }\n        address actualReferrer = peakReward.referrerOf(msg.sender);\n        if (actualReferrer != address(0)) {\n            require(\n                peakReferralToken.generateTokens(actualReferrer, shareAmount)\n            );\n        }\n    }\n\n    /**\n     * @notice Handles deposits by burning PeakDeFi Shares & updating total funds.\n     * @param _withdrawUSDCAmount The amount of the withdrawal in USDC\n     */\n    function __withdraw(uint256 _withdrawUSDCAmount) internal {\n        // Burn Shares\n        uint256 shareAmount = _withdrawUSDCAmount.mul(sToken.totalSupply()).div(\n            totalFundsInUSDC\n        );\n        require(sToken.destroyTokens(msg.sender, shareAmount));\n        totalFundsInUSDC = totalFundsInUSDC.sub(_withdrawUSDCAmount);\n\n        // Handle peakReferralToken\n        address actualReferrer = peakReward.referrerOf(msg.sender);\n        if (actualReferrer != address(0)) {\n            uint256 balance = peakReferralToken.balanceOf(actualReferrer);\n            uint256 burnReferralTokenAmount = shareAmount > balance\n                ? balance\n                : shareAmount;\n            require(\n                peakReferralToken.destroyTokens(\n                    actualReferrer,\n                    burnReferralTokenAmount\n                )\n            );\n        }\n    }\n}\n"
    },
    "@nomiclabs/buidler/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.8.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logByte(byte p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(byte)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/PeakDeFiLogic3.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./PeakDeFiStorage.sol\";\n\ncontract PeakDeFiLogic3 is\n    PeakDeFiStorage,\n    Utils(address(0), address(0), address(0))\n{\n    /**\n     * @notice Passes if the fund has not finalized the next smart contract to upgrade to\n     */\n    modifier notReadyForUpgrade {\n        require(hasFinalizedNextVersion == false);\n        _;\n    }\n\n    /**\n     * @notice Executes function only during the given cycle phase.\n     * @param phase the cycle phase during which the function may be called\n     */\n    modifier during(CyclePhase phase) {\n        require(cyclePhase == phase);\n        if (cyclePhase == CyclePhase.Intermission) {\n            require(isInitialized);\n        }\n        _;\n    }\n\n    /**\n     * Next phase transition handler\n     * @notice Moves the fund to the next phase in the investment cycle.\n     */\n    function nextPhase() public nonReentrant {\n        require(\n            now >= startTimeOfCyclePhase.add(phaseLengths[uint256(cyclePhase)])\n        );\n\n        if (isInitialized == false) {\n            // first cycle of this smart contract deployment\n            // check whether ready for starting cycle\n            isInitialized = true;\n            require(proxyAddr != address(0)); // has initialized proxy\n            require(proxy.peakdefiFundAddress() == address(this)); // upgrade complete\n            require(hasInitializedTokenListings); // has initialized token listings\n\n            // execute initialization function\n            __init();\n\n            require(\n                previousVersion == address(0) ||\n                    (previousVersion != address(0) &&\n                        getBalance(usdc, address(this)) > 0)\n            ); // has transfered assets from previous version\n        } else {\n            // normal phase changing\n            if (cyclePhase == CyclePhase.Intermission) {\n                require(hasFinalizedNextVersion == false); // Shouldn't progress to next phase if upgrading\n\n                // Update total funds at management phase's beginning\n                totalFundsAtManagePhaseStart = totalFundsInUSDC;\n\n                // reset number of managers onboarded\n                managersOnboardedThisCycle = 0;\n            } else if (cyclePhase == CyclePhase.Manage) {\n                // Burn any RepToken left in PeakDeFiFund's account\n                require(\n                    cToken.destroyTokens(\n                        address(this),\n                        cToken.balanceOf(address(this))\n                    )\n                );\n\n                // Pay out commissions and fees\n                uint256 profit = 0;\n\n\n                    uint256 usdcBalanceAtManagePhaseStart\n                 = totalFundsAtManagePhaseStart.add(totalCommissionLeft);\n                if (\n                    getBalance(usdc, address(this)) >\n                    usdcBalanceAtManagePhaseStart\n                ) {\n                    profit = getBalance(usdc, address(this)).sub(\n                        usdcBalanceAtManagePhaseStart\n                    );\n                }\n\n                totalFundsInUSDC = getBalance(usdc, address(this))\n                    .sub(totalCommissionLeft)\n                    .sub(peakReferralTotalCommissionLeft);\n\n                // Calculate manager commissions\n                uint256 commissionThisCycle = COMMISSION_RATE\n                    .mul(profit)\n                    .add(ASSET_FEE_RATE.mul(totalFundsInUSDC))\n                    .div(PRECISION);\n                _totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle(\n                    cycleNumber\n                )\n                    .add(commissionThisCycle); // account for penalties\n                totalCommissionLeft = totalCommissionLeft.add(\n                    commissionThisCycle\n                );\n\n                // Calculate referrer commissions\n                uint256 peakReferralCommissionThisCycle = PEAK_COMMISSION_RATE\n                    .mul(profit)\n                    .mul(peakReferralToken.totalSupply())\n                    .div(sToken.totalSupply())\n                    .div(PRECISION);\n                _peakReferralTotalCommissionOfCycle[cycleNumber] = peakReferralTotalCommissionOfCycle(\n                    cycleNumber\n                )\n                    .add(peakReferralCommissionThisCycle);\n                peakReferralTotalCommissionLeft = peakReferralTotalCommissionLeft\n                    .add(peakReferralCommissionThisCycle);\n\n                totalFundsInUSDC = getBalance(usdc, address(this))\n                    .sub(totalCommissionLeft)\n                    .sub(peakReferralTotalCommissionLeft);\n\n                // Give the developer PeakDeFi shares inflation funding\n                uint256 devFunding = devFundingRate\n                    .mul(sToken.totalSupply())\n                    .div(PRECISION);\n                require(sToken.generateTokens(devFundingAccount, devFunding));\n\n                // Emit event\n                emit TotalCommissionPaid(\n                    cycleNumber,\n                    totalCommissionOfCycle(cycleNumber)\n                );\n                emit PeakReferralTotalCommissionPaid(\n                    cycleNumber,\n                    peakReferralTotalCommissionOfCycle(cycleNumber)\n                );\n\n                _managePhaseEndBlock[cycleNumber] = block.number;\n\n                // Clear/update upgrade related data\n                if (nextVersion == address(this)) {\n                    // The developer proposed a candidate, but the managers decide to not upgrade at all\n                    // Reset upgrade process\n                    delete nextVersion;\n                    delete hasFinalizedNextVersion;\n                }\n                if (nextVersion != address(0)) {\n                    hasFinalizedNextVersion = true;\n                    emit FinalizedNextVersion(cycleNumber, nextVersion);\n                }\n\n                // Start new cycle\n                cycleNumber = cycleNumber.add(1);\n            }\n\n            cyclePhase = CyclePhase(addmod(uint256(cyclePhase), 1, 2));\n        }\n\n        startTimeOfCyclePhase = now;\n\n        // Reward caller if they're a manager\n        if (cToken.balanceOf(msg.sender) > 0) {\n            require(cToken.generateTokens(msg.sender, NEXT_PHASE_REWARD));\n        }\n\n        emit ChangedPhase(\n            cycleNumber,\n            uint256(cyclePhase),\n            now,\n            totalFundsInUSDC\n        );\n    }\n\n    /**\n     * @notice Initializes several important variables after smart contract upgrade\n     */\n    function __init() internal {\n        _managePhaseEndBlock[cycleNumber.sub(1)] = block.number;\n\n        // load values from previous version\n        totalCommissionLeft = previousVersion == address(0)\n            ? 0\n            : PeakDeFiStorage(previousVersion).totalCommissionLeft();\n        totalFundsInUSDC = getBalance(usdc, address(this)).sub(\n            totalCommissionLeft\n        );\n    }\n\n    /**\n     * Upgrading functions\n     */\n\n    /**\n     * @notice Allows the developer to propose a candidate smart contract for the fund to upgrade to.\n     *          The developer may change the candidate during the Intermission phase.\n     * @param _candidate the address of the candidate smart contract\n     * @return True if successfully changed candidate, false otherwise.\n     */\n    function developerInitiateUpgrade(address payable _candidate)\n        public\n        onlyOwner\n        notReadyForUpgrade\n        during(CyclePhase.Intermission)\n        nonReentrant\n        returns (bool _success)\n    {\n        if (_candidate == address(0) || _candidate == address(this)) {\n            return false;\n        }\n        nextVersion = _candidate;\n        emit DeveloperInitiatedUpgrade(cycleNumber, _candidate);\n        return true;\n    }\n\n    /**\n        Commission functions\n     */\n\n    /**\n     * @notice Returns the commission balance of `_manager`\n     * @return the commission balance and the received penalty, denoted in USDC\n     */\n    function commissionBalanceOf(address _manager)\n        public\n        view\n        returns (uint256 _commission, uint256 _penalty)\n    {\n        if (lastCommissionRedemption(_manager) >= cycleNumber) {\n            return (0, 0);\n        }\n        uint256 cycle = lastCommissionRedemption(_manager) > 0\n            ? lastCommissionRedemption(_manager)\n            : 1;\n        uint256 cycleCommission;\n        uint256 cyclePenalty;\n        for (; cycle < cycleNumber; cycle++) {\n            (cycleCommission, cyclePenalty) = commissionOfAt(_manager, cycle);\n            _commission = _commission.add(cycleCommission);\n            _penalty = _penalty.add(cyclePenalty);\n        }\n    }\n\n    /**\n     * @notice Returns the commission amount received by `_manager` in the `_cycle`th cycle\n     * @return the commission amount and the received penalty, denoted in USDC\n     */\n    function commissionOfAt(address _manager, uint256 _cycle)\n        public\n        view\n        returns (uint256 _commission, uint256 _penalty)\n    {\n        if (hasRedeemedCommissionForCycle(_manager, _cycle)) {\n            return (0, 0);\n        }\n        // take risk into account\n        uint256 baseRepTokenBalance = cToken.balanceOfAt(\n            _manager,\n            managePhaseEndBlock(_cycle.sub(1))\n        );\n        uint256 baseStake = baseRepTokenBalance == 0\n            ? baseRiskStakeFallback(_manager)\n            : baseRepTokenBalance;\n        if (baseRepTokenBalance == 0 && baseRiskStakeFallback(_manager) == 0) {\n            return (0, 0);\n        }\n        uint256 riskTakenProportion = riskTakenInCycle(_manager, _cycle)\n            .mul(PRECISION)\n            .div(baseStake.mul(MIN_RISK_TIME)); // risk / threshold\n        riskTakenProportion = riskTakenProportion > PRECISION\n            ? PRECISION\n            : riskTakenProportion; // max proportion is 1\n\n        uint256 fullCommission = totalCommissionOfCycle(_cycle)\n            .mul(cToken.balanceOfAt(_manager, managePhaseEndBlock(_cycle)))\n            .div(cToken.totalSupplyAt(managePhaseEndBlock(_cycle)));\n\n        _commission = fullCommission.mul(riskTakenProportion).div(PRECISION);\n        _penalty = fullCommission.sub(_commission);\n    }\n\n    /**\n     * @notice Redeems commission.\n     */\n    function redeemCommission(bool _inShares)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        uint256 commission = __redeemCommission();\n\n        if (_inShares) {\n            // Deposit commission into fund\n            __deposit(commission);\n\n            // Emit deposit event\n            emit Deposit(\n                cycleNumber,\n                msg.sender,\n                USDC_ADDR,\n                commission,\n                commission,\n                now\n            );\n        } else {\n            // Transfer the commission in USDC\n            usdc.safeTransfer(msg.sender, commission);\n        }\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle.\n     * @param _inShares true to redeem in PeakDeFi Shares, false to redeem in USDC\n     * @param _cycle the cycle for which the commission will be redeemed.\n     *        Commissions for a cycle will be redeemed during the Intermission phase of the next cycle, so _cycle must < cycleNumber.\n     */\n    function redeemCommissionForCycle(bool _inShares, uint256 _cycle)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        require(_cycle < cycleNumber);\n\n        uint256 commission = __redeemCommissionForCycle(_cycle);\n\n        if (_inShares) {\n            // Deposit commission into fund\n            __deposit(commission);\n\n            // Emit deposit event\n            emit Deposit(\n                cycleNumber,\n                msg.sender,\n                USDC_ADDR,\n                commission,\n                commission,\n                now\n            );\n        } else {\n            // Transfer the commission in USDC\n            usdc.safeTransfer(msg.sender, commission);\n        }\n    }\n\n    /**\n     * @notice Redeems the commission for all previous cycles. Updates the related variables.\n     * @return the amount of commission to be redeemed\n     */\n    function __redeemCommission() internal returns (uint256 _commission) {\n        require(lastCommissionRedemption(msg.sender) < cycleNumber);\n\n        uint256 penalty; // penalty received for not taking enough risk\n        (_commission, penalty) = commissionBalanceOf(msg.sender);\n\n        // record the redemption to prevent double-redemption\n        for (\n            uint256 i = lastCommissionRedemption(msg.sender);\n            i < cycleNumber;\n            i++\n        ) {\n            _hasRedeemedCommissionForCycle[msg.sender][i] = true;\n        }\n        _lastCommissionRedemption[msg.sender] = cycleNumber;\n\n        // record the decrease in commission pool\n        totalCommissionLeft = totalCommissionLeft.sub(_commission);\n        // include commission penalty to this cycle's total commission pool\n        _totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle(\n            cycleNumber\n        )\n            .add(penalty);\n        // clear investment arrays to save space\n        delete userInvestments[msg.sender];\n        delete userCompoundOrders[msg.sender];\n\n        emit CommissionPaid(cycleNumber, msg.sender, _commission);\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle. Updates the related variables.\n     * @param _cycle the cycle for which the commission will be redeemed\n     * @return the amount of commission to be redeemed\n     */\n    function __redeemCommissionForCycle(uint256 _cycle)\n        internal\n        returns (uint256 _commission)\n    {\n        require(!hasRedeemedCommissionForCycle(msg.sender, _cycle));\n\n        uint256 penalty; // penalty received for not taking enough risk\n        (_commission, penalty) = commissionOfAt(msg.sender, _cycle);\n\n        _hasRedeemedCommissionForCycle[msg.sender][_cycle] = true;\n\n        // record the decrease in commission pool\n        totalCommissionLeft = totalCommissionLeft.sub(_commission);\n        // include commission penalty to this cycle's total commission pool\n        _totalCommissionOfCycle[cycleNumber] = totalCommissionOfCycle(\n            cycleNumber\n        )\n            .add(penalty);\n        // clear investment arrays to save space\n        delete userInvestments[msg.sender];\n        delete userCompoundOrders[msg.sender];\n\n        emit CommissionPaid(_cycle, msg.sender, _commission);\n    }\n\n    /**\n     * @notice Handles deposits by minting PeakDeFi Shares & updating total funds.\n     * @param _depositUSDCAmount The amount of the deposit in USDC\n     */\n    function __deposit(uint256 _depositUSDCAmount) internal {\n        // Register investment and give shares\n        if (sToken.totalSupply() == 0 || totalFundsInUSDC == 0) {\n            require(sToken.generateTokens(msg.sender, _depositUSDCAmount));\n        } else {\n            require(\n                sToken.generateTokens(\n                    msg.sender,\n                    _depositUSDCAmount.mul(sToken.totalSupply()).div(\n                        totalFundsInUSDC\n                    )\n                )\n            );\n        }\n        totalFundsInUSDC = totalFundsInUSDC.add(_depositUSDCAmount);\n    }\n\n    /**\n    PeakDeFi\n   */\n\n    /**\n     * @notice Returns the commission balance of `_referrer`\n     * @return the commission balance, denoted in USDC\n     */\n    function peakReferralCommissionBalanceOf(address _referrer)\n        public\n        view\n        returns (uint256 _commission)\n    {\n        if (peakReferralLastCommissionRedemption(_referrer) >= cycleNumber) {\n            return (0);\n        }\n        uint256 cycle = peakReferralLastCommissionRedemption(_referrer) > 0\n            ? peakReferralLastCommissionRedemption(_referrer)\n            : 1;\n        uint256 cycleCommission;\n        for (; cycle < cycleNumber; cycle++) {\n            (cycleCommission) = peakReferralCommissionOfAt(_referrer, cycle);\n            _commission = _commission.add(cycleCommission);\n        }\n    }\n\n    /**\n     * @notice Returns the commission amount received by `_referrer` in the `_cycle`th cycle\n     * @return the commission amount, denoted in USDC\n     */\n    function peakReferralCommissionOfAt(address _referrer, uint256 _cycle)\n        public\n        view\n        returns (uint256 _commission)\n    {\n        _commission = peakReferralTotalCommissionOfCycle(_cycle)\n            .mul(\n            peakReferralToken.balanceOfAt(\n                _referrer,\n                managePhaseEndBlock(_cycle)\n            )\n        )\n            .div(peakReferralToken.totalSupplyAt(managePhaseEndBlock(_cycle)));\n    }\n\n    /**\n     * @notice Redeems commission.\n     */\n    function peakReferralRedeemCommission()\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        uint256 commission = __peakReferralRedeemCommission();\n\n        // Transfer the commission in USDC\n        usdc.safeApprove(address(peakReward), commission);\n        peakReward.payCommission(msg.sender, address(usdc), commission, false);\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle.\n     * @param _cycle the cycle for which the commission will be redeemed.\n     *        Commissions for a cycle will be redeemed during the Intermission phase of the next cycle, so _cycle must < cycleNumber.\n     */\n    function peakReferralRedeemCommissionForCycle(uint256 _cycle)\n        public\n        during(CyclePhase.Intermission)\n        nonReentrant\n    {\n        require(_cycle < cycleNumber);\n\n        uint256 commission = __peakReferralRedeemCommissionForCycle(_cycle);\n\n        // Transfer the commission in USDC\n        usdc.safeApprove(address(peakReward), commission);\n        peakReward.payCommission(msg.sender, address(usdc), commission, false);\n    }\n\n    /**\n     * @notice Redeems the commission for all previous cycles. Updates the related variables.\n     * @return the amount of commission to be redeemed\n     */\n    function __peakReferralRedeemCommission()\n        internal\n        returns (uint256 _commission)\n    {\n        require(peakReferralLastCommissionRedemption(msg.sender) < cycleNumber);\n\n        _commission = peakReferralCommissionBalanceOf(msg.sender);\n\n        // record the redemption to prevent double-redemption\n        for (\n            uint256 i = peakReferralLastCommissionRedemption(msg.sender);\n            i < cycleNumber;\n            i++\n        ) {\n            _peakReferralHasRedeemedCommissionForCycle[msg.sender][i] = true;\n        }\n        _peakReferralLastCommissionRedemption[msg.sender] = cycleNumber;\n\n        // record the decrease in commission pool\n        peakReferralTotalCommissionLeft = peakReferralTotalCommissionLeft.sub(\n            _commission\n        );\n\n        emit PeakReferralCommissionPaid(cycleNumber, msg.sender, _commission);\n    }\n\n    /**\n     * @notice Redeems commission for a particular cycle. Updates the related variables.\n     * @param _cycle the cycle for which the commission will be redeemed\n     * @return the amount of commission to be redeemed\n     */\n    function __peakReferralRedeemCommissionForCycle(uint256 _cycle)\n        internal\n        returns (uint256 _commission)\n    {\n        require(!peakReferralHasRedeemedCommissionForCycle(msg.sender, _cycle));\n\n        _commission = peakReferralCommissionOfAt(msg.sender, _cycle);\n\n        _peakReferralHasRedeemedCommissionForCycle[msg.sender][_cycle] = true;\n\n        // record the decrease in commission pool\n        peakReferralTotalCommissionLeft = peakReferralTotalCommissionLeft.sub(\n            _commission\n        );\n\n        emit PeakReferralCommissionPaid(_cycle, msg.sender, _commission);\n    }\n}\n"
    },
    "contracts/test/TestCERC20.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"../interfaces/CERC20.sol\";\nimport \"../interfaces/Comptroller.sol\";\n\ncontract TestCERC20 is CERC20 {\n  using SafeMath for uint;\n\n  uint public constant PRECISION = 10 ** 18;\n  uint public constant MAX_UINT = 2 ** 256 - 1;\n\n  address public _underlying;\n  uint public _exchangeRateCurrent = 10 ** (18 - 8) * PRECISION;\n\n  mapping(address => uint) public _balanceOf;\n  mapping(address => uint) public _borrowBalanceCurrent;\n\n  Comptroller public COMPTROLLER;\n\n  constructor(address __underlying, address _comptrollerAddr) public {\n    _underlying = __underlying;\n    COMPTROLLER = Comptroller(_comptrollerAddr);\n  }\n\n  function mint(uint mintAmount) external returns (uint) {\n    ERC20Detailed token = ERC20Detailed(_underlying);\n    require(token.transferFrom(msg.sender, address(this), mintAmount));\n\n    _balanceOf[msg.sender] = _balanceOf[msg.sender].add(mintAmount.mul(10 ** this.decimals()).div(PRECISION));\n    \n    return 0;\n  }\n\n  function redeemUnderlying(uint redeemAmount) external returns (uint) {\n    _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(redeemAmount.mul(10 ** this.decimals()).div(PRECISION));\n\n    ERC20Detailed token = ERC20Detailed(_underlying);\n    require(token.transfer(msg.sender, redeemAmount));\n\n    return 0;\n  }\n  \n  function borrow(uint amount) external returns (uint) {\n    // add to borrow balance\n    _borrowBalanceCurrent[msg.sender] = _borrowBalanceCurrent[msg.sender].add(amount);\n\n    // transfer asset\n    ERC20Detailed token = ERC20Detailed(_underlying);\n    require(token.transfer(msg.sender, amount));\n\n    return 0;\n  }\n  \n  function repayBorrow(uint amount) external returns (uint) {\n    // accept repayment\n    ERC20Detailed token = ERC20Detailed(_underlying);\n    uint256 repayAmount = amount == MAX_UINT ? _borrowBalanceCurrent[msg.sender] : amount;\n    require(token.transferFrom(msg.sender, address(this), repayAmount));\n\n    // subtract from borrow balance\n    _borrowBalanceCurrent[msg.sender] = _borrowBalanceCurrent[msg.sender].sub(repayAmount);\n\n    return 0;\n  }\n\n  function balanceOf(address account) external view returns (uint) { return _balanceOf[account]; }\n  function borrowBalanceCurrent(address account) external returns (uint) { return _borrowBalanceCurrent[account]; }\n  function underlying() external view returns (address) { return _underlying; }\n  function exchangeRateCurrent() external returns (uint) { return _exchangeRateCurrent; }\n  function decimals() external view returns (uint) { return 8; }\n}"
    },
    "contracts/test/TestCERC20Factory.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./TestCERC20.sol\";\n\ncontract TestCERC20Factory {\n  mapping(address => address) public createdTokens;\n\n  event CreatedToken(address underlying, address cToken);\n\n  function newToken(address underlying, address comptroller) public returns(address) {\n    require(createdTokens[underlying] == address(0));\n    \n    TestCERC20 token = new TestCERC20(underlying, comptroller);\n    createdTokens[underlying] = address(token);\n    emit CreatedToken(underlying, address(token));\n    return address(token);\n  }\n}"
    },
    "contracts/test/TestCEther.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/CEther.sol\";\nimport \"../interfaces/Comptroller.sol\";\n\ncontract TestCEther is CEther {\n  using SafeMath for uint;\n\n  uint public constant PRECISION = 10 ** 18;\n\n  uint public _exchangeRateCurrent = 10 ** (18 - 8) * PRECISION;\n\n  mapping(address => uint) public _balanceOf;\n  mapping(address => uint) public _borrowBalanceCurrent;\n\n  Comptroller public COMPTROLLER;\n\n  constructor(address _comptrollerAddr) public {\n    COMPTROLLER = Comptroller(_comptrollerAddr);\n  }\n\n  function mint() external payable {\n    _balanceOf[msg.sender] = _balanceOf[msg.sender].add(msg.value.mul(10 ** this.decimals()).div(PRECISION));\n  }\n\n  function redeemUnderlying(uint redeemAmount) external returns (uint) {\n    _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(redeemAmount.mul(10 ** this.decimals()).div(PRECISION));\n\n    msg.sender.transfer(redeemAmount);\n\n    return 0;\n  }\n  \n  function borrow(uint amount) external returns (uint) {\n    // add to borrow balance\n    _borrowBalanceCurrent[msg.sender] = _borrowBalanceCurrent[msg.sender].add(amount);\n\n    // transfer asset\n    msg.sender.transfer(amount);\n\n    return 0;\n  }\n  \n  function repayBorrow() external payable {\n    _borrowBalanceCurrent[msg.sender] = _borrowBalanceCurrent[msg.sender].sub(msg.value);\n  }\n\n  function balanceOf(address account) external view returns (uint) { return _balanceOf[account]; }\n  function borrowBalanceCurrent(address account) external returns (uint) { return _borrowBalanceCurrent[account]; }\n  function exchangeRateCurrent() external returns (uint) { return _exchangeRateCurrent; }\n  function decimals() external view returns (uint) { return 8; }\n\n  function() external payable {}\n}"
    },
    "contracts/test/TestComptroller.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/Comptroller.sol\";\nimport \"../interfaces/PriceOracle.sol\";\nimport \"../interfaces/CERC20.sol\";\n\ncontract TestComptroller is Comptroller {\n  using SafeMath for uint;\n\n  uint256 internal constant PRECISION = 10 ** 18;\n\n  mapping(address => address[]) public getAssetsIn;\n  uint256 internal collateralFactor = 2 * PRECISION / 3;\n\n  constructor() public {}\n\n  function enterMarkets(address[] calldata cTokens) external returns (uint[] memory) {\n    uint[] memory errors = new uint[](cTokens.length);\n    for (uint256 i = 0; i < cTokens.length; i = i.add(1)) {\n      getAssetsIn[msg.sender].push(cTokens[i]);\n      errors[i] = 0;\n    }\n    return errors;\n  }\n\n  function markets(address /*cToken*/) external view returns (bool isListed, uint256 collateralFactorMantissa) {\n    return (true, collateralFactor);\n  }\n}"
    },
    "contracts/test/TestKyberNetwork.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"../interfaces/KyberNetwork.sol\";\nimport \"../Utils.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\n\ncontract TestKyberNetwork is KyberNetwork, Utils(address(0), address(0), address(0)), Ownable {\n  mapping(address => uint256) public priceInUSDC;\n\n  constructor(address[] memory _tokens, uint256[] memory _pricesInUSDC) public {\n    for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n      priceInUSDC[_tokens[i]] = _pricesInUSDC[i];\n    }\n  }\n\n  function setTokenPrice(address _token, uint256 _priceInUSDC) public onlyOwner {\n    priceInUSDC[_token] = _priceInUSDC;\n  }\n\n  function setAllTokenPrices(address[] memory _tokens, uint256[] memory _pricesInUSDC) public onlyOwner {\n    for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n      priceInUSDC[_tokens[i]] = _pricesInUSDC[i];\n    }\n  }\n\n  function getExpectedRate(ERC20Detailed src, ERC20Detailed dest, uint /*srcQty*/) external view returns (uint expectedRate, uint slippageRate) \n  {\n    uint256 result = priceInUSDC[address(src)].mul(10**getDecimals(dest)).mul(PRECISION).div(priceInUSDC[address(dest)].mul(10**getDecimals(src)));\n    return (result, result);\n  }\n\n  function tradeWithHint(\n    ERC20Detailed src,\n    uint srcAmount,\n    ERC20Detailed dest,\n    address payable destAddress,\n    uint maxDestAmount,\n    uint /*minConversionRate*/,\n    address /*walletId*/,\n    bytes calldata /*hint*/\n  )\n    external\n    payable\n    returns(uint)\n  {\n    require(calcDestAmount(src, srcAmount, dest) <= maxDestAmount);\n\n    if (address(src) == address(ETH_TOKEN_ADDRESS)) {\n      require(srcAmount == msg.value);\n    } else {\n      require(src.transferFrom(msg.sender, address(this), srcAmount));\n    }\n\n    if (address(dest) == address(ETH_TOKEN_ADDRESS)) {\n      destAddress.transfer(calcDestAmount(src, srcAmount, dest));\n    } else {\n      require(dest.transfer(destAddress, calcDestAmount(src, srcAmount, dest)));\n    }\n    return calcDestAmount(src, srcAmount, dest);\n  }\n\n  function calcDestAmount(\n    ERC20Detailed src,\n    uint srcAmount,\n    ERC20Detailed dest\n  ) internal view returns (uint destAmount) {\n    return srcAmount.mul(priceInUSDC[address(src)]).mul(10**getDecimals(dest)).div(priceInUSDC[address(dest)].mul(10**getDecimals(src)));\n  }\n\n  function() external payable {}\n}\n"
    },
    "contracts/test/TestPriceOracle.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/ownership/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"../interfaces/PriceOracle.sol\";\nimport \"../interfaces/CERC20.sol\";\n\ncontract TestPriceOracle is PriceOracle, Ownable {\n  using SafeMath for uint;\n\n  uint public constant PRECISION = 10 ** 18;\n  address public CETH_ADDR;\n\n  mapping(address => uint256) public priceInUSD;\n\n  constructor(address[] memory _tokens, uint256[] memory _pricesInUSD, address _cETH) public {\n    for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n      priceInUSD[_tokens[i]] = _pricesInUSD[i];\n    }\n    CETH_ADDR = _cETH;\n  }\n\n  function setTokenPrice(address _token, uint256 _priceInUSD) public onlyOwner {\n    priceInUSD[_token] = _priceInUSD;\n  }\n\n  function getUnderlyingPrice(address _cToken) external view returns (uint) {\n    if (_cToken == CETH_ADDR) {\n      return priceInUSD[_cToken];\n    }\n    CERC20 cToken = CERC20(_cToken);\n    ERC20Detailed underlying = ERC20Detailed(cToken.underlying());\n    return priceInUSD[_cToken].mul(PRECISION).div(10 ** uint256(underlying.decimals()));\n  }\n}"
    },
    "contracts/test/TestToken.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Mintable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\n\n/**\n * @title An ERC20 token used for testing.\n * @author Zefram Lou (Zebang Liu)\n */\ncontract TestToken is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n  constructor(string memory name, string memory symbol, uint8 decimals)\n    public\n    ERC20Detailed(name, symbol, decimals)\n  {}\n}\n"
    },
    "contracts/test/TestTokenFactory.sol": {
      "content": "pragma solidity 0.5.17;\n\nimport \"./TestToken.sol\";\n\ncontract TestTokenFactory {\n  mapping(bytes32 => address) public createdTokens;\n\n  event CreatedToken(string symbol, address addr);\n\n  function newToken(string memory name, string memory symbol, uint8 decimals) public returns(address) {\n    bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\n    require(createdTokens[symbolHash] == address(0));\n    \n    TestToken token = new TestToken(name, symbol, decimals);\n    token.addMinter(msg.sender);\n    token.renounceMinter();\n    createdTokens[symbolHash] = address(token);\n    emit CreatedToken(symbol, address(token));\n    return address(token);\n  }\n\n  function getToken(string memory symbol) public view returns(address) {\n    return createdTokens[keccak256(abi.encodePacked(symbol))];\n  }\n}\n"
    },
    "contracts/test/TestUniswapOracle.sol": {
      "content": "pragma solidity 0.5.17;\n\ncontract TestUniswapOracle {\n    function update() external returns (bool success) {\n        return true;\n    }\n\n    function consult(address token, uint256 amountIn)\n        external\n        view\n        returns (uint256 amountOut)\n    {\n        return 3 * 10**5; // 1 PEAK = 0.30 USDC\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}
