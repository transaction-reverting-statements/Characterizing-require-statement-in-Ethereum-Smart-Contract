{"IERC1132.sol":{"content":"pragma solidity 0.5.7;\r\n\r\n/**\r\n * @title ERC1132 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/1132\r\n */\r\n\r\ncontract IERC1132 {\r\n    /**\r\n     * @dev Reasons why a user\u0027s tokens have been locked\r\n     */\r\n    mapping(address =\u003e bytes32[]) public lockReason;\r\n\r\n    /**\r\n     * @dev locked token structure\r\n     */\r\n    struct LockToken {\r\n        uint256 amount;\r\n        uint256 validity;\r\n        bool claimed;\r\n    }\r\n\r\n    /**\r\n     * @dev Holds number \u0026 validity of tokens locked for a given reason for\r\n     *      a specified address\r\n     */\r\n    mapping(address =\u003e mapping(bytes32 =\u003e LockToken)) public locked;\r\n\r\n    /**\r\n     * @dev Records data of all the tokens Locked\r\n     */\r\n    event Locked(\r\n        address indexed _of,\r\n        bytes32 indexed _reason,\r\n        uint256 _amount,\r\n        uint256 _validity\r\n    );\r\n\r\n    /**\r\n     * @dev Records data of all the tokens unlocked\r\n     */\r\n    event Unlocked(\r\n        address indexed _of,\r\n        bytes32 indexed _reason,\r\n        uint256 _amount\r\n    );\r\n    \r\n    /**\r\n     * @dev Locks a specified amount of tokens against an address,\r\n     *      for a specified reason and time\r\n     * @param _reason The reason to lock tokens\r\n     * @param _amount Number of tokens to be locked\r\n     * @param _time Lock time in seconds\r\n     */\r\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time)\r\n        public returns (bool);\r\n  \r\n    /**\r\n     * @dev Returns tokens locked for a specified address for a\r\n     *      specified reason\r\n     *\r\n     * @param _of The address whose tokens are locked\r\n     * @param _reason The reason to query the lock tokens for\r\n     */\r\n    function tokensLocked(address _of, bytes32 _reason)\r\n        public view returns (uint256 amount);\r\n    \r\n    /**\r\n     * @dev Returns tokens locked for a specified address for a\r\n     *      specified reason at a specific time\r\n     *\r\n     * @param _of The address whose tokens are locked\r\n     * @param _reason The reason to query the lock tokens for\r\n     * @param _time The timestamp to query the lock tokens for\r\n     */\r\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n        public view returns (uint256 amount);\r\n    \r\n    /**\r\n     * @dev Returns total tokens held by an address (locked + transferable)\r\n     * @param _of The address to query the total balance of\r\n     */\r\n    function totalBalanceOf(address _of)\r\n        public view returns (uint256 amount);\r\n    \r\n    /**\r\n     * @dev Extends lock for a specified reason and time\r\n     * @param _reason The reason to lock tokens\r\n     * @param _time Lock extension time in seconds\r\n     */\r\n    function extendLock(bytes32 _reason, uint256 _time)\r\n        public returns (bool);\r\n    \r\n    /**\r\n     * @dev Increase number of tokens locked for a specified reason\r\n     * @param _reason The reason to lock tokens\r\n     * @param _amount Number of tokens to be increased\r\n     */\r\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\r\n        public returns (bool);\r\n\r\n    /**\r\n     * @dev Returns unlockable tokens for a specified address for a specified reason\r\n     * @param _of The address to query the the unlockable token count of\r\n     * @param _reason The reason to query the unlockable tokens for\r\n     */\r\n    function tokensUnlockable(address _of, bytes32 _reason)\r\n        public view returns (uint256 amount);\r\n \r\n    /**\r\n     * @dev Unlocks the unlockable tokens of a specified address\r\n     * @param _of Address of user, claiming back unlockable tokens\r\n     */\r\n    function unlock(address _of)\r\n        public returns (uint256 unlockableTokens);\r\n\r\n    /**\r\n     * @dev Gets the unlockable tokens of a specified address\r\n     * @param _of The address to query the the unlockable token count of\r\n     */\r\n    function getUnlockableTokens(address _of)\r\n        public view returns (uint256 unlockableTokens);\r\n\r\n}"},"IERC20.sol":{"content":"pragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value)\r\n        external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external view returns (uint256);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n"},"INXMMaster.sol":{"content":"/* Copyright (C) 2017 NexusMutual.io\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\ncontract INXMMaster {\r\n\r\n    address public tokenAddress;\r\n\r\n    address public owner;\r\n\r\n\r\n    uint public pauseTime;\r\n\r\n    function delegateCallBack(bytes32 myid) external;\r\n\r\n    function masterInitialized() public view returns(bool);\r\n    \r\n    function isInternal(address _add) public view returns(bool);\r\n\r\n    function isPause() public view returns(bool check);\r\n\r\n    function isOwner(address _add) public view returns(bool);\r\n\r\n    function isMember(address _add) public view returns(bool);\r\n    \r\n    function checkIsAuthToGoverned(address _add) public view returns(bool);\r\n\r\n    function updatePauseTime(uint _time) public;\r\n\r\n    function dAppLocker() public view returns(address _add);\r\n\r\n    function dAppToken() public view returns(address _add);\r\n\r\n    function getLatestAddress(bytes2 _contractName) public view returns(address payable contractAddress);\r\n}"},"Iupgradable.sol":{"content":"pragma solidity 0.5.7;\r\n\r\nimport \"./INXMMaster.sol\";\r\n\r\n\r\ncontract Iupgradable {\r\n\r\n    INXMMaster public ms;\r\n    address public nxMasterAddress;\r\n\r\n    modifier onlyInternal {\r\n        require(ms.isInternal(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier isMemberAndcheckPause {\r\n        require(ms.isPause() == false \u0026\u0026 ms.isMember(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(ms.isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier checkPause {\r\n        require(ms.isPause() == false);\r\n        _;\r\n    }\r\n\r\n    modifier isMember {\r\n        require(ms.isMember(msg.sender), \"Not member\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Iupgradable Interface to update dependent contract address\r\n     */\r\n    function  changeDependentContractAddress() public;\r\n\r\n    /**\r\n     * @dev change master address\r\n     * @param _masterAddress is the new address\r\n     */\r\n    function changeMasterAddress(address _masterAddress) public {\r\n        if (address(ms) != address(0)) {\r\n            require(address(ms) == msg.sender, \"Not master\");\r\n        }\r\n        ms = INXMMaster(_masterAddress);\r\n        nxMasterAddress = _masterAddress;\r\n    }\r\n\r\n}\r\n"},"NXMToken.sol":{"content":"/* Copyright (C) 2017 NexusMutual.io\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\r\n\r\npragma solidity 0.5.7;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\ncontract NXMToken is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    event WhiteListed(address indexed member);\r\n\r\n    event BlackListed(address indexed member);\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowed;\r\n\r\n    mapping (address =\u003e bool) public whiteListed;\r\n\r\n    mapping(address =\u003e uint) public isLockedForMV;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string public name = \"NXM\";\r\n    string public symbol = \"NXM\";\r\n    uint8 public decimals = 18;\r\n    address public operator;\r\n\r\n    modifier canTransfer(address _to) {\r\n        require(whiteListed[_to]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        if (operator != address(0))\r\n            require(msg.sender == operator);\r\n        _;\r\n    }\r\n\r\n    constructor(address _founderAddress, uint _initialSupply) public {\r\n        _mint(_founderAddress, _initialSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n    * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n    * @param owner address The address which owns the funds.\r\n    * @param spender address The address which will spend the funds.\r\n    * @return A uint256 specifying the amount of tokens still available for the spender.\r\n    */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    )\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n    * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    * @param spender The address which will spend the funds.\r\n    * @param value The amount of tokens to be spent.\r\n    */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To increment\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param spender The address which will spend the funds.\r\n    * @param addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].add(addedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n    * approve should be called when allowed_[_spender] == 0. To decrement\r\n    * allowed value is better to use this function to avoid 2 calls (and wait until\r\n    * the first transaction is mined)\r\n    * From MonolithDAO Token.sol\r\n    * @param spender The address which will spend the funds.\r\n    * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    )\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = (\r\n        _allowed[msg.sender][spender].sub(subtractedValue));\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds a user to whitelist\r\n    * @param _member address to add to whitelist\r\n    */\r\n    function addToWhiteList(address _member) public onlyOperator returns (bool) {\r\n        whiteListed[_member] = true;\r\n        emit WhiteListed(_member);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev removes a user from whitelist\r\n    * @param _member address to remove from whitelist\r\n    */\r\n    function removeFromWhiteList(address _member) public onlyOperator returns (bool) {\r\n        whiteListed[_member] = false;\r\n        emit BlackListed(_member);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev change operator address \r\n    * @param _newOperator address of new operator\r\n    */\r\n    function changeOperator(address _newOperator) public onlyOperator returns (bool) {\r\n        operator = _newOperator;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev burns an amount of the tokens of the message sender\r\n    * account.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens from the target address and decrements allowance\r\n    * @param from address The address which you want to send tokens from\r\n    * @param value uint256 The amount of token to be burned\r\n    */\r\n    function burnFrom(address from, uint256 value) public returns (bool) {\r\n        _burnFrom(from, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev function that mints an amount of the token and assigns it to\r\n    * an account.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function mint(address account, uint256 amount) public onlyOperator {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public canTransfer(to) returns (bool) {\r\n\r\n        require(isLockedForMV[msg.sender] \u003c now); // if not voted under governance\r\n        require(value \u003c= _balances[msg.sender]);\r\n        _transfer(to, value); \r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens to the operator from the specified address\r\n    * @param from The address to transfer from.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function operatorTransfer(address from, uint256 value) public onlyOperator returns (bool) {\r\n        require(value \u003c= _balances[from]);\r\n        _transferFrom(from, operator, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        public\r\n        canTransfer(to)\r\n        returns (bool)\r\n    {\r\n        require(isLockedForMV[from] \u003c now); // if not voted under governance\r\n        require(value \u003c= _balances[from]);\r\n        require(value \u003c= _allowed[from][msg.sender]);\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Lock the user\u0027s tokens \r\n     * @param _of user\u0027s address.\r\n     */\r\n    function lockForMemberVote(address _of, uint _days) public onlyOperator {\r\n        if (_days.add(now) \u003e isLockedForMV[_of])\r\n            isLockedForMV[_of] = _days.add(now);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address to, uint256 value) internal {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param from address The address which you want to send tokens from\r\n    * @param to address The address which you want to transfer to\r\n    * @param value uint256 the amount of tokens to be transferred\r\n    */\r\n    function _transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    )\r\n        internal\r\n    {\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that mints an amount of the token and assigns it to\r\n    * an account. This encapsulates the modification of balances such that the\r\n    * proper events are emitted.\r\n    * @param account The account that will receive the created tokens.\r\n    * @param amount The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0));\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param amount The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(amount \u003c= _balances[account]);\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[account] = _balances[account].sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Internal function that burns an amount of the token of a given\r\n    * account, deducting from the sender\u0027s allowance for said account. Uses the\r\n    * internal burn function.\r\n    * @param account The account whose tokens will be burnt.\r\n    * @param value The amount that will be burnt.\r\n    */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        require(value \u003c= _allowed[account][msg.sender]);\r\n\r\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\r\n        // this function needs to emit an event with the updated approval.\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\r\n        value);\r\n        _burn(account, value);\r\n    }\r\n}"},"SafeMath.sol":{"content":"pragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n"},"TokenController.sol":{"content":"/* Copyright (C) 2017 NexusMutual.io\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU General Public License as published by\r\n  the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n  along with this program.  If not, see http://www.gnu.org/licenses/ */\r\n\r\npragma solidity 0.5.7;\r\n\r\nimport \"./Iupgradable.sol\";\r\nimport \"./IERC1132.sol\";\r\nimport \"./NXMToken.sol\";\r\n\r\n\r\ncontract TokenController is IERC1132, Iupgradable {\r\n    using SafeMath for uint256;\r\n\r\n    event Burned(address indexed member, bytes32 lockedUnder, uint256 amount);\r\n\r\n    NXMToken public token;\r\n    \r\n    /**\r\n    * @dev Just for interface\r\n    */\r\n    function changeDependentContractAddress() public {\r\n        token = NXMToken(ms.tokenAddress());\r\n    }\r\n\r\n    /**\r\n     * @dev to change the operator address \r\n     * @param _newOperator is the new address of operator\r\n     */\r\n    function changeOperator(address _newOperator) public onlyInternal {\r\n        token.changeOperator(_newOperator);\r\n    }\r\n    \r\n    /**\r\n    * @dev Locks a specified amount of tokens,\r\n    *    for a specified reason and time\r\n    * @param _reason The reason to lock tokens\r\n    * @param _amount Number of tokens to be locked\r\n    * @param _time Lock time in seconds\r\n    */\r\n    function lock(bytes32 _reason, uint256 _amount, uint256 _time) public returns (bool)\r\n    {\r\n        // If tokens are already locked, then functions extendLock or\r\n        // increaseLockAmount should be used to make any changes\r\n        _lock(msg.sender, _reason, _amount, _time);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Locks a specified amount of tokens against an address,\r\n    *    for a specified reason and time\r\n    * @param _reason The reason to lock tokens\r\n    * @param _amount Number of tokens to be locked\r\n    * @param _time Lock time in seconds\r\n    * @param _of address whose tokens are to be locked\r\n    */\r\n    function lockOf(address _of, bytes32 _reason, uint256 _amount, uint256 _time)\r\n        public\r\n        onlyInternal\r\n        returns (bool)\r\n    {\r\n        // If tokens are already locked, then functions extendLock or\r\n        // increaseLockAmount should be used to make any changes\r\n        _lock(_of, _reason, _amount, _time);\r\n        return true;\r\n    }\r\n  \r\n    /**\r\n    * @dev Extends lock for a specified reason and time\r\n    * @param _reason The reason to lock tokens\r\n    * @param _time Lock extension time in seconds\r\n    */\r\n    function extendLock(bytes32 _reason, uint256 _time)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _extendLock(msg.sender, _reason, _time);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Extends lock for a specified reason and time\r\n    * @param _reason The reason to lock tokens\r\n    * @param _time Lock extension time in seconds\r\n    */\r\n    function extendLockOf(address _of, bytes32 _reason, uint256 _time)\r\n        public\r\n        onlyInternal\r\n        returns (bool)\r\n    {\r\n        _extendLock(_of, _reason, _time);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n    * @dev Increase number of tokens locked for a specified reason\r\n    * @param _reason The reason to lock tokens\r\n    * @param _amount Number of tokens to be increased\r\n    */\r\n    function increaseLockAmount(bytes32 _reason, uint256 _amount)\r\n        public\r\n        returns (bool)\r\n    {    \r\n        _increaseLockAmount(msg.sender, _reason, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev burns tokens of an address \r\n     * @param _of is the address to burn tokens of\r\n     * @param amount is the amount to burn\r\n     * @return the boolean status of the burning process\r\n     */\r\n    function burnFrom (address _of, uint amount) public onlyInternal returns (bool) {\r\n        return token.burnFrom(_of, amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Burns locked tokens of a user \r\n    * @param _of address whose tokens are to be burned\r\n    * @param _reason lock reason for which tokens are to be burned\r\n    * @param _amount amount of tokens to burn\r\n    */\r\n    function burnLockedTokens(address _of, bytes32 _reason, uint256 _amount) public onlyInternal {\r\n        _burnLockedTokens(_of, _reason, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev reduce lock duration for a specified reason and time\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to lock tokens\r\n    * @param _time Lock reduction time in seconds\r\n    */\r\n    function reduceLock(address _of, bytes32 _reason, uint256 _time) public onlyInternal {\r\n        _reduceLock(_of, _reason, _time);\r\n    } \r\n\r\n    /**\r\n    * @dev Released locked tokens of an address locked for a specific reason\r\n    * @param _of address whose tokens are to be released from lock\r\n    * @param _reason reason of the lock\r\n    * @param _amount amount of tokens to release\r\n    */\r\n    function releaseLockedTokens(address _of, bytes32 _reason, uint256 _amount) \r\n        public \r\n        onlyInternal \r\n    {\r\n        _releaseLockedTokens(_of, _reason, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Adds an address to whitelist maintained in the contract\r\n    * @param _member address to add to whitelist\r\n    */\r\n    function addToWhitelist(address _member) public onlyInternal {\r\n        token.addToWhiteList(_member);\r\n    }\r\n\r\n    /**\r\n    * @dev Removes an address from the whitelist in the token\r\n    * @param _member address to remove\r\n    */\r\n    function removeFromWhitelist(address _member) public onlyInternal {\r\n        token.removeFromWhiteList(_member);\r\n    }\r\n\r\n    /**\r\n    * @dev Mints new token for an address\r\n    * @param _member address to reward the minted tokens\r\n    * @param _amount number of tokens to mint\r\n    */\r\n    function mint(address _member, uint _amount) public onlyInternal {\r\n        token.mint(_member, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Lock the user\u0027s tokens \r\n     * @param _of user\u0027s address.\r\n     */\r\n    function lockForMemberVote(address _of, uint _days) public onlyInternal {\r\n        token.lockForMemberVote(_of, _days);\r\n    }\r\n\r\n    /**\r\n    * @dev Unlocks the unlockable tokens of a specified address\r\n    * @param _of Address of user, claiming back unlockable tokens\r\n    */\r\n    function unlock(address _of)\r\n        public\r\n        returns (uint256 unlockableTokens)\r\n    {\r\n        uint256 lockedTokens;\r\n\r\n        for (uint256 i = 0; i \u003c lockReason[_of].length; i++) {\r\n            lockedTokens = _tokensUnlockable(_of, lockReason[_of][i]);\r\n            if (lockedTokens \u003e 0) {\r\n                unlockableTokens = unlockableTokens.add(lockedTokens);\r\n                locked[_of][lockReason[_of][i]].claimed = true;\r\n                emit Unlocked(_of, lockReason[_of][i], lockedTokens);\r\n            }\r\n        }  \r\n\r\n        if (unlockableTokens \u003e 0)\r\n            require(token.transfer(_of, unlockableTokens));\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the validity of locked tokens of a specified address\r\n    * @param _of The address to query the validity\r\n    * @param reason reason for which tokens were locked \r\n    */\r\n    function getLockedTokensValidity(address _of, bytes32 reason)\r\n        public\r\n        view\r\n        returns (uint256 validity)\r\n    {\r\n        validity = locked[_of][reason].validity;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the unlockable tokens of a specified address\r\n    * @param _of The address to query the the unlockable token count of\r\n    */\r\n    function getUnlockableTokens(address _of)\r\n        public\r\n        view\r\n        returns (uint256 unlockableTokens)\r\n    {\r\n        for (uint256 i = 0; i \u003c lockReason[_of].length; i++) {\r\n            unlockableTokens = unlockableTokens.add(_tokensUnlockable(_of, lockReason[_of][i]));\r\n        }  \r\n    }\r\n\r\n    /**\r\n    * @dev Returns tokens locked for a specified address for a\r\n    *    specified reason\r\n    *\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to query the lock tokens for\r\n    */\r\n    function tokensLocked(address _of, bytes32 _reason)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return _tokensLocked(_of, _reason);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns unlockable tokens for a specified address for a specified reason\r\n    * @param _of The address to query the the unlockable token count of\r\n    * @param _reason The reason to query the unlockable tokens for\r\n    */\r\n    function tokensUnlockable(address _of, bytes32 _reason)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return _tokensUnlockable(_of, _reason);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256)\r\n    {\r\n        return token.totalSupply();\r\n    }\r\n\r\n    /**\r\n    * @dev Returns tokens locked for a specified address for a\r\n    *    specified reason at a specific time\r\n    *\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to query the lock tokens for\r\n    * @param _time The timestamp to query the lock tokens for\r\n    */\r\n    function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        return _tokensLockedAtTime(_of, _reason, _time);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns total tokens held by an address (locked + transferable)\r\n    * @param _of The address to query the total balance of\r\n    */\r\n    function totalBalanceOf(address _of)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        amount = token.balanceOf(_of);\r\n\r\n        for (uint256 i = 0; i \u003c lockReason[_of].length; i++) {\r\n            amount = amount.add(_tokensLocked(_of, lockReason[_of][i]));\r\n        }   \r\n    }\r\n\r\n    /**\r\n    * @dev Returns the total locked tokens at time\r\n    * @param _of member whose locked tokens are to be calculate\r\n    * @param _time timestamp when the tokens should be locked\r\n    */\r\n    function totalLockedBalance(address _of, uint256 _time) public view returns (uint256 amount) {\r\n        amount = _totalLockedBalance(_of, _time);\r\n    }  \r\n\r\n    /**\r\n    * @dev Internal function to returns the total locked tokens at time\r\n    * @param _of member whose locked tokens are to be calculate\r\n    * @param _time timestamp when the tokens should be locked\r\n    */\r\n    function _totalLockedBalance(address _of, uint256 _time) internal view returns (uint256 amount) {\r\n        for (uint256 i = 0; i \u003c lockReason[_of].length; i++) {\r\n            amount = amount.add(_tokensLockedAtTime(_of, lockReason[_of][i], _time));\r\n        }\r\n    } \r\n\r\n    /**\r\n    * @dev Locks a specified amount of tokens against an address,\r\n    *    for a specified reason and time\r\n    * @param _of address whose tokens are to be locked\r\n    * @param _reason The reason to lock tokens\r\n    * @param _amount Number of tokens to be locked\r\n    * @param _time Lock time in seconds\r\n    */\r\n    function _lock(address _of, bytes32 _reason, uint256 _amount, uint256 _time) internal {\r\n        require(_tokensLocked(_of, _reason) == 0);\r\n        require(_amount != 0);\r\n\r\n        if (locked[_of][_reason].amount == 0)\r\n            lockReason[_of].push(_reason);\r\n\r\n        require(token.operatorTransfer(_of, _amount));\r\n\r\n        uint256 validUntil = now.add(_time); //solhint-disable-line\r\n        locked[_of][_reason] = LockToken(_amount, validUntil, false);\r\n        emit Locked(_of, _reason, _amount, validUntil);\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns tokens locked for a specified address for a\r\n    *    specified reason\r\n    *\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to query the lock tokens for\r\n    */\r\n    function _tokensLocked(address _of, bytes32 _reason)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        if (!locked[_of][_reason].claimed)\r\n            amount = locked[_of][_reason].amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns tokens locked for a specified address for a\r\n    *    specified reason at a specific time\r\n    *\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to query the lock tokens for\r\n    * @param _time The timestamp to query the lock tokens for\r\n    */\r\n    function _tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        if (locked[_of][_reason].validity \u003e _time)\r\n            amount = locked[_of][_reason].amount;\r\n    }\r\n    \r\n    /**\r\n    * @dev Extends lock for a specified reason and time\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to lock tokens\r\n    * @param _time Lock extension time in seconds\r\n    */\r\n    function _extendLock(address _of, bytes32 _reason, uint256 _time) internal {\r\n        require(_tokensLocked(_of, _reason) \u003e 0);\r\n        emit Unlocked(_of, _reason, locked[_of][_reason].amount);\r\n        locked[_of][_reason].validity = locked[_of][_reason].validity.add(_time);\r\n        emit Locked(_of, _reason, locked[_of][_reason].amount, locked[_of][_reason].validity);\r\n    }\r\n\r\n    /**\r\n    * @dev reduce lock duration for a specified reason and time\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to lock tokens\r\n    * @param _time Lock reduction time in seconds\r\n    */\r\n    function _reduceLock(address _of, bytes32 _reason, uint256 _time) internal {\r\n        require(_tokensLocked(_of, _reason) \u003e 0);\r\n        emit Unlocked(_of, _reason, locked[_of][_reason].amount);\r\n        locked[_of][_reason].validity = locked[_of][_reason].validity.sub(_time);\r\n        emit Locked(_of, _reason, locked[_of][_reason].amount, locked[_of][_reason].validity);\r\n    }\r\n    \r\n    /**\r\n    * @dev Increase number of tokens locked for a specified reason\r\n    * @param _of The address whose tokens are locked\r\n    * @param _reason The reason to lock tokens\r\n    * @param _amount Number of tokens to be increased\r\n    */\r\n    function _increaseLockAmount(address _of, bytes32 _reason, uint256 _amount) internal {\r\n        require(_tokensLocked(_of, _reason) \u003e 0);\r\n        token.operatorTransfer(msg.sender, _amount);\r\n\r\n        locked[_of][_reason].amount = locked[_of][_reason].amount.add(_amount);\r\n        emit Locked(_of, _reason, _amount, locked[_of][_reason].validity);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns unlockable tokens for a specified address for a specified reason\r\n    * @param _of The address to query the the unlockable token count of\r\n    * @param _reason The reason to query the unlockable tokens for\r\n    */\r\n    function _tokensUnlockable(address _of, bytes32 _reason) internal view returns (uint256 amount)\r\n    {\r\n      if (locked[_of][_reason].validity \u003c= now \u0026\u0026 !locked[_of][_reason].claimed) //solhint-disable-line\r\n            amount = locked[_of][_reason].amount;\r\n    }\r\n\r\n    /**\r\n    * @dev Burns locked tokens of a user \r\n    * @param _of address whose tokens are to be burned\r\n    * @param _reason lock reason for which tokens are to be burned\r\n    * @param _amount amount of tokens to burn\r\n    */\r\n    function _burnLockedTokens(address _of, bytes32 _reason, uint256 _amount) internal {\r\n        uint256 amount = _tokensLocked(_of, _reason);\r\n        require(amount \u003e= _amount);\r\n        \r\n        if (amount == _amount)\r\n            locked[_of][_reason].claimed = true;\r\n        \r\n        locked[_of][_reason].amount = locked[_of][_reason].amount.sub(_amount);\r\n        token.burn(_amount);\r\n        emit Burned(_of, _reason, _amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Released locked tokens of an address locked for a specific reason\r\n    * @param _of address whose tokens are to be released from lock\r\n    * @param _reason reason of the lock\r\n    * @param _amount amount of tokens to release\r\n    */\r\n    function _releaseLockedTokens(address _of, bytes32 _reason, uint256 _amount) \r\n        internal \r\n    {\r\n        uint256 amount = _tokensLocked(_of, _reason);\r\n        require(amount \u003e= _amount);\r\n\r\n        if (amount == _amount)\r\n            locked[_of][_reason].claimed = true;\r\n\r\n        locked[_of][_reason].amount = locked[_of][_reason].amount.sub(_amount);\r\n        require(token.transfer(_of, _amount));\r\n        emit Unlocked(_of, _reason, _amount);\r\n    }\r\n}"}}
