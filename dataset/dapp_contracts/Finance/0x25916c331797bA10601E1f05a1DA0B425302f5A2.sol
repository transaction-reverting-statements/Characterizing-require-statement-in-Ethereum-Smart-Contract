{"INXMMaster.sol":{"content":"/* Copyright (C) 2017 NexusMutual.io\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\r\n\r\npragma solidity 0.5.7;\r\n\r\n\r\ncontract INXMMaster {\r\n\r\n    address public tokenAddress;\r\n\r\n    address public owner;\r\n\r\n\r\n    uint public pauseTime;\r\n\r\n    function delegateCallBack(bytes32 myid) external;\r\n\r\n    function masterInitialized() public view returns(bool);\r\n    \r\n    function isInternal(address _add) public view returns(bool);\r\n\r\n    function isPause() public view returns(bool check);\r\n\r\n    function isOwner(address _add) public view returns(bool);\r\n\r\n    function isMember(address _add) public view returns(bool);\r\n    \r\n    function checkIsAuthToGoverned(address _add) public view returns(bool);\r\n\r\n    function updatePauseTime(uint _time) public;\r\n\r\n    function dAppLocker() public view returns(address _add);\r\n\r\n    function dAppToken() public view returns(address _add);\r\n\r\n    function getLatestAddress(bytes2 _contractName) public view returns(address payable contractAddress);\r\n}"},"Iupgradable.sol":{"content":"pragma solidity 0.5.7;\r\n\r\nimport \"./INXMMaster.sol\";\r\n\r\n\r\ncontract Iupgradable {\r\n\r\n    INXMMaster public ms;\r\n    address public nxMasterAddress;\r\n\r\n    modifier onlyInternal {\r\n        require(ms.isInternal(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier isMemberAndcheckPause {\r\n        require(ms.isPause() == false \u0026\u0026 ms.isMember(msg.sender) == true);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(ms.isOwner(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier checkPause {\r\n        require(ms.isPause() == false);\r\n        _;\r\n    }\r\n\r\n    modifier isMember {\r\n        require(ms.isMember(msg.sender), \"Not member\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Iupgradable Interface to update dependent contract address\r\n     */\r\n    function  changeDependentContractAddress() public;\r\n\r\n    /**\r\n     * @dev change master address\r\n     * @param _masterAddress is the new address\r\n     */\r\n    function changeMasterAddress(address _masterAddress) public {\r\n        if (address(ms) != address(0)) {\r\n            require(address(ms) == msg.sender, \"Not master\");\r\n        }\r\n        ms = INXMMaster(_masterAddress);\r\n        nxMasterAddress = _masterAddress;\r\n    }\r\n\r\n}\r\n"},"PoolData.sol":{"content":"/* Copyright (C) 2017 NexusMutual.io\r\n\r\n  This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n  This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n  You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see http://www.gnu.org/licenses/ */\r\n\r\npragma solidity 0.5.7;\r\n\r\nimport \"./Iupgradable.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\ncontract DSValue {\r\n    function peek() public view returns (bytes32, bool);\r\n    function read() public view returns (bytes32);\r\n}\r\n\r\n\r\ncontract PoolData is Iupgradable {\r\n    using SafeMath for uint;\r\n\r\n    struct ApiId {\r\n        bytes4 typeOf;\r\n        bytes4 currency;\r\n        uint id;\r\n        uint64 dateAdd;\r\n        uint64 dateUpd;\r\n    }\r\n\r\n    struct CurrencyAssets {\r\n        address currAddress;\r\n        uint baseMin;\r\n        uint varMin;\r\n    }\r\n\r\n    struct InvestmentAssets {\r\n        address currAddress;\r\n        bool status;\r\n        uint64 minHoldingPercX100;\r\n        uint64 maxHoldingPercX100;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct IARankDetails {\r\n        bytes4 maxIACurr;\r\n        uint64 maxRate;\r\n        bytes4 minIACurr;\r\n        uint64 minRate;\r\n    }\r\n\r\n    struct McrData {\r\n        uint mcrPercx100;\r\n        uint mcrEther;\r\n        uint vFull; //Pool funds\r\n        uint64 date;\r\n    }\r\n\r\n    IARankDetails[] internal allIARankDetails;\r\n    McrData[] public allMCRData;\r\n\r\n    bytes4[] internal allInvestmentCurrencies;\r\n    bytes4[] internal allCurrencies;\r\n    bytes32[] public allAPIcall;\r\n    mapping(bytes32 =\u003e ApiId) public allAPIid;\r\n    mapping(uint64 =\u003e uint) internal datewiseId;\r\n    mapping(bytes16 =\u003e uint) internal currencyLastIndex;\r\n    mapping(bytes4 =\u003e CurrencyAssets) internal allCurrencyAssets;\r\n    mapping(bytes4 =\u003e InvestmentAssets) internal allInvestmentAssets;\r\n    mapping(bytes4 =\u003e uint) internal caAvgRate;\r\n    mapping(bytes4 =\u003e uint) internal iaAvgRate;\r\n\r\n    address public notariseMCR;\r\n    address public daiFeedAddress;\r\n    uint private constant DECIMAL1E18 = uint(10) ** 18;\r\n    uint public uniswapDeadline;\r\n    uint public liquidityTradeCallbackTime;\r\n    uint public lastLiquidityTradeTrigger;\r\n    uint64 internal lastDate;\r\n    uint public variationPercX100;\r\n    uint public iaRatesTime;\r\n    uint public minCap;\r\n    uint public mcrTime;\r\n    uint public a;\r\n    uint public shockParameter;\r\n    uint public c;\r\n    uint public mcrFailTime; \r\n    uint public ethVolumeLimit;\r\n    uint public capReached;\r\n    uint public capacityLimit;\r\n    \r\n    constructor(address _notariseAdd, address _daiFeedAdd, address _daiAdd) public {\r\n        notariseMCR = _notariseAdd;\r\n        daiFeedAddress = _daiFeedAdd;\r\n        c = 5800000;\r\n        a = 1028;\r\n        mcrTime = 24 hours;\r\n        mcrFailTime = 6 hours;\r\n        allMCRData.push(McrData(0, 0, 0, 0));\r\n        minCap = 12000 * DECIMAL1E18;\r\n        shockParameter = 50;\r\n        variationPercX100 = 100; //1%\r\n        iaRatesTime = 24 hours; //24 hours in seconds\r\n        uniswapDeadline = 20 minutes;\r\n        liquidityTradeCallbackTime = 4 hours;\r\n        ethVolumeLimit = 4;\r\n        capacityLimit = 10;\r\n        allCurrencies.push(\"ETH\");\r\n        allCurrencyAssets[\"ETH\"] = CurrencyAssets(address(0), 1000 * DECIMAL1E18, 0);\r\n        allCurrencies.push(\"DAI\");\r\n        allCurrencyAssets[\"DAI\"] = CurrencyAssets(_daiAdd, 50000 * DECIMAL1E18, 0);\r\n        allInvestmentCurrencies.push(\"ETH\");\r\n        allInvestmentAssets[\"ETH\"] = InvestmentAssets(address(0), true, 2500, 10000, 18);\r\n        allInvestmentCurrencies.push(\"DAI\");\r\n        allInvestmentAssets[\"DAI\"] = InvestmentAssets(_daiAdd, true, 250, 1500, 18);\r\n    }\r\n\r\n    /**\r\n     * @dev to set the maximum cap allowed \r\n     * @param val is the new value\r\n     */\r\n    function setCapReached(uint val) external onlyInternal {\r\n        capReached = val;\r\n    }\r\n    \r\n    /// @dev Updates the 3 day average rate of a IA currency.\r\n    /// To be replaced by MakerDao\u0027s on chain rates\r\n    /// @param curr IA Currency Name.\r\n    /// @param rate Average exchange rate X 100 (of last 3 days).\r\n    function updateIAAvgRate(bytes4 curr, uint rate) external onlyInternal {\r\n        iaAvgRate[curr] = rate;\r\n    }\r\n\r\n    /// @dev Updates the 3 day average rate of a CA currency.\r\n    /// To be replaced by MakerDao\u0027s on chain rates\r\n    /// @param curr Currency Name.\r\n    /// @param rate Average exchange rate X 100 (of last 3 days).\r\n    function updateCAAvgRate(bytes4 curr, uint rate) external onlyInternal {\r\n        caAvgRate[curr] = rate;\r\n    }\r\n\r\n    /// @dev Adds details of (Minimum Capital Requirement)MCR.\r\n    /// @param mcrp Minimum Capital Requirement percentage (MCR% * 100 ,Ex:for 54.56% ,given 5456)\r\n    /// @param vf Pool fund value in Ether used in the last full daily calculation from the Capital model.\r\n    function pushMCRData(uint mcrp, uint mcre, uint vf, uint64 time) external onlyInternal {\r\n        allMCRData.push(McrData(mcrp, mcre, vf, time));\r\n    }\r\n\r\n    /** \r\n     * @dev Updates the Timestamp at which result of oracalize call is received.\r\n     */  \r\n    function updateDateUpdOfAPI(bytes32 myid) external onlyInternal {\r\n        allAPIid[myid].dateUpd = uint64(now);\r\n    }\r\n\r\n    /** \r\n     * @dev Saves the details of the Oraclize API.\r\n     * @param myid Id return by the oraclize query.\r\n     * @param _typeof type of the query for which oraclize call is made.\r\n     * @param id ID of the proposal,quote,cover etc. for which oraclize call is made \r\n     */  \r\n    function saveApiDetails(bytes32 myid, bytes4 _typeof, uint id) external onlyInternal {\r\n        allAPIid[myid] = ApiId(_typeof, \"\", id, uint64(now), uint64(now));\r\n    }\r\n\r\n    /** \r\n     * @dev Stores the id return by the oraclize query. \r\n     * Maintains record of all the Ids return by oraclize query.\r\n     * @param myid Id return by the oraclize query.\r\n     */  \r\n    function addInAllApiCall(bytes32 myid) external onlyInternal {\r\n        allAPIcall.push(myid);\r\n    }\r\n    \r\n    /**\r\n     * @dev Saves investment asset rank details.\r\n     * @param maxIACurr Maximum ranked investment asset currency.\r\n     * @param maxRate Maximum ranked investment asset rate.\r\n     * @param minIACurr Minimum ranked investment asset currency.\r\n     * @param minRate Minimum ranked investment asset rate.\r\n     * @param date in yyyymmdd.\r\n     */  \r\n    function saveIARankDetails(\r\n        bytes4 maxIACurr,\r\n        uint64 maxRate,\r\n        bytes4 minIACurr,\r\n        uint64 minRate,\r\n        uint64 date\r\n    )\r\n        external\r\n        onlyInternal\r\n    {\r\n        allIARankDetails.push(IARankDetails(maxIACurr, maxRate, minIACurr, minRate));\r\n        datewiseId[date] = allIARankDetails.length.sub(1);\r\n    }\r\n\r\n    /**\r\n     * @dev to get the time for the laste liquidity trade trigger\r\n     */\r\n    function setLastLiquidityTradeTrigger() external onlyInternal {\r\n        lastLiquidityTradeTrigger = now;\r\n    }\r\n\r\n    /** \r\n     * @dev Updates Last Date.\r\n     */  \r\n    function updatelastDate(uint64 newDate) external onlyInternal {\r\n        lastDate = newDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds currency asset currency. \r\n     * @param curr currency of the asset\r\n     * @param currAddress address of the currency\r\n     * @param baseMin base minimum in 10^18. \r\n     */  \r\n    function addCurrencyAssetCurrency(\r\n        bytes4 curr,\r\n        address currAddress,\r\n        uint baseMin\r\n    ) \r\n        external\r\n    {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allCurrencies.push(curr);\r\n        allCurrencyAssets[curr] = CurrencyAssets(currAddress, baseMin, 0);\r\n    }\r\n    \r\n    /**\r\n     * @dev Adds investment asset. \r\n     */  \r\n    function addInvestmentAssetCurrency(\r\n        bytes4 curr,\r\n        address currAddress,\r\n        bool status,\r\n        uint64 minHoldingPercX100,\r\n        uint64 maxHoldingPercX100,\r\n        uint8 decimals\r\n    ) \r\n        external\r\n    {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allInvestmentCurrencies.push(curr);\r\n        allInvestmentAssets[curr] = InvestmentAssets(currAddress, status,\r\n            minHoldingPercX100, maxHoldingPercX100, decimals);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes base minimum of a given currency asset.\r\n     */ \r\n    function changeCurrencyAssetBaseMin(bytes4 curr, uint baseMin) external {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allCurrencyAssets[curr].baseMin = baseMin;\r\n    }\r\n\r\n    /**\r\n     * @dev changes variable minimum of a given currency asset.\r\n     */  \r\n    function changeCurrencyAssetVarMin(bytes4 curr, uint varMin) external onlyInternal {\r\n        allCurrencyAssets[curr].varMin = varMin;\r\n    }\r\n\r\n    /** \r\n     * @dev Changes the investment asset status.\r\n     */ \r\n    function changeInvestmentAssetStatus(bytes4 curr, bool status) external {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allInvestmentAssets[curr].status = status;\r\n    }\r\n\r\n    /** \r\n     * @dev Changes the investment asset Holding percentage of a given currency.\r\n     */\r\n    function changeInvestmentAssetHoldingPerc(\r\n        bytes4 curr,\r\n        uint64 minPercX100,\r\n        uint64 maxPercX100\r\n    )\r\n        external\r\n    {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allInvestmentAssets[curr].minHoldingPercX100 = minPercX100;\r\n        allInvestmentAssets[curr].maxHoldingPercX100 = maxPercX100;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets Currency asset token address. \r\n     */  \r\n    function changeCurrencyAssetAddress(bytes4 curr, address currAdd) external {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allCurrencyAssets[curr].currAddress = currAdd;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes Investment asset token address.\r\n     */ \r\n    function changeInvestmentAssetAddressAndDecimal(\r\n        bytes4 curr,\r\n        address currAdd,\r\n        uint8 newDecimal\r\n    )\r\n        external\r\n    {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        allInvestmentAssets[curr].currAddress = currAdd;\r\n        allInvestmentAssets[curr].decimals = newDecimal;\r\n    }\r\n\r\n    /// @dev Changes address allowed to post MCR.\r\n    function changeNotariseAddress(address _add) external onlyInternal {\r\n        notariseMCR = _add;\r\n    }\r\n\r\n    /// @dev updates daiFeedAddress address.\r\n    /// @param _add address of DAI feed.\r\n    function changeDAIfeedAddress(address _add) external onlyInternal {\r\n        daiFeedAddress = _add;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets Uint Parameters of a code\r\n     * @param code whose details we want\r\n     * @return string value of the code\r\n     * @return associated amount (time or perc or value) to the code\r\n     */\r\n    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {\r\n        codeVal = code;\r\n        if (code == \"MCRTIM\") {\r\n            val = mcrTime / (1 hours);\r\n\r\n        } else if (code == \"MCRFTIM\") {\r\n\r\n            val = mcrFailTime / (1 hours);\r\n\r\n        } else if (code == \"MCRMIN\") {\r\n\r\n            val = minCap;\r\n\r\n        } else if (code == \"MCRSHOCK\") {\r\n\r\n            val = shockParameter;\r\n\r\n        } else if (code == \"MCRCAPL\") {\r\n\r\n            val = capacityLimit;\r\n\r\n        } else if (code == \"IMZ\") {\r\n\r\n            val = variationPercX100;\r\n\r\n        } else if (code == \"IMRATET\") {\r\n\r\n            val = iaRatesTime / (1 hours);\r\n\r\n        } else if (code == \"IMUNIDL\") {\r\n\r\n            val = uniswapDeadline / (1 minutes);\r\n\r\n        } else if (code == \"IMLIQT\") {\r\n\r\n            val = liquidityTradeCallbackTime / (1 hours);\r\n\r\n        } else if (code == \"IMETHVL\") {\r\n\r\n            val = ethVolumeLimit;\r\n\r\n        } else if (code == \"C\") {\r\n            val = c;\r\n\r\n        } else if (code == \"A\") {\r\n\r\n            val = a;\r\n\r\n        }\r\n            \r\n    }\r\n \r\n    /// @dev Checks whether a given address can notaise MCR data or not.\r\n    /// @param _add Address.\r\n    /// @return res Returns 0 if address is not authorized, else 1.\r\n    function isnotarise(address _add) external view returns(bool res) {\r\n        res = false;\r\n        if (_add == notariseMCR)\r\n            res = true;\r\n    }\r\n\r\n    /// @dev Gets the details of last added MCR.\r\n    /// @return mcrPercx100 Total Minimum Capital Requirement percentage of that month of year(multiplied by 100).\r\n    /// @return vFull Total Pool fund value in Ether used in the last full daily calculation.\r\n    function getLastMCR() external view returns(uint mcrPercx100, uint mcrEtherx1E18, uint vFull, uint64 date) {\r\n        uint index = allMCRData.length.sub(1);\r\n        return (\r\n            allMCRData[index].mcrPercx100,\r\n            allMCRData[index].mcrEther,\r\n            allMCRData[index].vFull,\r\n            allMCRData[index].date\r\n        );\r\n    }\r\n\r\n    /// @dev Gets last Minimum Capital Requirement percentage of Capital Model\r\n    /// @return val MCR% value,multiplied by 100.\r\n    function getLastMCRPerc() external view returns(uint) {\r\n        return allMCRData[allMCRData.length.sub(1)].mcrPercx100;\r\n    }\r\n\r\n    /// @dev Gets last Ether price of Capital Model\r\n    /// @return val ether value,multiplied by 100.\r\n    function getLastMCREther() external view returns(uint) {\r\n        return allMCRData[allMCRData.length.sub(1)].mcrEther;\r\n    }\r\n\r\n    /// @dev Gets Pool fund value in Ether used in the last full daily calculation from the Capital model.\r\n    function getLastVfull() external view returns(uint) {\r\n        return allMCRData[allMCRData.length.sub(1)].vFull;\r\n    }\r\n\r\n    /// @dev Gets last Minimum Capital Requirement in Ether.\r\n    /// @return date of MCR.\r\n    function getLastMCRDate() external view returns(uint64 date) {\r\n        date = allMCRData[allMCRData.length.sub(1)].date;\r\n    }\r\n\r\n    /// @dev Gets details for token price calculation.\r\n    function getTokenPriceDetails(bytes4 curr) external view returns(uint _a, uint _c, uint rate) {\r\n        _a = a;\r\n        _c = c;\r\n        rate = _getAvgRate(curr, false);\r\n    }\r\n    \r\n    /// @dev Gets the total number of times MCR calculation has been made.\r\n    function getMCRDataLength() external view returns(uint len) {\r\n        len = allMCRData.length;\r\n    }\r\n \r\n    /**\r\n     * @dev Gets investment asset rank details by given date.\r\n     */  \r\n    function getIARankDetailsByDate(\r\n        uint64 date\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            bytes4 maxIACurr,\r\n            uint64 maxRate,\r\n            bytes4 minIACurr,\r\n            uint64 minRate\r\n        )\r\n    {\r\n        uint index = datewiseId[date];\r\n        return (\r\n            allIARankDetails[index].maxIACurr,\r\n            allIARankDetails[index].maxRate,\r\n            allIARankDetails[index].minIACurr,\r\n            allIARankDetails[index].minRate\r\n        );\r\n    }\r\n\r\n    /** \r\n     * @dev Gets Last Date.\r\n     */ \r\n    function getLastDate() external view returns(uint64 date) {\r\n        return lastDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets investment currency for a given index.\r\n     */  \r\n    function getInvestmentCurrencyByIndex(uint index) external view returns(bytes4 currName) {\r\n        return allInvestmentCurrencies[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets count of investment currency.\r\n     */  \r\n    function getInvestmentCurrencyLen() external view returns(uint len) {\r\n        return allInvestmentCurrencies.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets all the investment currencies.\r\n     */ \r\n    function getAllInvestmentCurrencies() external view returns(bytes4[] memory currencies) {\r\n        return allInvestmentCurrencies;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets All currency for a given index.\r\n     */  \r\n    function getCurrenciesByIndex(uint index) external view returns(bytes4 currName) {\r\n        return allCurrencies[index];\r\n    }\r\n\r\n    /** \r\n     * @dev Gets count of All currency.\r\n     */  \r\n    function getAllCurrenciesLen() external view returns(uint len) {\r\n        return allCurrencies.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets all currencies \r\n     */  \r\n    function getAllCurrencies() external view returns(bytes4[] memory currencies) {\r\n        return allCurrencies;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets currency asset details for a given currency.\r\n     */  \r\n    function getCurrencyAssetVarBase(\r\n        bytes4 curr\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            bytes4 currency,\r\n            uint baseMin,\r\n            uint varMin\r\n        )\r\n    {\r\n        return (\r\n            curr,\r\n            allCurrencyAssets[curr].baseMin,\r\n            allCurrencyAssets[curr].varMin\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets minimum variable value for currency asset.\r\n     */  \r\n    function getCurrencyAssetVarMin(bytes4 curr) external view returns(uint varMin) {\r\n        return allCurrencyAssets[curr].varMin;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets base minimum of  a given currency asset.\r\n     */  \r\n    function getCurrencyAssetBaseMin(bytes4 curr) external view returns(uint baseMin) {\r\n        return allCurrencyAssets[curr].baseMin;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets investment asset maximum and minimum holding percentage of a given currency.\r\n     */  \r\n    function getInvestmentAssetHoldingPerc(\r\n        bytes4 curr\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            uint64 minHoldingPercX100,\r\n            uint64 maxHoldingPercX100\r\n        )\r\n    {\r\n        return (\r\n            allInvestmentAssets[curr].minHoldingPercX100,\r\n            allInvestmentAssets[curr].maxHoldingPercX100\r\n        );\r\n    }\r\n\r\n    /** \r\n     * @dev Gets investment asset decimals.\r\n     */  \r\n    function getInvestmentAssetDecimals(bytes4 curr) external view returns(uint8 decimal) {\r\n        return allInvestmentAssets[curr].decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets investment asset maximum holding percentage of a given currency.\r\n     */  \r\n    function getInvestmentAssetMaxHoldingPerc(bytes4 curr) external view returns(uint64 maxHoldingPercX100) {\r\n        return allInvestmentAssets[curr].maxHoldingPercX100;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets investment asset minimum holding percentage of a given currency.\r\n     */  \r\n    function getInvestmentAssetMinHoldingPerc(bytes4 curr) external view returns(uint64 minHoldingPercX100) {\r\n        return allInvestmentAssets[curr].minHoldingPercX100;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets investment asset details of a given currency\r\n     */  \r\n    function getInvestmentAssetDetails(\r\n        bytes4 curr\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            bytes4 currency,\r\n            address currAddress,\r\n            bool status,\r\n            uint64 minHoldingPerc,\r\n            uint64 maxHoldingPerc,\r\n            uint8 decimals\r\n        )\r\n    {\r\n        return (\r\n            curr,\r\n            allInvestmentAssets[curr].currAddress,\r\n            allInvestmentAssets[curr].status,\r\n            allInvestmentAssets[curr].minHoldingPercX100,\r\n            allInvestmentAssets[curr].maxHoldingPercX100,\r\n            allInvestmentAssets[curr].decimals\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets Currency asset token address.\r\n     */  \r\n    function getCurrencyAssetAddress(bytes4 curr) external view returns(address) {\r\n        return allCurrencyAssets[curr].currAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets investment asset token address.\r\n     */  \r\n    function getInvestmentAssetAddress(bytes4 curr) external view returns(address) {\r\n        return allInvestmentAssets[curr].currAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets investment asset active Status of a given currency.\r\n     */  \r\n    function getInvestmentAssetStatus(bytes4 curr) external view returns(bool status) {\r\n        return allInvestmentAssets[curr].status;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets type of oraclize query for a given Oraclize Query ID.\r\n     * @param myid Oraclize Query ID identifying the query for which the result is being received.\r\n     * @return _typeof It could be of type \"quote\",\"quotation\",\"cover\",\"claim\" etc.\r\n     */  \r\n    function getApiIdTypeOf(bytes32 myid) external view returns(bytes4) {\r\n        return allAPIid[myid].typeOf;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets ID associated to oraclize query for a given Oraclize Query ID.\r\n     * @param myid Oraclize Query ID identifying the query for which the result is being received.\r\n     * @return id1 It could be the ID of \"proposal\",\"quotation\",\"cover\",\"claim\" etc.\r\n     */  \r\n    function getIdOfApiId(bytes32 myid) external view returns(uint) {\r\n        return allAPIid[myid].id;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets the Timestamp of a oracalize call.\r\n     */  \r\n    function getDateAddOfAPI(bytes32 myid) external view returns(uint64) {\r\n        return allAPIid[myid].dateAdd;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the Timestamp at which result of oracalize call is received.\r\n     */  \r\n    function getDateUpdOfAPI(bytes32 myid) external view returns(uint64) {\r\n        return allAPIid[myid].dateUpd;\r\n    }\r\n\r\n    /** \r\n     * @dev Gets currency by oracalize id. \r\n     */  \r\n    function getCurrOfApiId(bytes32 myid) external view returns(bytes4) {\r\n        return allAPIid[myid].currency;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets ID return by the oraclize query of a given index.\r\n     * @param index Index.\r\n     * @return myid ID return by the oraclize query.\r\n     */  \r\n    function getApiCallIndex(uint index) external view returns(bytes32 myid) {\r\n        myid = allAPIcall[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets Length of API call. \r\n     */  \r\n    function getApilCallLength() external view returns(uint) {\r\n        return allAPIcall.length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Get Details of Oraclize API when given Oraclize Id.\r\n     * @param myid ID return by the oraclize query.\r\n     * @return _typeof ype of the query for which oraclize \r\n     * call is made.(\"proposal\",\"quote\",\"quotation\" etc.) \r\n     */  \r\n    function getApiCallDetails(\r\n        bytes32 myid\r\n    )\r\n        external\r\n        view\r\n        returns(\r\n            bytes4 _typeof,\r\n            bytes4 curr,\r\n            uint id,\r\n            uint64 dateAdd,\r\n            uint64 dateUpd\r\n        )\r\n    {\r\n        return (\r\n            allAPIid[myid].typeOf,\r\n            allAPIid[myid].currency,\r\n            allAPIid[myid].id,\r\n            allAPIid[myid].dateAdd,\r\n            allAPIid[myid].dateUpd\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Updates Uint Parameters of a code\r\n     * @param code whose details we want to update\r\n     * @param val value to set\r\n     */\r\n    function updateUintParameters(bytes8 code, uint val) public {\r\n        require(ms.checkIsAuthToGoverned(msg.sender));\r\n        if (code == \"MCRTIM\") {\r\n            _changeMCRTime(val * 1 hours);\r\n\r\n        } else if (code == \"MCRFTIM\") {\r\n\r\n            _changeMCRFailTime(val * 1 hours);\r\n\r\n        } else if (code == \"MCRMIN\") {\r\n\r\n            _changeMinCap(val);\r\n\r\n        } else if (code == \"MCRSHOCK\") {\r\n\r\n            _changeShockParameter(val);\r\n\r\n        } else if (code == \"MCRCAPL\") {\r\n\r\n            _changeCapacityLimit(val);\r\n\r\n        } else if (code == \"IMZ\") {\r\n\r\n            _changeVariationPercX100(val);\r\n\r\n        } else if (code == \"IMRATET\") {\r\n\r\n            _changeIARatesTime(val * 1 hours);\r\n\r\n        } else if (code == \"IMUNIDL\") {\r\n\r\n            _changeUniswapDeadlineTime(val * 1 minutes);\r\n\r\n        } else if (code == \"IMLIQT\") {\r\n\r\n            _changeliquidityTradeCallbackTime(val * 1 hours);\r\n\r\n        } else if (code == \"IMETHVL\") {\r\n\r\n            _setEthVolumeLimit(val);\r\n\r\n        } else if (code == \"C\") {\r\n            _changeC(val);\r\n\r\n        } else if (code == \"A\") {\r\n\r\n            _changeA(val);\r\n\r\n        } else {\r\n            revert(\"Invalid param code\");\r\n        }\r\n            \r\n    }\r\n\r\n    /**\r\n     * @dev to get the average rate of currency rate \r\n     * @param curr is the currency in concern\r\n     * @return required rate\r\n     */\r\n    function getCAAvgRate(bytes4 curr) public view returns(uint rate) {\r\n        return _getAvgRate(curr, false);\r\n    }\r\n\r\n    /**\r\n     * @dev to get the average rate of investment rate \r\n     * @param curr is the investment in concern\r\n     * @return required rate\r\n     */\r\n    function getIAAvgRate(bytes4 curr) public view returns(uint rate) {\r\n        return _getAvgRate(curr, true);\r\n    }\r\n\r\n    function changeDependentContractAddress() public onlyInternal {}\r\n\r\n    /// @dev Gets the average rate of a CA currency.\r\n    /// @param curr Currency Name.\r\n    /// @return rate Average rate X 100(of last 3 days).\r\n    function _getAvgRate(bytes4 curr, bool isIA) internal view returns(uint rate) {\r\n        if (curr == \"DAI\") {\r\n            DSValue ds = DSValue(daiFeedAddress);\r\n            rate = uint(ds.read()).div(uint(10) ** 16);\r\n        } else if (isIA) {\r\n            rate = iaAvgRate[curr];\r\n        } else {\r\n            rate = caAvgRate[curr];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev to set the ethereum volume limit \r\n     * @param val is the new limit value\r\n     */\r\n    function _setEthVolumeLimit(uint val) internal {\r\n        ethVolumeLimit = val;\r\n    }\r\n\r\n    /// @dev Sets minimum Cap.\r\n    function _changeMinCap(uint newCap) internal {\r\n        minCap = newCap;\r\n    }\r\n\r\n    /// @dev Sets Shock Parameter.\r\n    function _changeShockParameter(uint newParam) internal {\r\n        shockParameter = newParam;\r\n    }\r\n    \r\n    /// @dev Changes time period for obtaining new MCR data from external oracle query.\r\n    function _changeMCRTime(uint _time) internal {\r\n        mcrTime = _time;\r\n    }\r\n\r\n    /// @dev Sets MCR Fail time.\r\n    function _changeMCRFailTime(uint _time) internal {\r\n        mcrFailTime = _time;\r\n    }\r\n\r\n    /**\r\n     * @dev to change the uniswap deadline time \r\n     * @param newDeadline is the value\r\n     */\r\n    function _changeUniswapDeadlineTime(uint newDeadline) internal {\r\n        uniswapDeadline = newDeadline;\r\n    }\r\n\r\n    /**\r\n     * @dev to change the liquidity trade call back time \r\n     * @param newTime is the new value to be set\r\n     */\r\n    function _changeliquidityTradeCallbackTime(uint newTime) internal {\r\n        liquidityTradeCallbackTime = newTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes time after which investment asset rates need to be fed.\r\n     */  \r\n    function _changeIARatesTime(uint _newTime) internal {\r\n        iaRatesTime = _newTime;\r\n    }\r\n    \r\n    /**\r\n     * @dev Changes the variation range percentage.\r\n     */  \r\n    function _changeVariationPercX100(uint newPercX100) internal {\r\n        variationPercX100 = newPercX100;\r\n    }\r\n\r\n    /// @dev Changes Growth Step\r\n    function _changeC(uint newC) internal {\r\n        c = newC;\r\n    }\r\n\r\n    /// @dev Changes scaling factor.\r\n    function _changeA(uint val) internal {\r\n        a = val;\r\n    }\r\n    \r\n    /**\r\n     * @dev to change the capacity limit \r\n     * @param val is the new value\r\n     */\r\n    function _changeCapacityLimit(uint val) internal {\r\n        capacityLimit = val;\r\n    }    \r\n}\r\n"},"SafeMath.sol":{"content":"pragma solidity 0.5.7;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n"}}
