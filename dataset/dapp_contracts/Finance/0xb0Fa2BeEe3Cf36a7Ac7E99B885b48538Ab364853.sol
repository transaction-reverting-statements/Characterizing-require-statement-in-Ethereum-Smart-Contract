{{
  "language": "Solidity",
  "sources": {
    "contracts/CommunityVault.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract CommunityVault is Ownable {\n\n    IERC20 private _bond;\n\n    constructor (address bond) public {\n        _bond = IERC20(bond);\n    }\n\n    event SetAllowance(address indexed caller, address indexed spender, uint256 amount);\n\n    function setAllowance(address spender, uint amount) public onlyOwner {\n        _bond.approve(spender, amount);\n\n        emit SetAllowance(msg.sender, spender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../GSN/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IStaking {\n\n    function getEpochId(uint timestamp) external view returns (uint); // get epoch id\n    function getEpochUserBalance(address user, address token, uint128 epoch) external view returns(uint);\n    function getEpochPoolSize(address token, uint128 epoch) external view returns (uint);\n    function epoch1Start() external view returns (uint);\n    function epochDuration() external view returns (uint);\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20(\"ERC20Mock\", \"MCK\") {\n    bool public transferFromCalled = false;\n\n    bool public transferCalled = false;\n    address public transferRecipient = address(0);\n    uint256 public transferAmount = 0;\n\n    function mint(address user, uint256 amount) public {\n        _mint(user, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        transferFromCalled = true;\n\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        transferCalled = true;\n        transferRecipient = recipient;\n        transferAmount = amount;\n\n        return super.transfer(recipient, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/ERC20Mock6Decimals.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock6Decimals is ERC20(\"ERC20Mock6decimals\", \"MCK\") {\n    bool public transferFromCalled = false;\n\n    bool public transferCalled = false;\n    address public transferRecipient = address(0);\n    uint256 public transferAmount = 0;\n    uint8 private _decimals;\n\n    constructor () public {\n        _decimals = 6;\n    }\n\n    function mint(address user, uint256 amount) public {\n        _mint(user, amount);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        transferFromCalled = true;\n\n        return super.transferFrom(sender, recipient, amount);\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        transferCalled = true;\n        transferRecipient = recipient;\n        transferAmount = amount;\n\n        return super.transfer(recipient, amount);\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract Staking is ReentrancyGuard {\n    using SafeMath for uint256;\n\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\n\n    // timestamp for the epoch 1\n    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\n    uint256 public epoch1Start;\n\n    // duration of each epoch\n    uint256 public epochDuration;\n\n    // holds the current balance of the user for each token\n    mapping(address => mapping(address => uint256)) private balances;\n\n    struct Pool {\n        uint256 size;\n        bool set;\n    }\n\n    // for each token, we store the total pool size\n    mapping(address => mapping(uint256 => Pool)) private poolSize;\n\n    // a checkpoint of the valid balance of a user for an epoch\n    struct Checkpoint {\n        uint128 epochId;\n        uint128 multiplier;\n        uint256 startBalance;\n        uint256 newDeposits;\n    }\n\n    // balanceCheckpoints[user][token][]\n    mapping(address => mapping(address => Checkpoint[])) private balanceCheckpoints;\n\n    mapping(address => uint128) private lastWithdrawEpochId;\n\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount);\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount);\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\n\n    constructor (uint256 _epoch1Start, uint256 _epochDuration) public {\n        epoch1Start = _epoch1Start;\n        epochDuration = _epochDuration;\n    }\n\n    /*\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\n     */\n    function deposit(address tokenAddress, uint256 amount) public nonReentrant {\n        require(amount > 0, \"Staking: Amount must be > 0\");\n\n        IERC20 token = IERC20(tokenAddress);\n        uint256 allowance = token.allowance(msg.sender, address(this));\n        require(allowance >= amount, \"Staking: Token allowance too small\");\n\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\n\n        token.transferFrom(msg.sender, address(this), amount);\n\n        // epoch logic\n        uint128 currentEpoch = getCurrentEpoch();\n        uint128 currentMultiplier = currentEpochMultiplier();\n\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\n            address[] memory tokens = new address[](1);\n            tokens[0] = tokenAddress;\n            manualEpochInit(tokens, currentEpoch);\n        }\n\n        // update the next epoch pool size\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\n        pNextEpoch.size = token.balanceOf(address(this));\n        pNextEpoch.set = true;\n\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\n\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\n\n        // if there's no checkpoint yet, it means the user didn't have any activity\n        // we want to store checkpoints both for the current epoch and next epoch because\n        // if a user does a withdraw, the current epoch can also be modified and\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\n        if (checkpoints.length == 0) {\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\n\n            // next epoch => multiplier is 1, epoch deposits is 0\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\n        } else {\n            uint256 last = checkpoints.length - 1;\n\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\n            if (checkpoints[last].epochId < currentEpoch) {\n                uint128 multiplier = computeNewMultiplier(\n                    getCheckpointBalance(checkpoints[last]),\n                    BASE_MULTIPLIER,\n                    amount,\n                    currentMultiplier\n                );\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n            }\n            // the last action happened in the previous epoch\n            else if (checkpoints[last].epochId == currentEpoch) {\n                checkpoints[last].multiplier = computeNewMultiplier(\n                    getCheckpointBalance(checkpoints[last]),\n                    checkpoints[last].multiplier,\n                    amount,\n                    currentMultiplier\n                );\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\n\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n            }\n            // the last action happened in the current epoch\n            else {\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\n                        getCheckpointBalance(checkpoints[last - 1]),\n                        checkpoints[last - 1].multiplier,\n                        amount,\n                        currentMultiplier\n                    );\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\n                }\n\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n            }\n        }\n\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\n\n        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\n\n        emit Deposit(msg.sender, tokenAddress, amount);\n    }\n\n    /*\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\n     */\n    function withdraw(address tokenAddress, uint256 amount) public nonReentrant {\n        require(balances[msg.sender][tokenAddress] >= amount, \"Staking: balance too small\");\n\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\n\n        IERC20 token = IERC20(tokenAddress);\n        token.transfer(msg.sender, amount);\n\n        // epoch logic\n        uint128 currentEpoch = getCurrentEpoch();\n\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\n\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\n            address[] memory tokens = new address[](1);\n            tokens[0] = tokenAddress;\n            manualEpochInit(tokens, currentEpoch);\n        }\n\n        // update the pool size of the next epoch to its current balance\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\n        pNextEpoch.size = token.balanceOf(address(this));\n        pNextEpoch.set = true;\n\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\n        uint256 last = checkpoints.length - 1;\n\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\n\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\n        if (checkpoints[last].epochId < currentEpoch) {\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\n\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\n        }\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\n        else if (checkpoints[last].epochId == currentEpoch) {\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n            checkpoints[last].newDeposits = 0;\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\n\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\n        }\n        // there was a deposit in the current epoch\n        else {\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\n\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n\n            // in case of withdraw, we have 2 branches:\n            // 1. the user withdraws less than he added in the current epoch\n            // 2. the user withdraws more than he added in the current epoch (including 0)\n            if (amount < currentEpochCheckpoint.newDeposits) {\n                uint128 avgDepositMultiplier = uint128(\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\n                );\n\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\n\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\n                    currentEpochCheckpoint.startBalance,\n                    BASE_MULTIPLIER,\n                    currentEpochCheckpoint.newDeposits,\n                    avgDepositMultiplier\n                );\n            } else {\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\n                    amount.sub(currentEpochCheckpoint.newDeposits)\n                );\n                currentEpochCheckpoint.newDeposits = 0;\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\n            }\n\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\n\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\n\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\n        }\n\n        emit Withdraw(msg.sender, tokenAddress, amount);\n    }\n\n    /*\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\n     */\n    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\n        require(epochId <= getCurrentEpoch(), \"can't init a future epoch\");\n\n        for (uint i = 0; i < tokens.length; i++) {\n            Pool storage p = poolSize[tokens[i]][epochId];\n\n            if (epochId == 0) {\n                p.size = uint256(0);\n                p.set = true;\n            } else {\n                require(!epochIsInitialized(tokens[i], epochId), \"Staking: epoch already initialized\");\n                require(epochIsInitialized(tokens[i], epochId - 1), \"Staking: previous epoch not initialized\");\n\n                p.size = poolSize[tokens[i]][epochId - 1].size;\n                p.set = true;\n            }\n        }\n\n        emit ManualEpochInit(msg.sender, epochId, tokens);\n    }\n\n    function emergencyWithdraw(address tokenAddress) public {\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, \"At least 10 epochs must pass without success\");\n\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\n        require(totalUserBalance > 0, \"Amount must be > 0\");\n\n        balances[msg.sender][tokenAddress] = 0;\n\n        IERC20 token = IERC20(tokenAddress);\n        token.transfer(msg.sender, totalUserBalance);\n\n        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\n    }\n\n    /*\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\n     * A deposit will only change the next epoch balance.\n     * A withdraw will decrease the current epoch (and subsequent) balance.\n     */\n    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\n\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\n            return 0;\n        }\n\n        uint min = 0;\n        uint max = checkpoints.length - 1;\n\n        // shortcut for blocks newer than the latest checkpoint == current balance\n        if (epochId >= checkpoints[max].epochId) {\n            return getCheckpointEffectiveBalance(checkpoints[max]);\n        }\n\n        // binary search of the value in the array\n        while (max > min) {\n            uint mid = (max + min + 1) / 2;\n            if (checkpoints[mid].epochId <= epochId) {\n                min = mid;\n            } else {\n                max = mid - 1;\n            }\n        }\n\n        return getCheckpointEffectiveBalance(checkpoints[min]);\n    }\n\n    /*\n     * Returns the amount of `token` that the `user` has currently staked\n     */\n    function balanceOf(address user, address token) public view returns (uint256) {\n        return balances[user][token];\n    }\n\n    /*\n     * Returns the id of the current epoch derived from block.timestamp\n     */\n    function getCurrentEpoch() public view returns (uint128) {\n        if (block.timestamp < epoch1Start) {\n            return 0;\n        }\n\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\n    }\n\n    /*\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\n     */\n    function getEpochPoolSize(address tokenAddress, uint128 epochId) public view returns (uint256) {\n        // Premises:\n        // 1. it's impossible to have gaps of uninitialized epochs\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\n        if (epochIsInitialized(tokenAddress, epochId)) {\n            return poolSize[tokenAddress][epochId].size;\n        }\n\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\n        if (!epochIsInitialized(tokenAddress, 0)) {\n            return 0;\n        }\n\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\n        // which means the current pool size is equal to the current balance of token held by the staking contract\n        IERC20 token = IERC20(tokenAddress);\n        return token.balanceOf(address(this));\n    }\n\n    /*\n     * Returns the percentage of time left in the current epoch\n     */\n    function currentEpochMultiplier() public view returns (uint128) {\n        uint128 currentEpoch = getCurrentEpoch();\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\n\n        return multiplier;\n    }\n\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\n\n        return newMultiplier;\n    }\n\n    /*\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\n     */\n    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\n        return poolSize[token][epochId].set;\n    }\n\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\n        return c.startBalance.add(c.newDeposits);\n    }\n\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/YieldFarm.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IStaking.sol\";\n\n\ncontract YieldFarm {\n\n    // lib\n    using SafeMath for uint;\n    using SafeMath for uint128;\n\n    // constants\n    uint public constant TOTAL_DISTRIBUTED_AMOUNT = 800000;\n    uint public constant NR_OF_EPOCHS = 25;\n\n     // state variables\n\n    // addreses\n    address private _usdc;\n    address private _susd;\n    address private _dai;\n    address private _communityVault;\n    // contracts\n    IERC20 private _bond;\n    IStaking private _staking;\n\n\n    // fixed size array holdings total number of epochs + 1 (epoch 0 doesn't count)\n    uint[] private epochs = new uint[](NR_OF_EPOCHS + 1);\n    // pre-computed variable for optimization. total amount of bond tokens to be distributed on each epoch\n    uint private _totalAmountPerEpoch;\n\n    // id of last init epoch, for optimization purposes moved from struct to a single id.\n    uint128 public lastInitializedEpoch;\n\n    // state of user harvest epoch\n    mapping(address => uint128) private lastEpochIdHarvested;\n    uint public epochDuration; // init from staking contract\n    uint public epochStart; // init from staking contract\n\n    // events\n    event MassHarvest(address indexed user, uint256 epochsHarvested, uint256 totalValue);\n    event Harvest(address indexed user, uint128 indexed epochId, uint256 amount);\n\n    // constructor\n    constructor(address bondTokenAddress, address usdc, address susd, address dai, address stakeContract, address communityVault) public {\n        _bond = IERC20(bondTokenAddress);\n        _usdc = usdc;\n        _susd = susd;\n        _dai = dai;\n        _staking = IStaking(stakeContract);\n        _communityVault = communityVault;\n        epochStart = _staking.epoch1Start();\n        epochDuration = _staking.epochDuration();\n        _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);\n    }\n\n    // public methods\n    // public method to harvest all the unharvested epochs until current epoch - 1\n    function massHarvest() external returns (uint){\n        uint totalDistributedValue;\n        uint epochId = _getEpochId().sub(1); // fails in epoch 0\n        // force max number of epochs\n        if (epochId > NR_OF_EPOCHS) {\n            epochId = NR_OF_EPOCHS;\n        }\n\n        for (uint128 i = lastEpochIdHarvested[msg.sender] + 1; i <= epochId; i++) {\n            // i = epochId\n            // compute distributed Value and do one single transfer at the end\n            totalDistributedValue += _harvest(i);\n        }\n\n        emit MassHarvest(msg.sender, epochId.sub(lastEpochIdHarvested[msg.sender]), totalDistributedValue);\n\n        if (totalDistributedValue > 0) {\n            _bond.transferFrom(_communityVault, msg.sender, totalDistributedValue);\n        }\n\n        return totalDistributedValue;\n    }\n    function harvest (uint128 epochId) external returns (uint){\n        // checks for requested epoch\n        require (_getEpochId() > epochId, \"This epoch is in the future\");\n        require(epochId <= NR_OF_EPOCHS, \"Maximum number of epochs is 25\");\n        require (lastEpochIdHarvested[msg.sender].add(1) == epochId, \"Harvest in order\");\n        uint userReward = _harvest(epochId);\n        if (userReward > 0) {\n            _bond.transferFrom(_communityVault, msg.sender, userReward);\n        }\n        emit Harvest(msg.sender, epochId, userReward);\n        return userReward;\n    }\n\n    // views\n    // calls to the staking smart contract to retrieve the epoch total pool size\n    function getPoolSize(uint128 epochId) external view returns (uint) {\n        return _getPoolSize(epochId);\n    }\n\n    function getCurrentEpoch() external view returns (uint) {\n        return _getEpochId();\n    }\n\n    // calls to the staking smart contract to retrieve user balance for an epoch\n    function getEpochStake(address userAddress, uint128 epochId) external view returns (uint) {\n        return _getUserBalancePerEpoch(userAddress, epochId);\n    }\n\n    function userLastEpochIdHarvested() external view returns (uint){\n        return lastEpochIdHarvested[msg.sender];\n    }\n\n    // internal methods\n\n    function _initEpoch(uint128 epochId) internal {\n        require(lastInitializedEpoch.add(1) == epochId, \"Epoch can be init only in order\");\n        lastInitializedEpoch = epochId;\n        // call the staking smart contract to init the epoch\n        epochs[epochId] = _getPoolSize(epochId);\n    }\n\n    function _harvest (uint128 epochId) internal returns (uint) {\n        // try to initialize an epoch. if it can't it fails\n        // if it fails either user either a BarnBridge account will init not init epochs\n        if (lastInitializedEpoch < epochId) {\n            _initEpoch(epochId);\n        }\n        // Set user last harvested epoch\n        lastEpochIdHarvested[msg.sender] = epochId;\n        // compute and return user total reward. For optimization reasons the transfer have been moved to an upper layer (i.e. massHarvest needs to do a single transfer)\n\n        // exit if there is no stake on the epoch\n        if (epochs[epochId] == 0) {\n            return 0;\n        }\n\n        return _totalAmountPerEpoch\n        .mul(_getUserBalancePerEpoch(msg.sender, epochId))\n        .div(epochs[epochId]);\n    }\n\n    function _getPoolSize(uint128 epochId) internal view returns (uint) {\n        // retrieve stable coins total staked in epoch\n        uint valueUsdc = _staking.getEpochPoolSize(_usdc, epochId).mul(10 ** 12); // for usdc which has 6 decimals add a 10**12 to get to a common ground\n        uint valueSusd = _staking.getEpochPoolSize(_susd, epochId);\n        uint valueDai = _staking.getEpochPoolSize(_dai, epochId);\n        return valueUsdc.add(valueSusd).add(valueDai);\n    }\n\n\n\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId) internal view returns (uint){\n        // retrieve stable coins total staked per user in epoch\n        uint valueUsdc = _staking.getEpochUserBalance(userAddress, _usdc, epochId).mul(10 ** 12); // for usdc which has 6 decimals add a 10**12 to get to a common ground\n        uint valueSusd = _staking.getEpochUserBalance(userAddress, _susd, epochId);\n        uint valueDai = _staking.getEpochUserBalance(userAddress, _dai, epochId);\n        return valueUsdc.add(valueSusd).add(valueDai);\n    }\n\n    // compute epoch id from blocktimestamp and epochstart date\n    function _getEpochId() internal view returns (uint128 epochId) {\n        if (block.timestamp < epochStart) {\n            return 0;\n        }\n        epochId = uint128(block.timestamp.sub(epochStart).div(epochDuration).add(1));\n    }\n}\n"
    },
    "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/YieldFarmLP.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6.0;\n\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IStaking.sol\";\n\ncontract YieldFarmLP {\n\n    // lib\n    using SafeMath for uint;\n    using SafeMath for uint128;\n\n    // constants\n    uint public constant TOTAL_DISTRIBUTED_AMOUNT = 2000000;\n    uint public constant NR_OF_EPOCHS = 100;\n\n    // state variables\n\n    // addreses\n    address private _uniLP;\n    address private _communityVault;\n    // contracts\n    IERC20 private _bond;\n    IStaking private _staking;\n\n\n    uint[] private epochs = new uint[](NR_OF_EPOCHS + 1);\n    uint private _totalAmountPerEpoch;\n    uint128 public lastInitializedEpoch;\n    mapping(address => uint128) private lastEpochIdHarvested;\n    uint public epochDuration; // init from staking contract\n    uint public epochStart; // init from staking contract\n\n    // events\n    event MassHarvest(address indexed user, uint256 epochsHarvested, uint256 totalValue);\n    event Harvest(address indexed user, uint128 indexed epochId, uint256 amount);\n\n    // constructor\n    constructor(address bondTokenAddress, address uniLP, address stakeContract, address communityVault) public {\n        _bond = IERC20(bondTokenAddress);\n        _uniLP = uniLP;\n        _staking = IStaking(stakeContract);\n        _communityVault = communityVault;\n        epochDuration = _staking.epochDuration();\n        epochStart = _staking.epoch1Start() + epochDuration;\n        _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);\n    }\n\n    // public methods\n    // public method to harvest all the unharvested epochs until current epoch - 1\n    function massHarvest() external returns (uint){\n        uint totalDistributedValue;\n        uint epochId = _getEpochId().sub(1); // fails in epoch 0\n        // force max number of epochs\n        if (epochId > NR_OF_EPOCHS) {\n            epochId = NR_OF_EPOCHS;\n        }\n\n        for (uint128 i = lastEpochIdHarvested[msg.sender] + 1; i <= epochId; i++) {\n            // i = epochId\n            // compute distributed Value and do one single transfer at the end\n            totalDistributedValue += _harvest(i);\n        }\n\n        emit MassHarvest(msg.sender, epochId - lastEpochIdHarvested[msg.sender], totalDistributedValue);\n\n        if (totalDistributedValue > 0) {\n            _bond.transferFrom(_communityVault, msg.sender, totalDistributedValue);\n        }\n\n        return totalDistributedValue;\n    }\n    function harvest (uint128 epochId) external returns (uint){\n        // checks for requested epoch\n        require (_getEpochId() > epochId, \"This epoch is in the future\");\n        require(epochId <= NR_OF_EPOCHS, \"Maximum number of epochs is 100\");\n        require (lastEpochIdHarvested[msg.sender].add(1) == epochId, \"Harvest in order\");\n        uint userReward = _harvest(epochId);\n        if (userReward > 0) {\n            _bond.transferFrom(_communityVault, msg.sender, userReward);\n        }\n        emit Harvest(msg.sender, epochId, userReward);\n        return userReward;\n    }\n\n    // views\n    // calls to the staking smart contract to retrieve the epoch total pool size\n    function getPoolSize(uint128 epochId) external view returns (uint) {\n        return _getPoolSize(epochId);\n    }\n\n    function getCurrentEpoch() external view returns (uint) {\n        return _getEpochId();\n    }\n\n    // calls to the staking smart contract to retrieve user balance for an epoch\n    function getEpochStake(address userAddress, uint128 epochId) external view returns (uint) {\n        return _getUserBalancePerEpoch(userAddress, epochId);\n    }\n\n    function userLastEpochIdHarvested() external view returns (uint){\n        return lastEpochIdHarvested[msg.sender];\n    }\n\n    // internal methods\n\n    function _initEpoch(uint128 epochId) internal {\n        require(lastInitializedEpoch.add(1) == epochId, \"Epoch can be init only in order\");\n        lastInitializedEpoch = epochId;\n        // call the staking smart contract to init the epoch\n        epochs[epochId] = _getPoolSize(epochId);\n    }\n\n    function _harvest (uint128 epochId) internal returns (uint) {\n        // try to initialize an epoch. if it can't it fails\n        // if it fails either user either a BarnBridge account will init not init epochs\n        if (lastInitializedEpoch < epochId) {\n            _initEpoch(epochId);\n        }\n        // Set user state for last harvested\n        lastEpochIdHarvested[msg.sender] = epochId;\n        // compute and return user total reward. For optimization reasons the transfer have been moved to an upper layer (i.e. massHarvest needs to do a single transfer)\n\n        // exit if there is no stake on the epoch\n        if (epochs[epochId] == 0) {\n            return 0;\n        }\n        return _totalAmountPerEpoch\n        .mul(_getUserBalancePerEpoch(msg.sender, epochId))\n        .div(epochs[epochId]);\n    }\n\n    function _getPoolSize(uint128 epochId) internal view returns (uint) {\n        // retrieve unilp token balance\n        return _staking.getEpochPoolSize(_uniLP, _stakingEpochId(epochId));\n    }\n\n\n\n    function _getUserBalancePerEpoch(address userAddress, uint128 epochId) internal view returns (uint){\n        // retrieve unilp token balance per user per epoch\n        return _staking.getEpochUserBalance(userAddress, _uniLP, _stakingEpochId(epochId));\n    }\n\n    // compute epoch id from blocktimestamp and epochstart date\n    function _getEpochId() internal view returns (uint128 epochId) {\n        if (block.timestamp < epochStart) {\n            return 0;\n        }\n        epochId = uint128(block.timestamp.sub(epochStart).div(epochDuration).add(1));\n    }\n\n    // get the staking epoch which is 1 epoch more\n    function _stakingEpochId(uint128 epochId) pure internal returns (uint128) {\n        return epochId + 1;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}
