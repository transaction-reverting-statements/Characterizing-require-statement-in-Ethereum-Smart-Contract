{"Address.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\nlibrary Address {\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) } //solium-disable-line security/no-inline-assembly\n        return size \u003e 0;\n    }\n\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n}"},"IERC20.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\ninterface IERC20 {\n\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}\n"},"Ownable.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\ncontract Ownable {\n\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n}"},"SafeERC20.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"IERC20.sol\";\nimport \"SafeMath.sol\";\nimport \"Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length \u003e 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"},"TristersLightMinterV2.sol":{"content":"pragma solidity \u003c= 0.5.4;\n\nimport \u0027SafeMath.sol\u0027;\nimport \u0027SafeERC20.sol\u0027;\nimport \u0027Address.sol\u0027;\nimport \u0027Ownable.sol\u0027;\nimport \u0027IERC20.sol\u0027;\n\ncontract TristersLightMinterV2 is Ownable {\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n    \n    IERC20 public TLC;\n    address public feeAddress;\n    address[] public tokens;\n    mapping (address =\u003e uint256) public stakes;\n\n    mapping (address =\u003e uint256) private _tokens;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _stakes;\n\n    event Deposit(address indexed user, uint256 indexed tokenId, uint256 indexed amount, uint256 stake, uint256 gas, uint256 hashrate, uint256 orderId);\n    event Withdraw(address indexed user, uint256 indexed tokenId, uint256 indexed amount, uint256 stake, uint256 gas, uint256 orderId);\n\n    constructor(address tlcAddress) public {\n        TLC = IERC20(tlcAddress);\n        feeAddress = msg.sender;\n    }\n\n    function deposit(address tokenAddress, uint256 tokenId, uint256 amount, uint256 stake, uint256 gas, uint256 hashrate, uint256 orderId) public payable {\n        require(amount \u003e 0, \"TristersLightMinterV2: amount must be greater than zero\");\n        require(stake \u003e 0, \"TristersLightMinterV2: stake must be greater than zero\");\n        require(msg.value \u003e= gas, \"TristersLightMinterV2: value must be greater than gas\");\n\n        if (tokenAddress == address(0)) {\n            require(msg.value \u003e= amount.add(gas), \"TristersLightMinterV2: value must be greater than amoutn + gas\");\n        } else {\n            require(_tokens[tokenAddress] \u003e 0, \"TristersLightMinterV2: token is not supported\");\n            require(tokenAddress.isContract(), \"TristersLightMinterV2: tokenAddress is not contract\");\n\n            IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        \n        TLC.safeTransferFrom(msg.sender, address(this), stake);\n        if (gas \u003e 0) feeAddress.toPayable().transfer(gas);\n\n        stakes[msg.sender] = stakes[msg.sender].add(stake);\n        _stakes[msg.sender][tokenAddress] = _stakes[msg.sender][tokenAddress].add(stake);\n        _balances[msg.sender][tokenAddress] = _balances[msg.sender][tokenAddress].add(amount);\n\n        emit Deposit(msg.sender, tokenId, amount, stake, gas, hashrate, orderId);\n    }\n\n    function withdraw(address tokenAddress, uint256 tokenId, uint256 amount, uint256 gas, uint256 orderId) public payable {\n        require(amount \u003e 0, \"TristersLightMinterV2: amount must be greater than zero\");\n        require(msg.value \u003e= gas, \"TristersLightMinterV2: value must be greater than gas\");\n\n        uint256 balance = _balances[msg.sender][tokenAddress];\n        require(balance \u003e= amount, \"TristersLightMinterV2: insufficient balance\");\n        _balances[msg.sender][tokenAddress] = _balances[msg.sender][tokenAddress].sub(amount);\n\n        uint256 _stake = _stakes[msg.sender][tokenAddress];\n        uint256 stake = _stake.mul(amount).div(balance);\n        if (_stake \u003c stake) stake = _stake;\n        require(stake \u003e 0, \"TristersLightMinterV2: insufficient stake\");\n        stakes[msg.sender] = stakes[msg.sender].sub(stake);\n        _stakes[msg.sender][tokenAddress] = _stakes[msg.sender][tokenAddress].sub(stake);\n\n        if (tokenAddress == address(0)) {\n            msg.sender.transfer(amount);\n        } else {\n            require(_tokens[tokenAddress] \u003e 0, \"TristersLightMinterV2: token is not supported\");\n            require(tokenAddress.isContract(), \"TristersLightMinterV2: tokenAddress is not contract\");\n\n            IERC20(tokenAddress).safeTransfer(msg.sender, amount);\n        }\n        \n        TLC.safeTransfer(msg.sender, stake);\n        if (gas \u003e 0) feeAddress.toPayable().transfer(gas);\n\n        emit Withdraw(msg.sender, tokenId, amount, stake, gas, orderId);\n    }\n\n    function getBalance(address user, address token) public view returns (uint256) {\n        return _balances[user][token];\n    }\n\n    function addToken(address token) public onlyOwner {\n        require(token != address(0), \"TristersLightMinterV2: token the zero address\");\n        require(token.isContract(), \"TristersLightMinterV2: token is not contract\");\n        if (_tokens[token] == 0) _tokens[token] = tokens.push(token);\n    }\n\n    function removeToken(address token) public onlyOwner {\n        require(token != address(0), \"TristersLightMinterV2: token the zero address\");\n\n        if (_tokens[token] == 0) return;\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance == 0, \"TristersLightMinterV2: token balance must be equal to zero\");\n\n        delete tokens[_tokens[token].sub(1)];\n        delete _tokens[token];\n    }\n\n    function setFeeAddress(address _feeAddress) public onlyOwner {\n        require(_feeAddress != address(0), \"TristersLightMinterV2: new feeAddress the zero address\");\n        feeAddress = _feeAddress;\n    }\n\n    function() external payable {\n        revert(\"TristersLightMinterV2: does not accept payments\");\n    }\n\n}"}}
